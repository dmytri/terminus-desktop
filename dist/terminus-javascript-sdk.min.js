var TerminusDB_SDK =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/ApiExplorer.js":
/*!****************************!*\
  !*** ./src/ApiExplorer.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @file Javascript Api explorer tool
 * @author Kitty Jose
 * @license Copyright 2018-2019 Data Chemist Limited, All Rights Reserved. See LICENSE file for more
 *
 * @summary Displays a demo and description of api calls from WOQLCLient and what happens under the hood of api calls
 */
var FrameHelper = __webpack_require__(/*! ./FrameHelper */ "./src/FrameHelper.js");

var TerminusPluginManager = __webpack_require__(/*! ./plugins/TerminusPlugin */ "./src/plugins/TerminusPlugin.js");

var UTILS = __webpack_require__(/*! ./Utils */ "./src/Utils.js");

function ApiExplorer(ui) {
  this.ui = ui;
  this.viewer = ui.main;
  this.client = new TerminusDB.WOQLClient();
  this.client.use_fetch = true;
  this.client.return_full_response = true;
  this.pman = new TerminusPluginManager();
} // Controller provides access to the Api explorer functions


ApiExplorer.prototype.getAsDOM = function () {
  var aec = document.createElement("div");
  aec.setAttribute("class", "terminus-db-controller");

  if (this.ui) {
    this.getApiNav(aec, this.viewer);
  } // if this.ui


  return aec;
}; // gets api nav bar


ApiExplorer.prototype.getApiNav = function (navDom, viewer) {
  // list view of apis
  var nav = document.createElement('div');
  navDom.appendChild(nav); // connect to server api

  var ul = document.createElement('ul');
  ul.setAttribute('class', 'terminus-ul');
  nav.appendChild(ul); // connect api

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-selected terminus-a terminus-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    UTILS.removeSelectedNavClass("terminus-selected");
    this.classList.add("terminus-selected");
    self.getApiExplorerDom('connect', viewer);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-link');
  a.appendChild(icon);
  var txt = document.createTextNode('Connect Server Api');
  a.appendChild(txt);
  ul.appendChild(a); // database api

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    UTILS.removeSelectedNavClass("terminus-selected");
    this.classList.add("terminus-selected");
    self.getApiExplorerDom('create', viewer);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-database');
  a.appendChild(icon);
  var txt = document.createTextNode('Database Api');
  a.appendChild(txt);
  ul.appendChild(a); // schema api

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    UTILS.removeSelectedNavClass("terminus-selected");
    this.classList.add("terminus-selected");
    self.getApiExplorerDom('schema', viewer);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-cog');
  a.appendChild(icon);
  var txt = document.createTextNode('Schema Api');
  a.appendChild(txt);
  ul.appendChild(a); // documents api

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    UTILS.removeSelectedNavClass("terminus-selected");
    this.classList.add("terminus-selected");
    self.getApiExplorerDom('document', viewer);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-file');
  a.appendChild(icon);
  var txt = document.createTextNode('Document Api');
  a.appendChild(txt);
  ul.appendChild(a); // query api

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    UTILS.removeSelectedNavClass("terminus-selected");
    this.classList.add("terminus-selected");
    self.getApiExplorerDom('query', viewer);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-search');
  a.appendChild(icon);
  var txt = document.createTextNode('Query Api');
  a.appendChild(txt);
  ul.appendChild(a);
  this.getApiExplorerDom('connect', viewer);
  return navDom;
}; // getApiNav()
// get schema api explorer - nav bar, alert msg, headers ...


ApiExplorer.prototype.getApiExplorerDom = function (view, viewer) {
  // clear of viewer
  FrameHelper.removeChildren(viewer); // wrapper

  var wrap = document.createElement('div'); //wrap.setAttribute('class', 'terminus-wrapper terminus-wrapper-height');

  viewer.appendChild(wrap);
  var cont = document.createElement('div');
  cont.setAttribute('class', 'container-fluid');
  wrap.appendChild(cont);
  var row = document.createElement('div');
  row.setAttribute('class', 'row-fluid');
  cont.appendChild(row);
  var body = document.createElement('div');
  body.setAttribute('class', 'terminus-module-body');
  row.appendChild(body);
  var api = document.createElement('div');
  api.setAttribute('class', 'terminus-module-body span9 terminus-module-body-white-bg terminus-module-body-width');
  body.appendChild(api);
  var msg = 'API Explorer helps to understand api calls in depth.' + ' User can perform actions and view what happens in the background.';
  var al = UTILS.getInfoAlertDom('info', 'Info: ', msg);
  api.appendChild(al); // header

  api.appendChild(UTILS.getHeaderDom('Api Explorer')); // body

  var cont = document.createElement('div'); //cont.setAttribute('class', 'terminus-module-body');

  var self = this;

  switch (view) {
    case 'connect':
      var apiCont = self.getConnectExplorer(cont);
      api.appendChild(apiCont);
      break;

    case 'create':
      var apiCont = self.getDatabaseExplorer(cont);
      api.appendChild(apiCont);
      break;

    case 'schema':
      var apiCont = self.getSchemaApi(cont);
      api.appendChild(apiCont);
      break;

    case 'document':
      var apiCont = self.getDocumentApi(cont);
      api.appendChild(apiCont);
      break;

    case 'query':
      var apiCont = self.getQueryApi(cont);
      api.appendChild(apiCont);
      break;
  } // switch(api)


  return wrap;
}; // getApiExplorerDom


ApiExplorer.prototype.setSelectedNavMenu = function (a) {
  UTILS.removeSelectedNavClass("terminus-selected");
  a.classList.add("terminus-selected");
};

ApiExplorer.prototype.setSelectedSubMenu = function (a) {
  UTILS.removeSelectedNavClass("terminus-submenu-selected");
  a.classList.add("terminus-submenu-selected");
}; // on trigger of click event - change dom


ApiExplorer.prototype.changeApiDom = function (action, cont, body) {
  FrameHelper.removeChildren(body);
  var dom = this.getShowApiDom(action, body);
  cont.appendChild(dom);
}; // get document api calls - on click of DocumentAPI nav bar


ApiExplorer.prototype.getDocumentApi = function (cont) {
  var body = document.createElement('div'); // list view of Databse tools

  var ul = document.createElement('ul');
  ul.setAttribute('class', 'terminus-ul-horizontal'); // view document api

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-submenu-selected terminus-hz-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    self.setSelectedNavMenu(this);
    self.changeApiDom('viewDocument', cont, body);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-eye');
  a.appendChild(icon);
  var txt = document.createTextNode('View Document');
  a.appendChild(txt);
  ul.appendChild(a); // create document api

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-hz-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    self.setSelectedNavMenu(this);
    self.changeApiDom('createDocument', cont, body);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-plus');
  a.appendChild(icon);
  var txt = document.createTextNode('Create Document');
  a.appendChild(txt);
  ul.appendChild(a); // update document api

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-hz-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    self.setSelectedNavMenu(this);
    self.changeApiDom('updateDocument', cont, body);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-arrow-up');
  a.appendChild(icon);
  var txt = document.createTextNode('Update Document');
  a.appendChild(txt);
  ul.appendChild(a); // delete document api

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-hz-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    self.setSelectedNavMenu(this);
    self.changeApiDom('deleteDocument', cont, body);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-trash-alt');
  a.appendChild(icon);
  var txt = document.createTextNode('Delete Document');
  a.appendChild(txt);
  ul.appendChild(a);
  cont.appendChild(ul);
  var dom = self.getShowApiDom('viewDocument', body);
  cont.appendChild(dom);
  return cont;
}; // getDocumentApi
// get query api calls - on click of QueryAPI nav bar - submenus of Query Api defined here


ApiExplorer.prototype.getQueryApi = function (cont) {
  var body = document.createElement('div'); // list view of Databse tools

  var ul = document.createElement('ul');
  ul.setAttribute('class', 'terminus-ul-horizontal'); //woql select

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-submenu-selected terminus-a terminus-hz-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    self.setSelectedSubMenu(this);
    FrameHelper.removeChildren(body);
    var dom = self.getQueryApiDom('select', body);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-mouse-pointer');
  a.appendChild(icon);
  var txt = document.createTextNode('Select');
  a.appendChild(txt);
  ul.appendChild(a); //update select

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-hz-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    self.setSelectedSubMenu(this);
    FrameHelper.removeChildren(body);
    var dom = self.getQueryApiDom('update', body);
    cont.appendChild(dom);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-arrow-up');
  a.appendChild(icon);
  var txt = document.createTextNode('Update');
  a.appendChild(txt);
  ul.appendChild(a); //mapping

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-hz-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    self.setSelectedSubMenu(this);
    FrameHelper.removeChildren(body);
    var dom = self.getQueryApiDom('lookup', body);
    cont.appendChild(dom);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-random');
  a.appendChild(icon);
  var txt = document.createTextNode('Look up');
  a.appendChild(txt);
  ul.appendChild(a);
  cont.appendChild(ul);
  var dom = self.getQueryApiDom('select', body);
  cont.appendChild(dom);
  return cont;
}; //getQueryApi
// get schema api calls - on click of SchemaAPI nav bar - submenus of schema Api defined here


ApiExplorer.prototype.getSchemaApi = function (cont) {
  var body = document.createElement('div'); // list view of Databse tools

  var ul = document.createElement('ul');
  ul.setAttribute('class', 'terminus-ul-horizontal');
  var body = document.createElement('div'); // list view of Databse tools

  var ul = document.createElement('ul');
  ul.setAttribute('class', 'terminus-ul-horizontal'); //get schema

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-submenu-selected terminus-hz-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    self.setSelectedSubMenu(this);
    self.changeApiDom('getSchema', cont, body);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-eye');
  a.appendChild(icon);
  var txt = document.createTextNode('View Schema');
  a.appendChild(txt);
  ul.appendChild(a); //update schema

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-hz-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    self.setSelectedSubMenu(this);
    self.changeApiDom('updateSchema', cont, body);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-arrow-up');
  a.appendChild(icon);
  var txt = document.createTextNode('Update Schema');
  a.appendChild(txt);
  ul.appendChild(a); //get class frames

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-hz-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    self.setSelectedSubMenu(this);
    self.changeApiDom('getClassFrames', cont, body);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-share-alt');
  a.appendChild(icon);
  var txt = document.createTextNode('Get Class Frames');
  a.appendChild(txt);
  ul.appendChild(a);
  cont.appendChild(ul);
  var dom = self.getShowApiDom('getSchema', body);
  cont.appendChild(dom);
  return cont;
}; // getSchemaApi
// get connect to server api calls - on click of connectAPI nav bar


ApiExplorer.prototype.getConnectExplorer = function (body) {
  var self = this;
  var br = document.createElement('BR');
  body.appendChild(br); // get signature

  var b = this.getSignature('connect');
  body.appendChild(b); // get header Parameter

  body.appendChild(UTILS.getHeaderDom('Parameters'));
  var br = document.createElement('BR');
  body.appendChild(br); //form to get server url

  var form = this.getServerForm();
  body.appendChild(form);
  return body;
}; // getConnectExplorer
//get create & delete db form


ApiExplorer.prototype.getServerForm = function () {
  // form
  var form = document.createElement('form');
  form.setAttribute('class', 'terminus-form-horizontal row-fluid');
  var fd = document.createElement('div');
  fd.setAttribute('class', 'terminus-control-group');
  form.appendChild(fd);
  var inpLabel = document.createElement('label');
  inpLabel.setAttribute('class', 'terminus-control-label');
  inpLabel.setAttribute('for', 'basicinput');
  inpLabel.innerHTML = 'Url:';
  fd.appendChild(inpLabel);
  var cd = document.createElement('div');
  cd.setAttribute('class', 'terminus-controls');
  fd.appendChild(cd);
  var inpId = document.createElement('input');
  inpId.setAttribute('type', 'text');
  inpId.setAttribute('id', 'basicinput');
  inpId.setAttribute('class', 'span8 terminus-input-text');
  inpId.setAttribute('placeholder', 'URL : server_url');
  if (this.val) inpId.value = this.val;
  cd.appendChild(inpId);
  var icon = document.createElement('i');
  icon.setAttribute('class', 'fa fa-asterisk terminus-mandatory-icon');
  cd.appendChild(icon);
  var fd = document.createElement('div');
  fd.setAttribute('class', 'terminus-control-group');
  form.appendChild(fd);
  var keyLabel = document.createElement('label');
  keyLabel.setAttribute('class', 'terminus-control-label');
  keyLabel.setAttribute('for', 'basicinput');
  keyLabel.innerHTML = 'Key:';
  fd.appendChild(keyLabel);
  var cd = document.createElement('div');
  cd.setAttribute('class', 'terminus-controls');
  fd.appendChild(cd);
  var key = document.createElement('input');
  key.setAttribute('type', 'text');
  key.setAttribute('id', 'basicinput');
  key.setAttribute('class', 'span8 terminus-input-text');
  key.setAttribute('placeholder', 'Key : key');
  if (this.val) key.value = this.val;
  cd.appendChild(key);
  var button = document.createElement('button');
  button.setAttribute('class', 'terminus-btn terminus-send-api-btn');
  button.setAttribute('type', 'button');
  button.innerHTML = 'Send Api';

  var gatherips = function gatherips() {
    var input = {};
    input.url = inpId.value;
    input.key = key.value;
    return input;
  };

  var resd = document.createElement('div');
  form.appendChild(button);
  form.appendChild(resd);
  var self = this;
  button.addEventListener("click", function () {
    var buttonSelf = this;
    opts = {};
    var input = gatherips();
    self.client.connect(input.url, input.key).then(function (response) {
      FrameHelper.removeChildren(resd);
      var resultDom = UTILS.showHttpResult(response, 'connect', resd, self.ui);
    });
  }); // button click

  return form;
}; // getServerForm()
// get database api calls - on click of databaseAPI nav bar - submenus of database Api defined here


ApiExplorer.prototype.getDatabaseExplorer = function (cont) {
  var body = document.createElement('div'); // list view of Databse tools

  var ul = document.createElement('ul');
  ul.setAttribute('class', 'terminus-ul-horizontal'); //create db

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-submenu-selected terminus-hz-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    self.setSelectedSubMenu(this);
    FrameHelper.removeChildren(body);
    var dom = self.getDatabaseDom('create', body);
    cont.appendChild(dom);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-plus');
  a.appendChild(icon);
  var txt = document.createTextNode('Create database');
  a.appendChild(txt);
  ul.appendChild(a); //delete db

  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-hz-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var self = this;
  a.addEventListener("click", function () {
    self.setSelectedSubMenu(this);
    FrameHelper.removeChildren(body);
    var dom = self.getDatabaseDom('delete', body);
    cont.appendChild(dom);
  });
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa fa-trash-alt');
  a.appendChild(icon);
  var txt = document.createTextNode('Delete database');
  a.appendChild(txt);
  ul.appendChild(a);
  cont.appendChild(ul); // landing page

  var dom = self.getDatabaseDom('create', body);
  cont.appendChild(dom);
  return cont;
}; // getDatabaseExplorer
// get database dom


ApiExplorer.prototype.getDatabaseDom = function (mode, body) {
  var self = this;
  var br = document.createElement('BR');
  body.appendChild(br); // get signature

  var b = this.getSignature(mode);
  body.appendChild(b); // get header Parameter

  body.appendChild(UTILS.getHeaderDom('Parameters'));
  var br = document.createElement('BR');
  body.appendChild(br); //form to get database id

  if (mode == 'create') var form = this.getDBForm(mode);else var form = this.getDBForm(mode);
  body.appendChild(form);
  return body;
}; // getDatabaseDom()
//get create & delete db form


ApiExplorer.prototype.getDBForm = function (mode) {
  // form
  var form = document.createElement('form');
  form.setAttribute('class', 'terminus-form-horizontal row-fluid');
  var fd = document.createElement('div');
  fd.setAttribute('class', 'terminus-control-group');
  form.appendChild(fd);
  var inpLabel = document.createElement('label');
  inpLabel.setAttribute('class', 'terminus-control-label');
  inpLabel.setAttribute('for', 'basicinput');
  inpLabel.innerHTML = 'Url:';
  fd.appendChild(inpLabel);
  var cd = document.createElement('div');
  cd.setAttribute('class', 'terminus-controls');
  fd.appendChild(cd);
  var inpId = document.createElement('input');
  inpId.setAttribute('type', 'text');
  inpId.setAttribute('id', 'basicinput');
  inpId.setAttribute('class', 'span8 terminus-input-text');
  inpId.setAttribute('placeholder', 'URL : server/database_id');
  if (this.val) inpId.value = this.val;
  cd.appendChild(inpId);
  var icon = document.createElement('i');
  icon.setAttribute('class', 'fa fa-asterisk terminus-mandatory-icon');
  cd.appendChild(icon);

  if (mode == 'create') {
    var fd = document.createElement('div');
    fd.setAttribute('class', 'terminus-control-group');
    form.appendChild(fd);
    var inpLabel = document.createElement('label');
    inpLabel.setAttribute('class', 'terminus-control-label');
    inpLabel.setAttribute('for', 'basicinput');
    inpLabel.innerHTML = 'Document:';
    fd.appendChild(inpLabel);
    var cd = document.createElement('div');
    cd.setAttribute('class', 'terminus-controls');
    fd.appendChild(cd);
    var inpTxtAr = document.createElement('textarea');
    inpTxtAr.setAttribute('type', 'text');
    inpTxtAr.setAttribute('class', 'terminus-input-text');
    inpTxtAr.setAttribute('placeholder', 'Enter document to create database');
    cd.appendChild(inpTxtAr);
    UTILS.stylizeEditor(this.ui, inpTxtAr, 'document', 'javascript');
    var icon = document.createElement('i');
    icon.setAttribute('class', 'fa fa-asterisk terminus-mandatory-icon');
    cd.appendChild(icon);
  } // if(mode == 'create')


  var fd = document.createElement('div');
  fd.setAttribute('class', 'terminus-control-group');
  form.appendChild(fd);
  var keyLabel = document.createElement('label');
  keyLabel.setAttribute('class', 'terminus-control-label');
  keyLabel.setAttribute('for', 'basicinput');
  keyLabel.innerHTML = 'Key:';
  fd.appendChild(keyLabel);
  var cd = document.createElement('div');
  cd.setAttribute('class', 'terminus-controls');
  fd.appendChild(cd);
  var inpKey = document.createElement('input');
  inpKey.setAttribute('type', 'text');
  inpKey.setAttribute('id', 'basicinput');
  inpKey.setAttribute('class', 'sterminus-input-text');
  inpKey.setAttribute('placeholder', 'key');
  cd.appendChild(inpKey);
  var button = document.createElement('button');
  button.setAttribute('class', 'terminus-btn terminus-send-api-btn');
  button.setAttribute('type', 'button');
  button.innerHTML = 'Send Api';

  var gatherips = function gatherips() {
    var input = {};
    input.id = inpId.value;
    input.doc = inpTxtAr.value;
    input.key = inpKey.value;
    return input;
  };

  var self = this;

  if (mode == 'create') {
    button.addEventListener("click", function (form) {
      var input = gatherips();
      var buttonSelf = this;
      self.client.createDatabase(input.id, input.doc, input.key).then(function (response) {
        var currForm = buttonSelf.parentNode;
        var resultDom = UTILS.showHttpResult(response, 'create', currForm, self.ui);
      });
    }); // button click
  } // if(mode == 'create')
  else {
      button.addEventListener("click", function () {
        var buttonSelf = this;
        opts = {};
        self.client.deleteDatabase(inpId.value, opts).then(function (response) {
          var currForm = buttonSelf.parentNode;
          var resultDom = UTILS.showHttpResult(response, 'delete', currForm, self.ui);
        });
      }); // button click
    } // if(mode == 'delete')


  form.appendChild(button);
  return form;
}; // getDBForm()
// get query api dom


ApiExplorer.prototype.getQueryApiDom = function (action, body) {
  var br = document.createElement('BR');
  body.appendChild(br); // signature

  var b = this.getSignature(action);
  body.appendChild(b); // get header Parameter

  body.appendChild(UTILS.getHeaderDom('Parameters'));
  var br = document.createElement('BR');
  body.appendChild(br);
  var form = document.createElement('form');
  form.setAttribute('class', 'terminus-form-horizontal row-fluid');
  var fd = document.createElement('div');
  fd.setAttribute('class', 'terminus-control-group');
  form.appendChild(fd);
  var inpLabel = document.createElement('label');
  inpLabel.setAttribute('class', 'terminus-control-label');
  inpLabel.setAttribute('for', 'basicinput');
  inpLabel.innerHTML = 'Url:';
  fd.appendChild(inpLabel);
  var cd = document.createElement('div');
  cd.setAttribute('class', 'terminus-controls');
  fd.appendChild(cd);
  var inpId = document.createElement('input');
  inpId.setAttribute('type', 'text');
  inpId.setAttribute('id', 'basicinput');
  inpId.setAttribute('class', 'span8 terminus-input-text');
  inpId.setAttribute('placeholder', 'URL : server/database_id');
  if (this.value) inpId.value = this.val;
  cd.appendChild(inpId);
  var icon = document.createElement('i');
  icon.setAttribute('class', 'fa fa-asterisk terminus-mandatory-icon');
  cd.appendChild(icon);
  fd.appendChild(cd);
  var fd = document.createElement('div');
  fd.setAttribute('class', 'terminus-control-group');
  form.appendChild(fd);
  var inpLabel = document.createElement('label');
  inpLabel.setAttribute('class', 'terminus-control-label');
  inpLabel.setAttribute('for', 'basicinput');
  inpLabel.innerHTML = 'Query:';
  fd.appendChild(inpLabel);
  var cd = document.createElement('div');
  cd.setAttribute('class', 'terminus-controls');
  fd.appendChild(cd);
  var txtar = document.createElement('textarea');
  if (this.value) txtar.value = this.val;
  cd.appendChild(txtar);
  txtar.setAttribute('class', 'terminus-api-explorer-text-area');
  cd.appendChild(txtar);
  fd.appendChild(cd);
  UTILS.stylizeEditor(this.ui, txtar, 'query', 'javascript');
  var br = document.createElement('BR');
  fd.appendChild(br);
  var button = document.createElement('button');
  button.setAttribute('class', 'terminus-btn terminus-send-api-btn');
  button.setAttribute('type', 'button');
  button.innerHTML = 'Send Api';
  var self = this;
  button.addEventListener("click", function () {
    var buttonSelf = this;
    var opts = {};
    self.client.select(inpId.value, txtar.value, opts).then(function (response) {
      var currForm = buttonSelf.parentNode;
      var resultDom = UTILS.showHttpResult(response, 'select', currForm, self.ui);
    });
  }); // button click

  fd.appendChild(button);
  body.appendChild(form);
  return body;
}; // getQueryApiDom


ApiExplorer.prototype.getClassFramesForm = function () {
  // form
  var form = document.createElement('form');
  form.setAttribute('class', 'terminus-form-horizontal row-fluid');
  var fd = document.createElement('div');
  fd.setAttribute('class', 'terminus-control-group');
  form.appendChild(fd);
  var inpLabel = document.createElement('label');
  inpLabel.setAttribute('class', 'terminus-control-label');
  inpLabel.setAttribute('for', 'basicinput');
  inpLabel.innerHTML = 'Url:';
  fd.appendChild(inpLabel);
  var cd = document.createElement('div');
  cd.setAttribute('class', 'terminus-controls');
  fd.appendChild(cd);
  var inpUrl = document.createElement('input');
  inpUrl.setAttribute('type', 'text');
  inpUrl.setAttribute('id', 'basicinput');
  inpUrl.setAttribute('class', 'span8 terminus-input-text');
  inpUrl.setAttribute('placeholder', 'URL : database_url');
  if (this.val) inpUrl.value = this.val;
  cd.appendChild(inpUrl);
  var icon = document.createElement('i');
  icon.setAttribute('class', 'fa fa-asterisk terminus-mandatory-icon');
  cd.appendChild(icon);
  var fd = document.createElement('div');
  fd.setAttribute('class', 'terminus-control-group');
  form.appendChild(fd);
  var inpLabel = document.createElement('label');
  inpLabel.setAttribute('class', 'terminus-control-label');
  inpLabel.setAttribute('for', 'basicinput');
  inpLabel.innerHTML = 'Url/ ID:';
  fd.appendChild(inpLabel);
  var cd = document.createElement('div');
  cd.setAttribute('class', 'terminus-controls');
  fd.appendChild(cd);
  var inpDocUrl = document.createElement('input');
  inpDocUrl.setAttribute('type', 'text');
  inpDocUrl.setAttribute('id', 'basicinput');
  inpDocUrl.setAttribute('class', 'span8 terminus-input-text');
  inpDocUrl.setAttribute('placeholder', 'Url or ID of document class');
  cd.appendChild(inpDocUrl);
  var icon = document.createElement('i');
  icon.setAttribute('class', 'fa fa-asterisk terminus-mandatory-icon');
  cd.appendChild(icon);
  var fd = document.createElement('div');
  fd.setAttribute('class', 'terminus-control-group');
  form.appendChild(fd);
  var optLabel = document.createElement('label');
  optLabel.setAttribute('class', 'terminus-control-label');
  optLabel.setAttribute('for', 'basicinput');
  optLabel.innerHTML = 'Options:';
  fd.appendChild(optLabel);
  var cd = document.createElement('div');
  cd.setAttribute('class', 'terminus-controls');
  fd.appendChild(cd);
  var optInp = document.createElement('input');
  optInp.setAttribute('type', 'text');
  optInp.setAttribute('id', 'basicinput');
  optInp.setAttribute('class', 'span8 terminus-input-text');
  optInp.setAttribute('placeholder', 'options');
  cd.appendChild(optInp);
  var button = document.createElement('button');
  button.setAttribute('class', 'terminus-btn terminus-send-api-btn');
  button.setAttribute('type', 'button');
  button.innerHTML = 'Send Api';

  var gatherips = function gatherips() {
    var input = {};
    input.url = inpUrl.value;
    input.docUrl = inpDocUrl.value;
    input.options = optInp.value;
    return input;
  };

  var self = this;
  button.addEventListener("click", function (form) {
    var input = gatherips();
    var buttonSelf = this;
    opts = {};
    opts.explorer = true;
    self.client.getClassFrame(input.url, input.docUrl, opts).then(function (response) {
      var currForm = buttonSelf.parentNode;
      var resultDom = UTILS.showHttpResult(response, 'getClassFrames', currForm, self.ui);
    });
  }); // button click

  form.appendChild(button);
  return form;
}; // get schema & document dom


ApiExplorer.prototype.getShowApiDom = function (action, body) {
  var self = this;
  var br = document.createElement('BR');
  body.appendChild(br); // signature

  var b = this.getSignature(action);
  body.appendChild(b); // get header Parameter

  body.appendChild(UTILS.getHeaderDom('Parameters'));
  var br = document.createElement('BR');
  body.appendChild(br); // get input

  switch (action) {
    case 'getSchema':
      // form to input schema url
      var formDoc = document.createElement('form');
      formDoc.setAttribute('class', 'terminus-form-horizontal row-fluid');
      var fd = document.createElement('div');
      fd.setAttribute('class', 'terminus-control-group');
      formDoc.appendChild(fd);
      var inpLabel = document.createElement('label');
      inpLabel.setAttribute('class', 'terminus-control-label');
      inpLabel.setAttribute('for', 'basicinput');
      inpLabel.innerHTML = 'Url:';
      fd.appendChild(inpLabel);
      var cd = document.createElement('div');
      cd.setAttribute('class', 'terminus-controls');
      fd.appendChild(cd);
      var inpId = document.createElement('input');
      inpId.setAttribute('type', 'text');
      inpId.setAttribute('id', 'basicinput');
      inpId.setAttribute('class', 'span8 terminus-input-text');
      inpId.setAttribute('placeholder', 'URL : server/database_id');
      cd.appendChild(inpId);
      var icon = document.createElement('i');
      icon.setAttribute('class', 'fa fa-asterisk terminus-mandatory-icon');
      cd.appendChild(icon);
      body.appendChild(formDoc); //form to get schema

      var form = this.getApiForm(action, inpId);
      body.appendChild(form);
      break;

    case 'getClassFrames':
      var form = this.getClassFramesForm();
      body.appendChild(form);
      break;

    case 'updateSchema':
      // form to input schema url
      var formDoc = document.createElement('form');
      formDoc.setAttribute('class', 'terminus-form-horizontal row-fluid');
      var fd = document.createElement('div');
      fd.setAttribute('class', 'terminus-control-group');
      formDoc.appendChild(fd);
      var inpLabel = document.createElement('label');
      inpLabel.setAttribute('class', 'terminus-control-label');
      inpLabel.setAttribute('for', 'basicinput');
      inpLabel.innerHTML = 'Url:';
      fd.appendChild(inpLabel);
      var cd = document.createElement('div');
      cd.setAttribute('class', 'terminus-controls');
      fd.appendChild(cd);
      var inpId = document.createElement('input');
      inpId.setAttribute('type', 'text');
      inpId.setAttribute('id', 'basicinput');
      inpId.setAttribute('class', 'span8 terminus-input-text');
      inpId.setAttribute('placeholder', 'URL : server/database_id');
      cd.appendChild(inpId);
      var icon = document.createElement('i');
      icon.setAttribute('class', 'fa fa-asterisk terminus-mandatory-icon');
      cd.appendChild(icon);
      body.appendChild(formDoc);
      var br = document.createElement('BR');
      body.appendChild(br);
      var fd = document.createElement('div');
      fd.setAttribute('class', 'terminus-control-group');
      formDoc.appendChild(fd);
      var inpLabel = document.createElement('label');
      inpLabel.setAttribute('class', 'terminus-control-label');
      inpLabel.setAttribute('for', 'basicinput');
      inpLabel.innerHTML = 'Schema:';
      fd.appendChild(inpLabel);
      var cd = document.createElement('div');
      cd.setAttribute('class', 'terminus-controls');
      fd.appendChild(cd);
      var txtar = document.createElement('textarea');
      cd.appendChild(txtar);
      txtar.setAttribute('class', 'terminus-api-explorer-text-area');
      UTILS.stylizeEditor(this.ui, txtar, 'schema', 'turtle');
      var br = document.createElement('BR');
      body.appendChild(br); // gather the dom objects

      var gatherips = {};
      gatherips.schemaUrlDom = inpId;
      gatherips.schemaTextDom = txtar;
      gatherips.htmlEditor = txtar; //form to update schema

      var form = this.getApiForm(action, gatherips);
      body.appendChild(form);
      break;

    case 'viewDocument':
      // form
      var formDoc = document.createElement('form');
      formDoc.setAttribute('class', 'terminus-form-horizontal row-fluid');
      var fd = document.createElement('div');
      fd.setAttribute('class', 'terminus-control-group');
      formDoc.appendChild(fd);
      var inpLabel = document.createElement('label');
      inpLabel.setAttribute('class', 'terminus-control-label');
      inpLabel.setAttribute('for', 'basicinput');
      inpLabel.innerHTML = 'Url:';
      fd.appendChild(inpLabel);
      var cd = document.createElement('div');
      cd.setAttribute('class', 'terminus-controls');
      fd.appendChild(cd);
      var inpId = document.createElement('input');
      inpId.setAttribute('type', 'text');
      inpId.setAttribute('id', 'basicinput');
      inpId.setAttribute('class', 'span8 terminus-input-text');
      inpId.setAttribute('placeholder', 'URL : server/database_id/document/document_id');
      cd.appendChild(inpId);
      var icon = document.createElement('i');
      icon.setAttribute('class', 'fa fa-asterisk terminus-mandatory-icon');
      cd.appendChild(icon);
      body.appendChild(formDoc);
      var form = this.getApiForm(action, inpId);
      body.appendChild(form);
      break;
    //viewDocument

    case 'deleteDocument':
      // form
      var formDoc = document.createElement('form');
      formDoc.setAttribute('class', 'terminus-form-horizontal row-fluid');
      var fd = document.createElement('div');
      fd.setAttribute('class', 'terminus-control-group');
      formDoc.appendChild(fd);
      var inpLabel = document.createElement('label');
      inpLabel.setAttribute('class', 'terminus-control-label');
      inpLabel.setAttribute('for', 'basicinput');
      inpLabel.innerHTML = 'Url:';
      fd.appendChild(inpLabel);
      var cd = document.createElement('div');
      cd.setAttribute('class', 'terminus-controls');
      fd.appendChild(cd);
      var inpId = document.createElement('input');
      inpId.setAttribute('type', 'text');
      inpId.setAttribute('id', 'basicinput');
      inpId.setAttribute('class', 'span8 terminus-input-text');
      inpId.setAttribute('placeholder', 'URL : server/database_id/document/document_id');
      cd.appendChild(inpId);
      var icon = document.createElement('i');
      icon.setAttribute('class', 'fa fa-asterisk terminus-mandatory-icon');
      cd.appendChild(icon);
      body.appendChild(formDoc);
      var form = this.getApiForm(action, inpId);
      body.appendChild(form);
      break;

    case 'createDocument':
      // form to input schema url
      var formDoc = document.createElement('form');
      formDoc.setAttribute('class', 'terminus-form-horizontal row-fluid');
      var fd = document.createElement('div');
      fd.setAttribute('class', 'terminus-control-group');
      formDoc.appendChild(fd);
      var inpLabel = document.createElement('label');
      inpLabel.setAttribute('class', 'terminus-control-label');
      inpLabel.setAttribute('for', 'basicinput');
      inpLabel.innerHTML = 'Url:';
      fd.appendChild(inpLabel);
      var cd = document.createElement('div');
      cd.setAttribute('class', 'terminus-controls');
      fd.appendChild(cd);
      var inpId = document.createElement('input');
      inpId.setAttribute('type', 'text');
      inpId.setAttribute('id', 'basicinput');
      inpId.setAttribute('class', 'span8 terminus-input-text');
      inpId.setAttribute('placeholder', 'URL : server/database_id/document/document_id');
      cd.appendChild(inpId);
      var icon = document.createElement('i');
      icon.setAttribute('class', 'fa fa-asterisk terminus-mandatory-icon');
      cd.appendChild(icon);
      body.appendChild(formDoc);
      var br = document.createElement('BR');
      body.appendChild(br); // text area

      var formDoc = document.createElement('form');
      formDoc.setAttribute('class', 'terminus-form-horizontal row-fluid');
      var fd = document.createElement('div');
      fd.setAttribute('class', 'terminus-control-group');
      formDoc.appendChild(fd);
      var inpLabel = document.createElement('label');
      inpLabel.setAttribute('class', 'terminus-control-label');
      inpLabel.setAttribute('for', 'basicinput');
      inpLabel.innerHTML = 'Document:';
      fd.appendChild(inpLabel);
      var cd = document.createElement('div');
      cd.setAttribute('class', 'terminus-controls');
      fd.appendChild(cd);
      var txtar = document.createElement('textarea');
      cd.appendChild(txtar);
      txtar.setAttribute('class', 'terminus-api-explorer-text-area');
      UTILS.stylizeEditor(this.ui, txtar, 'document', 'javascript');
      /*var editor = codeMirrorFormat(txtar, 'javascript', true);
      // refresh load
      setTimeout(function() {
          editor.refresh();
      },1);
      // save changes of code mirror editor
      function updateTextArea() {
        editor.save();
      }
      editor.on('change', updateTextArea); */

      body.appendChild(formDoc);
      var br = document.createElement('BR');
      body.appendChild(br); // gather the dom objects

      var gatherips = {};
      gatherips.schemaUrlDom = inpId;
      gatherips.schemaTextDom = txtar;
      gatherips.htmlEditor = editor; //form to update schema

      var form = this.getApiForm(action, gatherips);
      body.appendChild(form);
      break;

    case 'updateDocument':
      // form to input schema url
      var formDoc = document.createElement('form');
      formDoc.setAttribute('class', 'terminus-form-horizontal row-fluid');
      var fd = document.createElement('div');
      fd.setAttribute('class', 'terminus-control-group');
      formDoc.appendChild(fd);
      var inpLabel = document.createElement('label');
      inpLabel.setAttribute('class', 'terminus-control-label');
      inpLabel.setAttribute('for', 'basicinput');
      inpLabel.innerHTML = 'Url:';
      fd.appendChild(inpLabel);
      var cd = document.createElement('div');
      cd.setAttribute('class', 'terminus-controls');
      fd.appendChild(cd);
      var inpId = document.createElement('input');
      inpId.setAttribute('type', 'text');
      inpId.setAttribute('id', 'basicinput');
      inpId.setAttribute('class', 'span8 terminus-input-text');
      inpId.setAttribute('placeholder', 'URL : server/database_id/document/document_id');
      cd.appendChild(inpId);
      var icon = document.createElement('i');
      icon.setAttribute('class', 'fa fa-asterisk terminus-mandatory-icon');
      cd.appendChild(icon);
      body.appendChild(formDoc);
      var br = document.createElement('BR');
      body.appendChild(br); // text area

      var formDoc = document.createElement('form');
      formDoc.setAttribute('class', 'terminus-form-horizontal row-fluid');
      var fd = document.createElement('div');
      fd.setAttribute('class', 'terminus-control-group');
      formDoc.appendChild(fd);
      var inpLabel = document.createElement('label');
      inpLabel.setAttribute('class', 'terminus-control-label');
      inpLabel.setAttribute('for', 'basicinput');
      inpLabel.innerHTML = 'Document:';
      fd.appendChild(inpLabel);
      var cd = document.createElement('div');
      cd.setAttribute('class', 'terminus-controls');
      fd.appendChild(cd);
      var txtar = document.createElement('textarea');
      cd.appendChild(txtar);
      txtar.setAttribute('class', 'terminus-api-explorer-text-area');
      UTILS.stylizeEditor(this.ui, txtar, 'document', 'turtle');
      body.appendChild(formDoc);
      var br = document.createElement('BR');
      body.appendChild(br); // gather the dom objects

      var gatherips = {};
      gatherips.schemaUrlDom = inpId;
      gatherips.schemaTextDom = txtar;
      gatherips.htmlEditor = editor; //form to update schema

      var form = this.getApiForm(action, gatherips);
      body.appendChild(form);
      break;
  } // switch(action)


  return body;
}; // getShowApiDom()
// define event listeners on send api of schema & documents


ApiExplorer.prototype.getApiForm = function (action, input) {
  // form
  var form = document.createElement('form');
  form.setAttribute('class', 'terminus-form-horizontal row-fluid');
  var button = document.createElement('button');
  button.setAttribute('class', 'terminus-btn terminus-send-api-btn');
  button.setAttribute('type', 'button');
  button.innerHTML = 'Send Api';
  form.appendChild(button);
  var resd = document.createElement('div');
  form.appendChild(resd);
  var self = this;

  switch (action) {
    case 'getSchema':
      button.addEventListener("click", function () {
        var schurl = input.value;
        var buttonSelf = this;
        var opts = {};
        opts.format = 'turtle';
        opts.responseType = 'text';
        self.client.getSchema(schurl, opts).then(function (response) {
          FrameHelper.removeChildren(resd);
          var resultDom = UTILS.showHttpResult(response, 'getSchema', resd, self.ui);
        });
      }); // button click

      break;

    case 'updateSchema':
      button.addEventListener("click", function () {
        var schurl = input.schemaUrlDom.value;
        var payload = input.htmlEditor.value;
        var buttonSelf = this;
        opts = {};
        opts.format = 'turtle';
        self.client.updateSchema(schurl, payload, opts).then(function (response) {
          var gtxtar = document.createElement('textarea');
          gtxtar.setAttribute('readonly', true);
          gtxtar.innerHTML = response;
          var currForm = buttonSelf.parentNode;
          currForm.appendChild(gtxtar);
          UTILS.stylizeEditor(this.ui, txtar, 'schema', 'turtle');
        });
      }); // button click

      break;

    case 'viewDocument':
      button.addEventListener("click", function () {
        var dcurl = input.value;
        var buttonSelf = this;
        var opts = {};
        opts.format = 'turtle';
        self.client.getDocument(dcurl, opts).then(function (response) {
          FrameHelper.removeChildren(resd);
          var resultDom = UTILS.showHttpResult(response, action, resd, self.ui);
        });
      }); // button click

      break;

    case 'deleteDocument':
      button.addEventListener("click", function () {
        var dcurl = input.value;
        var buttonSelf = this;
        var opts = {};
        self.client.deleteDocument(dcurl, opts).then(function (response) {
          FrameHelper.removeChildren(resd);
          var resultDom = UTILS.showHttpResult(response, action, resd, self.ui);
        });
      }); // button click

      break;

    case 'createDocument':
      button.addEventListener("click", function () {
        var dcurl = input.schemaUrlDom.value;
        var payload = input.htmlEditor.getValue();
        var buttonSelf = this;
        opts = {};
        self.client.createDocument(dcurl, payload, opts).then(function (response) {
          FrameHelper.removeChildren(resd);
          var resultDom = UTILS.showHttpResult(response, action, resd, self.ui);
        });
      }); // button click

      break;

    case 'updateDocument':
      button.addEventListener("click", function () {
        var dcurl = input.schemaUrlDom.value;
        var payload = input.htmlEditor.getValue();
        var buttonSelf = this;
        opts = {};
        opts.editmode = 'replace';
        opts.format = 'json';
        self.client.updateDocument(dcurl, payload, opts).then(function (response) {
          FrameHelper.removeChildren(resd);
          var resultDom = UTILS.showHttpResult(response, action, resd, self.ui);
        });
      }); // button click

      break;
  } // switch(action)


  var br = document.createElement('BR');
  form.appendChild(br);
  var br = document.createElement('BR');
  form.appendChild(br);
  return form;
}; // getApiForm()
// get signature of api calls


ApiExplorer.prototype.getSignature = function (action) {
  var api = document.createElement('div'); // get header signature

  var sg = document.createElement('button');
  sg.appendChild(document.createTextNode('Click to read Api Signature'));
  sg.setAttribute('class', 'terminus-collapsible');
  ic = document.createElement('i');
  ic.setAttribute('class', 'terminus-cheveron-float fa fa-chevron-down');
  sg.appendChild(ic);
  api.appendChild(sg);
  var br = document.createElement('BR');
  api.appendChild(br);
  var cl = document.createElement('div');
  cl.setAttribute('class', 'terminus-collapsible-content content');
  var sig = UTILS.getFunctionSignature(action);
  var txt = document.createTextNode(sig.spec);
  var pre = document.createElement('pre');
  pre.setAttribute('class', 'terminus-api-signature-pre');
  pre.appendChild(txt);
  var txt = document.createTextNode(sig.descr);
  pre.appendChild(txt);
  var br = document.createElement('BR');
  pre.appendChild(br);
  var br = document.createElement('BR');
  pre.appendChild(br);
  var txt = document.createTextNode(sig.result);
  pre.appendChild(txt);
  cl.appendChild(pre);
  api.appendChild(cl);
  var br = document.createElement('BR');
  api.appendChild(br);
  sg.addEventListener('click', function () {
    UTILS.tolggleContent(ic, cl);
  });
  return api;
}; // getSignature()
// displays signature only on click


function tolggleSignatureContent(content) {
  if (content.style.display === "block") content.style.display = "none";else content.style.display = "block";
}

module.exports = ApiExplorer;

/***/ }),

/***/ "./src/FrameHelper.js":
/*!****************************!*\
  !*** ./src/FrameHelper.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Helper functions for dealing with frames and linked data documents
 */
var FrameHelper = {
  standard_urls: {
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "owl": "http://www.w3.org/2002/07/owl#",
    "dcogbox": "https://datachemist.net/ontology/dcogbox#",
    "dcog": "https://datachemist.net/ontology/dcog#",
    "xdd": "https://datachemist.net/ontology/xdd#",
    "terminus": "https://datachemist.net/ontology/terminus#",
    "vio": "https://datachemist.net/ontology/vio#",
    "docu": "https://datachemist.net/ontology/documentation#"
  }
};

FrameHelper.addURLPrefix = function (prefix, url) {
  this.standard_urls[prefix] = url;
};

FrameHelper.removeChildren = function (node) {
  if (node) {
    while (node.hasChildNodes()) {
      node.removeChild(node.childNodes[0]);
    }
  }
};

FrameHelper.empty = function (obj) {
  // null and undefined are "empty"
  if (obj == null) return true; // Assume if it has a length property with a non-zero value
  // that that property is correct.

  if (obj.length > 0) return false;
  if (obj.length === 0) return true; // Otherwise, does it have any properties of its own?
  // Note that this doesn't handle
  // toString and valueOf enumeration bugs in IE < 9

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) return false;
  }

  return true;
};

FrameHelper.genBNID = function (dom) {
  var r = Math.random().toString(36).substring(7);
  var d = new Date();
  var bnid = "_:" + r + d.getTime();
  return bnid;
};

FrameHelper.getShorthand = function (link) {
  if (link && typeof link == "string") {
    for (var pref in this.standard_urls) {
      var full = this.standard_urls[pref];

      if (link.substring(0, full.length) == full) {
        var sh = pref + ":" + link.substring(full.length);
        return sh;
      }
    }
  }

  return false;
};

FrameHelper.compareIDs = function (ida, idb) {
  if (ida == idb) return true;
  if (this.unshorten(ida) == idb) return true;
  if (this.unshorten(ida) == this.unshorten(idb)) return true;
  var sha = this.getShorthand(ida);
  var shb = this.getShorthand(idb);
  if (sha && (sha == idb || sha == shb)) return true;
  if (shb && shb == ida) return true;
  return false;
};

FrameHelper.unshorten = function (url) {
  if (this.validURL(url)) return url;
  if (!url) return url;
  var bits = url.split(":");

  if (bits[1]) {
    if (this.standard_urls[bits[0]]) {
      return this.standard_urls[bits[0]] + bits[1];
    }
  }

  return url;
};

FrameHelper.validURL = function (str) {
  var pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
  'localhost|((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
  '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
  '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
  '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
  '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator

  return !!pattern.test(str);
};

FrameHelper.labelFromURL = function (url) {
  var nurl = this.urlFragment(url);
  nurl = nurl ? nurl : url.substring(url.lastIndexOf("/") + 1);
  return nurl.charAt(0).toUpperCase() + nurl.slice(1);
};

FrameHelper.urlFragment = function (url) {
  url = typeof url != "string" ? window.location.href : url;
  bits = url.split('#');

  if (bits.length <= 1) {
    bits = url.split(":");
  }

  if (bits.length >= 1) {
    url = bits[1];
    url = url.split("?")[0];
  }

  return url;
};

FrameHelper.isStringType = function (stype) {
  if (stype == "http://www.w3.org/2001/XMLSchema#string") return true;
  if (stype == "xsd:string") return true;
  return false;
};

FrameHelper.lastURLBit = function (url) {
  url = typeof url == "undefined" ? window.location.href : url;
  url = url.split('#')[0];
  url = url.split("?")[0];
  url = url.substring(url.lastIndexOf("/") + 1);
  return url;
};

FrameHelper.getStdURL = function (pref, ext, url) {
  if (this.standard_urls[pref]) {
    if (url) {
      if (url == this.standard_urls[pref] + ext) return url;
    } else {
      return this.standard_urls[pref] + ext;
    }
  }

  return false;
};

FrameHelper.viewIncludesProperties = function (view, type) {
  if (view == "full" || view == "production" || view == "terse") {
    return true;
  }

  return false;
};

FrameHelper.viewIncludesChildren = function (view, type) {
  return this.viewIncludesProperties(view, type);
};

FrameHelper.viewIncludesValue = function (view, type) {
  return this.viewIncludesProperties(view, type);
};

FrameHelper.numberWithCommas = function (value) {
  if (value >= 1000 || value <= -1000) {
    var parts = value.toString().split(".");
    if (value <= -1000) parts[0] = parts[0].substring(1);
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    if (value <= -1000) value = "-" + parts.join(".");else value = parts.join(".");
  }

  return value;
};

FrameHelper.datatypes = ["xdd:coordinate", "xdd:coordinatePolyline", "xdd:coordinatePolygon", "xdd:dateRange", "xdd:gYearRange", "xdd:integerRange", "xdd:decimalRange", "xdd:cc", "xdd:email", "xdd:html", "xdd:url", "xsd:anySimpleType", "xsd:string", "xsd:boolean", "xsd:decimal", "xsd:double", "xsd:float", "xsd:time", "xsd:date", "xsd:dateTime", "xsd:dateTimeStamp", "xsd:gYear", "xsd:gMonth", "xsd:gDay", "xsd:gYearMonth", "xsd:gMonthDay", "xsd:duration", "xsd:yearMonthDuration", "xsd:dayTimeDuration", "xsd:byte", "xsd:short", "xsd:integer", "xsd:long", "xsd:unsignedByte", "xsd:unsignedInt", "xsd:unsignedLong", "xsd:nonNegativeInteger", "xsd:positiveInteger", "xsd:negativeInteger", "xsd:nonPositiveInteger", "xsd:base64Binary", "xsd:anyURI", "xsd:language", "xsd:normalizedString", "xsd:token", "xsd:NMTOKEN", "xsd:Name", "xsd:NCName", "xsd:NOTATION", "xsd:QName", "xsd:ID", "xsd:IDREF", "xsd:ENTITY", "rdf:XMLLiteral", "rdf:PlainLiteral", "rdfs:Literal", "xdd:json"];

FrameHelper.parseDate = function (ty, value) {
  if (ty == "xsd:date") {
    var parsed = this.parseXsdDate(value);
  } else if (ty == "xsd:dateTime") {
    var parsed = this.parseXsdDateTime(value);
  } else if (ty == "xsd:gYear") {
    var parsed = {
      year: value
    };
  } else if (ty == "xsd:gYearRange") {
    var parsed = {
      year: value
    };
  } else if (ty == "xsd:gMonth") {
    var parsed = {
      month: value
    };
  } else if (ty == "xsd:gDay") {
    var parsed = {
      day: value
    };
  } else if (ty == "xsd:gYearMonth") {
    var bits = value.split("-");

    while (bits.length < 2) {
      bits.push("");
    }

    var parsed = {
      year: bits[0],
      month: bits[1]
    };
  } else if (ty == "xsd:gMonthDay") {
    var bits = value.split("-");

    while (bits.length < 2) {
      bits.push("");
    }

    var parsed = {
      month: bits[0],
      day: bits[1]
    };
  } else if (ty == "xsd:dateTimeStamp") {
    var bits = value.split("-");

    while (bits.length < 2) {
      bits.push("");
    }

    var parsed = {
      month: bits[0],
      day: bits[1]
    };
  }

  return parsed;
};

FrameHelper.parseXsdDate = function (val) {
  var tz = this.extractXsdTimezone(val);

  if (tz) {
    val = val.substring(0, val.length - tz.length);
  }

  if (val.substring(0, 1) == '-') {
    var year = val.substring(0, 5);
  } else {
    var year = val.substring(0, 4);
  }

  if (year && Math.abs(year) < 10000) {
    var month = val.substring(year.length + 1, year.length + 3);
    if (month) month = month.toNumber();else return false;
    var day = val.substring(year.length + 4);
    if (day) day = day.toNumber();else return false;
    var parsed = {
      year: year,
      month: month,
      day: day,
      timezone: tz
    };
  }

  return parsed;
};

FrameHelper.addXsdPadding = function (parsed) {
  var nparsed = {};

  if (typeof parsed.year != "undefined" && parsed.year !== false && parsed.year < 1000) {
    if (Math.abs(parsed.year) < 10) nparsed.year = parsed.year < 0 ? "-000" + Math.abs(parsed.year) : "000" + parsed.year;else if (Math.abs(parsed.year) < 100) nparsed.year = parsed.year < 0 ? "-00" + Math.abs(parsed.year) : "00" + parsed.year;else nparsed.year = parsed.year < 0 ? "-0" + Math.abs(parsed.year) : "0" + parsed.year;
  } else if (parsed.year) {
    nparsed.year = parsed.year;
  }

  if (typeof parsed.month != "undefined" && parsed.month !== false && parsed.month < 10) {
    nparsed.month = "0" + parsed.month;
  } else if (parsed.month) {
    nparsed.month = parsed.month;
  }

  if (typeof parsed.day != "undefined" && parsed.day !== false && parsed.day < 10) {
    nparsed.day = "0" + parsed.day;
  } else if (parsed.day) {
    nparsed.day = parsed.day;
  }

  if (typeof parsed.hour != "undefined" && parsed.hour !== false && parsed.hour < 10) {
    nparsed.hour = "0" + parsed.hour;
  } else if (parsed.hour) {
    nparsed.hour = parsed.hour;
  }

  if (typeof parsed.minute != "undefined" && parsed.minute !== false && parsed.minute < 10) {
    nparsed.minute = "0" + parsed.minute;
  } else if (parsed.minute) {
    nparsed.minute = parsed.minute;
  }

  if (typeof parsed.second != "undefined" && parsed.second !== false && parsed.second < 10) {
    nparsed.second = "0" + parsed.second;
  } else if (parsed.second) {
    nparsed.second = parsed.second;
  }

  return nparsed;
};

FrameHelper.xsdFromParsed = function (parsed, ty) {
  var xparsed = this.addXsdPadding(parsed);

  if (ty == "xsd:gYear") {
    var ret = xparsed.year ? xparsed.year : false;
  } else if (ty == "xsd:date") {
    return xparsed.year && xparsed.month && xparsed.day ? xparsed.year + "-" + xparsed.month + "-" + xparsed.day : false;
  } else if (ty == "xsd:dateTime" || ty == "xsd:dateTimeStamp") {
    var ret = xparsed.year && xparsed.month && xparsed.day ? xparsed.year + "-" + xparsed.month + "-" + xparsed.day + "T" : false;
    if (ret) ret += (xparsed.hour ? xparsed.hour : "12") + ":" + (xparsed.minute ? xparsed.minute : "00") + ":" + (xparsed.second ? xparsed.second : "00");
  } else if (ty == "xsd:gMonth") {
    var ret = xparsed.month ? "--" + xparsed.month : false;
  } else if (ty == "xsd:gDay") {
    var ret = xparsed.day ? "---" + xparsed.day : false;
  } else if (ty == "xsd:gYearMonth") {
    var ret = xparsed.year && xparsed.month ? xparsed.year + "-" + xparsed.month : false;
  } else if (ty == "xsd:gMonthDay") {
    var ret = xparsed.day && xparsed.month ? "--" + xparsed.month + "-" + xparsed.day : false;
  }

  if (xparsed.timezone) {
    ret += xparsed.timezone;
  }

  return ret;
};

FrameHelper.parseXsdTime = function (val) {
  if (!val) return {};
  var tz = this.extractXsdTimezone(val);

  if (tz) {
    val = val.substring(0, val.length - tz.length);
  }

  var parsed = {
    hour: val.substring(0, 2),
    minute: val.substring(3, 5),
    second: val.substring(6),
    timezone: tz
  };
  return parsed;
};

FrameHelper.convertTimestampToXsd = function (val) {
  var a = new Date(val * 1000);
  var parsed = {
    year: a.getFullYear(),
    month: a.getMonth() + 1,
    day: a.getDate(),
    hour: a.getHours(),
    minute: a.getMinutes(),
    second: a.getSeconds()
  };
  return parsed;
};

FrameHelper.parseXsdDateTime = function (val) {
  if (!val) return {};

  if (typeof val == "number") {
    return this.convertTimestampToXsd(val);
  }

  var tz = this.extractXsdTimezone(val);

  if (tz) {
    val = val.substring(0, val.length - tz.length);
  }

  var datetime = this.parseXsdDate(val);
  var ptime = this.paseXsdTime(val.substring(val.indexOf("T")));

  for (var i in ptime) {
    datetime[i] = ptime[i];
  }

  datetime.timezone = tz;
  return datetime;
};

FrameHelper.extractXsdTimezone = function (val) {
  if (val && val.charAt(val.length - 1) == "Z") {
    return "Z";
  }

  if (val && val.charAt(val.length - 6) == "+" || val.charAt(val.length - 6) == "-") {
    val.substring(val.length - 6);
  }

  return false;
};

FrameHelper.parseRangeValue = function (val, dividor) {
  dividor = dividor ? dividor : ",";
  var vals = [];

  if (_typeof(val) == "object" && val.length) {
    vals = val;
  } else if (val) {
    if (typeof val != "string") {
      val = "" + val;
    }

    if (val.length && val.charAt(0) == "[" && val.charAt(val.length - 1) == "]") {
      vals.push(val.substring(1, val.indexOf(dividor)));
      vals.push(val.substring(val.indexOf(dividor) + 1, val.length - 1));
    } else {
      vals.push(val);
    }
  }

  return vals;
};

FrameHelper.loadDynamicScript = function (scriptid, src, callback) {
  var existingScript = document.getElementById(scriptid);

  if (!existingScript) {
    var script = document.createElement('script');
    script.src = src; // URL for the third-party library being loaded.

    document.body.appendChild(script);

    script.onload = function () {
      script.id = scriptid; //do it here so it doesn't trigger the callback below on multiple calls

      if (callback) callback(scriptid);
    };
  }

  if (existingScript && callback) {
    callback(scriptid);
  }
};

FrameHelper.loadDynamicCSS = function (cssid, src, callback) {
  var existingScript = document.getElementById(cssid);

  if (!existingScript) {
    var link = document.createElement('link');
    link.href = src; // URL for the third-party library being loaded.

    link.id = cssid; // e.g., googleMaps or stripe

    link.rel = "stylesheet";
    document.body.appendChild(link);

    link.onload = function () {
      if (callback) callback(cssid);
    };
  }

  if (existingScript && callback) callback(cssid);
};

module.exports = FrameHelper;

/***/ }),

/***/ "./src/ObjectFrame.js":
/*!****************************!*\
  !*** ./src/ObjectFrame.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Represents a frame for visualising a specific object frame, anywhere within a document 
 * Recursive data structure where this.children contains an indexed array of object frames
 * and this.dataframes contains a property indexed array of data frames
 * Every object frame carries a reference to its classframe
 * This gives us instructions as to how to create new frames according to the schema
 * After that it's turtles all the way down. 
 * @param cls - ID of the class (URL)
 * @param classframe - an array of frames representing a class
 * @param archetypes list of class frames
 * @param parent parent object
 * @returns
 */
var FrameHelper = __webpack_require__(/*! ./FrameHelper */ "./src/FrameHelper.js");

function ObjectFrame(cls, dataframes, classframes, parent, parentframe) {
  //the class of the frame - mandatory 
  this.empty();
  this.cls = cls; //array of frames representing the full class frame (optional - required to be able to safely add missing properties)

  if (classframes && _typeof(classframes) == "object") {
    this.loadClassFrames(classframes);
  }

  if (dataframes && _typeof(dataframes) == "object") {
    this.originalFrames = dataframes;
    this.loadDataFrames(dataframes);
  } else {
    this.originalFrames = false;
  } //parent object frame


  this.parent = parent; //original frame used by parent to create me

  this.parentframe = parentframe; //set to true if this is a newly created document

  this.newDoc = false;
}

ObjectFrame.prototype.getAsFrame = function (prop, parent) {
  if (this.parentframe) return this.parentframe;
  var ff = {
    type: "objectProperty",
    property: prop
  };
  ff.range = this.cls;
  ff.domain = parent.cls;
  ff.domainValue = parent.subjid;
  ff.frame = [];

  for (var prop in this.dataframes) {
    for (var i = 0; i < this.dataframes[prop].length; i++) {
      ff.frame.push(this.dataframes[prop][i].getAsFrame());
    }
  }

  for (var prop in this.children) {
    for (var i = 0; i < this.children[prop].length; i++) {
      ff.frame.push(this.children[prop][i].getAsFrame(prop, this));
    }
  }

  return ff;
};

ObjectFrame.prototype.isnew = function () {
  return this.newDoc;
};
/**
 * Cleans out object and sets everything empty
 */


ObjectFrame.prototype.empty = function () {
  //all indexed by property
  this.classframes = {};
  this.dataframes = {};
  this.restrictions = {};
  this.children = {};
  this.subjid = false;
  this.cls = false;
};
/*
 * Resets object state to original state
 */


ObjectFrame.prototype.reset = function (prop) {
  if (prop) {
    var props = [];

    for (var i = 0; i < this.originalFrames.length; i++) {
      if (this.originalFrames[i].property == prop) {
        props.push(this.originalFrames[i]);
      }
    }

    if (this.children[prop]) this.children[prop] = [];
    if (this.dataframes[prop]) this.dataframes[prop] = [];
    this.loadDataFrames(props);
  } else {
    this.dataframes = {};
    this.restrictions = {};
    this.children = {};
    this.loadDataFrames(this.originalFrames);
  }
};
/*
 * Clears out any specific information from a tree
 */


ObjectFrame.prototype.clear = function () {
  this.clearData();
  var newkids = {};

  for (var prop in this.children) {
    //change all the object ids in the 
    for (var i = 0; i < this.children[prop].length; i++) {
      if (typeof newkids[prop] == "undefined") newkids[prop] = [];
      this.children[prop][i].subjid = FrameHelper.genBNID();
      this.children[prop][i].clear();
    }
  }

  return this;
};
/**
 * Empties out all of the object's dataframes
 */


ObjectFrame.prototype.clearData = function () {
  for (var prop in this.dataframes) {
    for (var i = 0; i < this.dataframes[prop].length; i++) {
      this.dataframes[prop][i].clear();
    }
  }

  return this;
};
/**
 * Loads class frames for the object's class - the instructions about how to put an object together
 */


ObjectFrame.prototype.loadClassFrames = function (classframes) {
  for (var j = 0; j < classframes.length; j++) {
    if (classframes[j]["@context"]) this.jsonld_context = classframes[j]["@context"];
    var cf = new ClassFrame(classframes[j]);

    if (cf.isValid()) {
      if (typeof this.classframes[classframes[j].property] == "undefined") {
        this.classframes[classframes[j].property] = [];
      }

      this.classframes[classframes[j].property] = cf;

      if (cf.isObject() && this.children[classframes[j].property]) {
        for (var i = 0; i < this.children[classframes[j].property].length; i++) {
          this.children[classframes[j].property][i].loadClassFrames(classframes[j].frame);
        }
      }
    }
  }

  return this;
};
/**
 * Does this object have a schema loaded?
 */


ObjectFrame.prototype.hasSchema = function () {
  return !FrameHelper.empty(this.classframes);
};
/*
 * Loads an array of data frames into the object's internal index
 * {property: [frames]}
 */


ObjectFrame.prototype.loadDataFrames = function (frames) {
  if (_typeof(frames) != 'object' || !frames.length) return;
  if (!this.originalFrames) this.originalFrames = frames;
  if (!this.subjid && frames[0].domainValue) this.subjid = frames[0].domainValue;

  for (var i = 0; i < frames.length; i++) {
    if (frames[i]["@context"]) this.jsonld_context = frames[i]["@context"];
    var cframe = this.getPropertyClassFrame(frames[i].property, frames[i]);

    if (cframe.isClassChoice()) {
      cframe = cframe.getChosenClassFrame(frames[i].range);

      if (!cframe) {
        alert("no choice frame " + frames[i].range);
      }
    } else if (cframe.isLogic()) {
      cframe = cframe.getChosenFrame(frames[i]);
    }

    if (cframe && cframe.isData()) {
      var df = new DataFrame(frames[i], this);

      if (typeof this.dataframes[frames[i].property] == "undefined") {
        this.dataframes[frames[i].property] = [];
      }

      this.dataframes[frames[i].property].push(df);
    } else if (cframe && cframe.isObject()) {
      var kid = new ObjectFrame(cframe.range, cframe.frame, frames[i].frame, this, frames[i]);

      if (typeof this.children[frames[i].property] == "undefined") {
        this.children[frames[i].property] = [];
      }

      this.children[frames[i].property].push(kid);
    }
  }

  return this;
};

ObjectFrame.prototype.matchesPattern = function (matching, pattern) {
  if (matching.action != pattern.action) return false;

  if (pattern.type == "value" && typeof matching.value != "undefined") {//if(pattern.pattern)
  }

  if (pattern.type == "property" && typeof matching.value == "undefined" && typeof matching.property != "undefined") {}

  if (pattern.type == "object" && (typeof matching.value != "undefined" || typeof matching.property != "undefined")) {}

  return false;
};

ObjectFrame.prototype.compare = function (pat) {
  //if(pat.range && pat.range != this.range) return false;
  if (pat.domain && pat.domain != this.cls) return false;
};
/**
 * If a class frame is present, it is returned for the given property
 * If no class frame is present and an instance frame is passed in the 
 * this enables make it up as you go along editing
 * second argument a class frame will be created from the instance frame. 
 */


ObjectFrame.prototype.getPropertyClassFrame = function (prop, instance) {
  if (this.classframes && _typeof(this.classframes) == "object" && _typeof(this.classframes[prop]) == "object") {
    return this.classframes[prop];
  }

  if (instance) {
    var cf = new ClassFrame(instance);
    return cf;
  }

  if (this.dataframes && this.dataframes[prop]) {
    return this.dataframes[prop][0];
  }

  if (this.children && this.children[prop]) {
    var basis = this.children[prop][0].parentframe;

    if (basis) {
      var cf = new ClassFrame(basis);
      return cf;
    }
  }

  return false;
};
/**
 * Missing properties are those that are present in the classframe, 
 * but not instantiated in the current object frame
 * for this to work we need to load the frame with the associated classframe
 */


ObjectFrame.prototype.getMissingPropertyList = function () {
  var missing = [];

  if (this.classframes && _typeof(this.classframes) == "object") {
    for (var prop in this.classframes) {
      if (!(this.dataframes[prop] || this.children[prop])) {
        var cframe = this.getPropertyClassFrame(prop);
        var newb = {
          label: cframe.getLabel(),
          value: prop
        };
        missing.push(newb);
      }
    }
  }

  return missing;
};
/**
 * List of properties that are filled in the object
 */


ObjectFrame.prototype.getFilledPropertyList = function () {
  var filled = [];

  for (var prop in this.dataframes) {
    var cframe = this.getPropertyClassFrame(prop);
    var newb = {
      label: cframe.getLabel(),
      value: prop
    };
    filled.push(newb);
  }

  for (var prop in this.children) {
    var cframe = this.getPropertyClassFrame(prop);
    var newb = {
      label: cframe.getLabel(),
      value: prop
    };
    filled.push(newb);
  }

  return filled;
};

ObjectFrame.prototype.fillFromSchema = function (newid) {
  if (newid) this.subjid = newid;
  var dataframes = {};
  var children = {};

  for (var prop in this.classframes) {
    var pf = this.getPropertyClassFrame(prop);

    if (pf && pf.isData()) {
      if (pf.hasRestriction() && pf.restriction.min) {
        dataframes[prop] = [];

        for (var i = 0; i < pf.restriction.min; i++) {
          dataframes[prop].push(pf.createEmpty(newid));
        }
      } else {
        dataframes[prop] = [pf.createEmpty(newid)];
      }
    } else if (pf && pf.isObject() && !pf.isClassChoice()) {
      if (pf.hasRestriction() && pf.restriction.min) {
        children[prop] = [];

        for (var i = 0; i < pf.restriction.min; i++) {
          var empty = pf.createEmpty(FrameHelper.genBNID());
          children[prop].push(empty);
        }
      } else {
        var empty = pf.createEmpty(FrameHelper.genBNID());
        children[prop] = [empty];
      }
    } else if (pf.isClassChoice()) {
      var clss = pf.getClassChoices();

      if (clss && clss.length) {
        var empty = pf.createEmptyChoice(clss[0], FrameHelper.genBNID());
        children[prop] = [empty];
      }
    }
  }

  this.dataframes = dataframes;
  this.children = children;
  this.originalFrames = [];

  for (var prop in this.dataframes) {
    for (var i = 0; i < this.dataframes[prop].length; i++) {
      this.originalFrames.push(this.dataframes[prop][i].getAsFrame());
    }
  }

  for (var prop in this.children) {
    for (var i = 0; i < this.children[prop].length; i++) {
      this.originalFrames.push(this.children[prop][i].getAsFrame(prop, this));
    }
  }

  return this;
};

ObjectFrame.prototype.clone = function (newid) {
  var dataframes = {};
  var children = {};
  var cloned = new ObjectFrame(this.cls, false, false, this.parent);
  cloned.classframes = this.classframes;
  cloned.subjid = newid;

  if (this.dataframes && _typeof(this.dataframes) == "object") {
    for (var prop in this.dataframes) {
      var pf = this.getPropertyClassFrame(prop);

      if (pf.isData()) {
        dataframes[prop] = [];

        for (var i = 0; i < this.dataframes[prop].length; i++) {
          var clonedval = pf.clone(newid, this.dataframes[prop][i]);
          dataframes[prop].push(clonedval);
        }
      }
    }
  }

  if (this.children && _typeof(this.children) == "object") {
    for (prop in this.children) {
      var pf = this.getPropertyClassFrame(prop);

      for (var i = 0; i < this.children[prop].length; i++) {
        var kid = this.children[prop][i];
        if (typeof children[prop] == "undefined") children[prop] = [];
        var kidclone = kid.clone(FrameHelper.genBNID());
        children[prop].push(kidclone);
      }
    }
  }

  cloned.dataframes = dataframes;
  cloned.children = children;
  return cloned;
};
/**
 * Returns an array of the child object frames for a given property
 * or false if there is no such property
 */


ObjectFrame.prototype.getChildren = function (prop) {
  if (prop && typeof this.children[prop] != "undefined") {
    return this.children[prop];
  }

  return false;
};
/**
 * Returns a child frame with a particular id 
 * If the second parameter is included, it will only look in that specific property
 * Otherwise searches all properties for the child 
 */


ObjectFrame.prototype.getChild = function (childid, prop) {
  if (prop && typeof this.children[prop] != "undefined") {
    var kids = this.children[prop];

    for (var i = 0; i < kids.length; i++) {
      if (kids[i].subjid == childid) return kids[i];
    }
  }

  if (!prop) {
    for (var prop in this.children) {
      for (var i = 0; i < this.children[prop].length; i++) {
        if (this.children[prop][i].subjid == childid) return this.children[prop][i];
      }
    }
  }

  return false;
};

ObjectFrame.prototype.getDataFrames = function (prop) {
  if (prop && typeof this.dataframes[prop] != "undefined") {
    return this.dataframes[prop];
  }

  return false;
};

ObjectFrame.prototype.removeProperty = function (prop) {
  if (typeof this.dataframes[prop] != "undefined") {
    delete this.dataframes[prop];
  } else if (typeof this.children[prop] != "undefined") {
    delete this.children[prop];
  }
};

ObjectFrame.prototype.addProperty = function (prop, cls) {
  var cframe = this.getPropertyClassFrame(prop);

  if (cframe.isData()) {
    var df = cframe.copy();
    df.set("");

    if (typeof this.dataframes[prop] == "undefined") {
      this.dataframes[prop] = [];
    }

    this.dataframes[prop].push(df);
    return df;
  } else if (cframe.isObject()) {
    if (typeof this.children[prop] == "undefined") {
      this.children[prop] = [];
    }

    if (!cframe.isClassChoice()) {
      var empty = cframe.createEmpty(FrameHelper.genBNID());
      this.children[prop].push(empty);
      return empty;
    } else if (cls) {
      var empty = cframe.createEmptyChoice(cls, FrameHelper.genBNID());
      this.children[prop].push(empty);
      return empty;
    } else {
      var clss = cframe.getClassChoices();

      if (clss && clss.length) {
        var empty = cframe.createEmptyChoice(clss[0], FrameHelper.genBNID());
        this.children[prop].push(empty);
        return empty;
      }
    }
  }

  return false;
};

ObjectFrame.prototype.addPropertyValue = function (prop, value) {
  var cframe = this.getPropertyClassFrame(prop);
  var df = cframe.createEmpty();
  df.set(value);
  this.dataframes[prop].push(df);
  return df;
};

ObjectFrame.prototype.removePropertyValue = function (prop, value, index) {
  if (typeof this.dataframes[prop] != "undefined") {
    var nfvals = [];

    for (var i = 0; i < this.dataframes[prop].length; i++) {
      if (typeof index != "undefined" && index != i) {
        this.dataframes[prop][i].index = nfvals.length;
        nfvals.push(this.dataframes[prop][i]);
      } else if (typeof index == "undefined" && this.dataframes[prop][i].contents != value) {
        this.dataframes[prop][i].index = nfvals.length;
        nfvals.push(this.dataframes[prop][i]);
      }
    }

    if (nfvals.length) {
      this.dataframes[prop] = nfvals;
    } else {
      delete this.dataframes[prop];
    }
  } else if (typeof this.children[prop] != "undefined") {
    var kids = this.children[prop];
    var nkids = [];

    for (var i = 0; i < kids.length; i++) {
      if (kids[i].subjid != value) {
        nkids.push(kids[i]);
      }

      if (nkids.length) {
        this.children[prop] = nkids;
      } else {
        delete this.children[prop];
      }
    }
  } else {
    alert("No prop " + prop);
  }
};

ObjectFrame.prototype.error = function (msg, more) {
  alert(msg);
};

ObjectFrame.prototype.isObject = function () {
  return true;
};

ObjectFrame.prototype.isData = function () {
  return false;
};

function DataFrame(frame, parent) {
  this.err = false;
  this.parent = parent; //the id of the object that owns this dataframe

  this.subjid = parent ? parent.subjid : false;

  if (frame) {
    this.load(frame);
  }
}

DataFrame.prototype.isValidType = function (dt) {
  var vtypes = ["datatypeProperty", "objectProperty", "restriction "];
  if (vtypes.indexOf(dt) == -1) return false;
  return true;
};

DataFrame.prototype.load = function (frame) {
  if (_typeof(frame) != "object") {
    this.error("No frame passed to load");
    return;
  } //all the meta-data carried in frames: 


  this.type = frame.type;
  this.property = frame.property;
  this.range = frame.range;
  this.rangeValue = frame.rangeValue;
  this.domain = frame.domain;
  this.domainValue = frame.domainValue;
  this.frame = frame.frame;
  this.label = frame.label;
  this.comment = frame.comment;
  var restriction = frame.restriction;

  if (restriction && _typeof(restriction) == "object") {
    this.restriction = new Restriction(restriction);
  } else this.restriction = false;
};

DataFrame.prototype.getAsFrame = function () {
  var ff = {
    type: this.type,
    property: this.property
  };
  if (this.range) ff.range = this.range;
  if (this.rangeValue) ff.rangeValue = this.rangeValue;
  if (this.domain) ff.domain = this.domain;
  if (this.domainValue) ff.domainValue = this.domainValue;
  if (this.frame) ff.frame = this.frame;
  if (this.label) ff.label = this.label;
  if (this.comment) ff.comment = this.comment;
  return ff;
};

DataFrame.prototype.hasRestriction = function () {
  if (this.restriction) {
    return this.restriction.hasCardRestriction();
  }

  return false;
};

DataFrame.prototype.copy = function (newid) {
  var copy = new DataFrame(this, this.parent);
  if (newid) copy.domainValue = newid;
  return copy;
};

DataFrame.prototype.getLabel = function () {
  var lab = "";
  if (this.label && _typeof(this.label) == 'object') lab = this.label["@value"];
  if (this.label && typeof this.label == 'string') lab = this.label;
  if (!lab && this.property) lab = FrameHelper.labelFromURL(this.property); //always return something

  if (!lab) lab = FrameHelper.labelFromURL(this.cls);
  return lab;
};

DataFrame.prototype.getType = function () {
  if (this.range) return this.range;
  if (this.rangeValue && this.rangeValue.type) return this.rangeValue.type;
  return false;
};

ObjectFrame.prototype.getLabel = DataFrame.prototype.getLabel;

DataFrame.prototype.getComment = function () {
  var comment = "";
  if (this.comment && _typeof(this.comment) == 'object') comment = this.comment["@value"];
  if (this.comment && typeof this.comment == 'string') comment = this.comment;
  return comment;
};

ObjectFrame.prototype.getComment = DataFrame.prototype.getComment;

DataFrame.prototype.error = function (msg) {
  if (msg) this.err = msg;
  return this.err;
};

DataFrame.prototype.isValid = function () {
  if (!(this.type && this.isValidType(this.type))) {
    this.error("Missing or Illegal Frame Type " + this.type);
    return false;
  }

  if (!this.property) {
    this.error("Missing Frame Property");
    return false;
  }

  if (!this.domain) {
    this.error("Missing Frame Domain");
    return false;
  }

  if (!this.range) {
    this.error("Missing Frame Range");
    return false;
  }

  if (this.isObjectProperty() && !(this.frame && _typeof(this.frame) == "object")) {
    this.error("Missing Object Frame");
    return false;
  }

  return true;
};

DataFrame.prototype.isObjectProperty = function () {
  return this.type == "objectProperty";
};

DataFrame.prototype.isDatatypeProperty = function () {
  return this.type == "datatypeProperty";
};

DataFrame.prototype.isLogic = function () {
  if (this.type == "and" || this.type == "or" || this.type == "xor") {
    return true;
  }

  return false;
};

DataFrame.prototype.isRestriction = function () {
  return this.type == "restriction";
};

DataFrame.prototype.ftype = function () {
  if (this.isEntity()) return "entity";
  if (this.isDatatypeProperty()) return "data";
  if (this.isChoice()) return "oneOf";
  if (this.isObject()) return "object";
  if (this.isLogic()) return "logic";
  if (this.isClassChoice()) return "class_choice";
};

DataFrame.prototype.isClassChoice = function () {
  return this.frame && this.frame.type == "class_choice";
};

DataFrame.prototype.isString = function () {
  if (this.range == FrameHelper.getStdURL("xsd", "string")) {
    return true;
  }

  return false;
};

DataFrame.prototype.getChoiceOptions = function () {
  var opts = [];

  for (var i = 0; i < this.frame.elements.length; i++) {
    var option = {};

    if (this.frame.elements[i].label) {
      option.label = this.frame.elements[i].label["@value"];
    } else {
      option.label = FrameHelper.labelFromURL(this.frame.elements[i]["class"]);
    }

    option.value = this.frame.elements[i]["class"];
    opts.push(option);
  }

  return opts;
};

DataFrame.prototype.lang = function () {
  return "en";
};

DataFrame.prototype.isChoice = function () {
  return this.frame && this.frame.type == "oneOf";
};

DataFrame.prototype.isEntity = function () {
  return this.frame && this.frame.type == "entity";
};

DataFrame.prototype.isData = function () {
  return this.isEntity() || this.isChoice() || this.isDatatypeProperty();
};

DataFrame.prototype.isObject = function () {
  return this.isObjectProperty() && this.frame && !(this.isChoice() || this.isEntity());
};

DataFrame.prototype.getTypeShorthand = function () {
  if (this.isEntity()) return "entity";else if (this.isChoice()) return "choice";else return FrameHelper.getShorthand(this.range);
};

DataFrame.prototype.get = function (format) {
  if (this.contents) {
    return this.contents;
  }

  if (this.isDatatypeProperty() && this.rangeValue && typeof this.rangeValue["@value"] != "undefined") {
    return this.rangeValue["@value"];
  } else if (this.isChoice() || this.isEntity()) {
    return this.frame.domainValue;
  }

  return "";
};

DataFrame.prototype.set = function (value, normalizer) {
  if (normalizer) value = normalizer(value, this);
  this.contents = value;

  if (this.isChoice() || this.isEntity()) {
    this.frame.domainValue = value;
  }

  if (this.isDatatypeProperty() && this.rangeValue) {
    this.rangeValue["@value"] = value;
  }
};

DataFrame.prototype.clear = function () {
  if (this.isEntity() || this.isChoice() || this.isDatatypeProperty()) {
    this.set("");
  }
};

function ClassFrame(frame, parent) {
  this.err = false;
  this.parent = parent;
  this.children = {}; //the id of the object that owns this dataframe

  this.subjid = parent ? parent.subjid : false;

  if (frame) {
    this.load(frame);
  }
}

ClassFrame.prototype = DataFrame.prototype;

ClassFrame.prototype.loadFromObjectFrame = function (par, child) {
  //all the meta-data carried in frames: 
  this.type = "objectProperty";
  this.property = par.property;
  this.range = par.range;
  this.rangeValue = child.subjid;
  this.domain = par.cls;
  this.domainValue = par.subjid;
  this.label = par.getLabel();
  this.comment = par.getComment();
  this.restriction = par.restriction;
};

ClassFrame.prototype.createEmptyChoice = function (cls, newid) {
  var cf = this.getChosenClassFrames(cls);
  var objframe = new ObjectFrame(cls);
  if (newid) objframe.subjid = newid;
  objframe.loadClassFrames(cf);
  var fframe = objframe.fillFromSchema();
  return fframe;
};

ClassFrame.prototype.getChosenClassFrames = function (chosen) {
  var nc = [];

  for (var i = 0; i < this.frame.operands.length; i++) {
    for (var j = 0; j < this.frame.operands[i].length; j++) {
      if (chosen == this.frame.operands[i][j].domain) {
        nc = nc.concat(this.frame.operands[i][j]);
      }
    }
  }

  return nc;
};

ClassFrame.prototype.createEmpty = function (newid) {
  if (this.isObject()) {
    var objframe = new ObjectFrame(this.range);
    if (newid) objframe.subjid = newid;
    objframe.loadClassFrames(this.frame);
    var fframe = objframe.fillFromSchema();
    return fframe;
  } else if (this.isData()) {
    var dataframe = this.copy();
    dataframe.set("");
    return dataframe;
  }
};

ClassFrame.prototype.cloneDataFrame = function (newid, other) {
  return other;
};

ClassFrame.prototype.clone = function (newid, other) {
  if (this.isObject()) {
    alert("cannot clone class frame");
  } else if (this.isData()) {
    return this.cloneDataFrame(newid, other);
  }
};

ClassFrame.prototype.getClassChoices = function () {
  var choices = [];

  for (var i = 0; i < this.frame.operands.length; i++) {
    for (var j = 0; j < this.frame.operands[i].length; j++) {
      var domcls = this.frame.operands[i][j].domain;

      if (domcls && choices.indexOf(domcls) == -1) {
        choices.push(domcls);
      }
    }
  }

  return choices;
};

ClassFrame.prototype.getChosenClassFrame = function (chosen) {
  for (var i = 0; i < this.frame.operands.length; i++) {
    var operand = this.frame.operands[i];

    if (operand.length) {
      for (var j = 0; j < operand.length; j++) {
        if (operand[j] && chosen == operand[j].domain) {
          var cf = new ClassFrame(operand);
          return cf;
        }
      }
    } else if (operand.range && chosen == operand.range) {
      var cf = new ClassFrame(operand);
      return cf;
    }
  }

  return false;
};

ClassFrame.prototype.getChosenFrame = function (dataframe) {
  return dataframe;
};

function Restriction(restriction) {
  this.min = 0;
  this.max = 0;
  if (restriction) this.loadRestriction(restriction);
}

Restriction.prototype.hasCardRestriction = function () {
  if (this.min == 0 && this.max == 0) return false;
  return true;
};

Restriction.prototype.loadRestriction = function (restriction) {
  if (typeof restriction.cardinality != "undefined") {
    this.max = restriction.cardinality;
    this.min = restriction.cardinality;
  } else if (typeof restriction.maxCardinality != "undefined") {
    this.max = restriction.maxCardinality;
  } else if (typeof restriction.minCardinality != "undefined") {
    this.min = restriction.minCardinality;
  } else if (typeof restriction.type != "undefined" && restriction.type == "and" && _typeof(restriction.operands) == "object") {
    for (var i = 0; i < restriction.operands.length; i++) {
      var nrest = new Restriction(restriction.operands[i]);
      if (this.max == 0 && nrest.max > 0) this.max = nrest.max;else if (this.max > 0 && nrest.max > 0 && nrest.max < this.max) this.max = nrest.max;
      if (this.min == 0 && nrest.min > 0) this.min = nrest.min;else if (this.min > 0 && nrest.min > 0 && nrest.min > this.min) this.min = nrest.min;
    }
  }
};

module.exports = ObjectFrame;

/***/ }),

/***/ "./src/TerminusUI.js":
/*!***************************!*\
  !*** ./src/TerminusUI.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Terminus UI object
 *
 * Traffic control of messages going between different Terminus UI pages and features
 *
 * @param opts - options array
 */
var FrameHelper = __webpack_require__(/*! ./FrameHelper */ "./src/FrameHelper.js");

var ApiExplorer = __webpack_require__(/*! ./ApiExplorer */ "./src/ApiExplorer.js");

var TerminusDocumentViewer = __webpack_require__(/*! ./client/TerminusDocument */ "./src/client/TerminusDocument.js");

var TerminusDBsdk = __webpack_require__(/*! ./client/TerminusDB */ "./src/client/TerminusDB.js");

var TerminusQueryViewer = __webpack_require__(/*! ./client/TerminusQuery */ "./src/client/TerminusQuery.js");

var TerminusMappingViewer = __webpack_require__(/*! ./client/TerminusMapping */ "./src/client/TerminusMapping.js");

var TerminusSchemaViewer = __webpack_require__(/*! ./client/TerminusSchema */ "./src/client/TerminusSchema.js");

var TerminusServersdk = __webpack_require__(/*! ./client/TerminusServer */ "./src/client/TerminusServer.js");

var TerminusURLLoader = __webpack_require__(/*! ./client/TerminusURL */ "./src/client/TerminusURL.js");

var TerminusPluginManager = __webpack_require__(/*! ./plugins/TerminusPlugin */ "./src/plugins/TerminusPlugin.js");

function TerminusUI(opts) {
  this.client = new TerminusDB.WOQLClient();
  this.controls = [];
  this.setOptions(opts);
}
/*
 * Client connects to specified server and specified part
 * opts is a json with the following fields:
 * server: mandatory URL of the server to connect to
 * key: optional client API key
 * dbid: id of the database to connect to
 * schema: if set, the UI will load the schema page after connecting
 * query: if set, the query will be sent to the server and the results will be loaded on the query page
 * document: if set, the document page corresponding to this document will be loaded after connecting
 *
 * (note: schema, query, document are mutually exclusive and must also have a dbid set)
 */


TerminusUI.prototype.connect = function (opts) {
  var self = this;
  this.client.connectionConfig.server = false;
  var key = opts && opts.key ? opts.key : false;
  this.showBusy("Connecting to server at " + opts.server);
  return this.client.connect(opts.server, key).then(function (response) {
    self.clearBusy();

    if (opts && opts.db && self.getDBRecord(opts.db)) {
      self.connectToDB(opts.db);

      if (opts.document && self.showView("get_document")) {
        self.showDocument(opts.document);
      } else if (opts.schema && self.showView("get_schema")) {
        self.showSchemaPage(opts.schema);
      } else if (opts.query && self.showView("woql_select")) {
        self.showQueryPage(opts.query);
      } else if (opts.explorer && self.showView("api_explorer")) {
        self.showExplorer(opts.explorer);
      } else {
        self.showDBMainPage();
      }
    } else {
      self.showServerMainPage();
    }

    self.redraw();
  })["catch"](function (err) {
    self.clearBusy();
    self.showError(err);
  });
};
/**
 * Sends a request to create a new database to the server and interprets the response
 *
 * dbdets is a json object with the following fields:
 * id: the id of the new database (alphanumeric, no spaces, url friendly) mandatory
 * title: the text name of the new database for tables, etc. mandatory
 * description: text description of the database (optional)
 * key: a API client key for server auth
 * schema: the url of another Terminus DB from which to import schema
 * instance: the url of another Terminus DB from which to import data
 *
 */


TerminusUI.prototype.createDatabase = function (dbdets) {
  var self = this;

  if (!dbdets.id || !dbdets.title) {
    return Promise.reject(new Error(self.getBadArguments("createDatabase", "ID and title are mandatory fields")));
  }

  var dbid = dbdets.id;
  var myserver = this.client.connectionConfig.server;
  self.showBusy("Creating Database " + dbdets.title + " with id " + dbid);
  var dbdoc = this.generateNewDatabaseDocument(dbdets);
  return this.client.createDatabase(dbid, dbdoc).then(function (response) {
    //import schema into newly created DB
    if (dbdets.schema) {
      self.showBusy("Fetching imported schema from " + dbdets.schema);
      var opts = dbdets.key ? {
        key: dbdets.key
      } : {};
      return self.client.getSchema(dbdets.schema, opts).then(function (response) {
        self.showBusy("Updating database with new schema");
        self.client.connectionConfig.server = myserver;
        self.client.connectionConfig.dbid = dbid;
        return self.client.updateSchema(false, response);
      }).then(function (response) {
        self.clearBusy();
        return response;
      });
    } else {
      self.clearBusy();
    }

    return response;
  }).then(function (response) {
    //reload list of databases in background..
    return self.refreshDBList().then(function (response) {
      if (crec = self.client.connection.getDBRecord(dbid)) {
        self.client.connectionConfig.dbid = dbid;
        self.showDBMainPage();
        self.showMessage("Successfully Created Database " + dbid, "success");
      } else {
        return Promise.reject(new Error(self.getCrashString("createDatabase", "Failed to retrieve record of created database " + dbid)));
      }
    });
  })["catch"](function (error) {
    self.clearBusy();
    self.showError(error);
  });
};
/**
 * Deletes the database with the passed id from the currently connected server
 */


TerminusUI.prototype.deleteDatabase = function (dbid) {
  var self = this;
  var delrec = this.client.connection.getDBRecord();
  var lid = dbid ? dbid : this.db();
  var dbn = delrec && delrec['rdfs:label'] && delrec['rdfs:label']["@value"] ? delrec['rdfs:label']["@value"] + " (id: " + lid + ")" : lid;
  this.showBusy("Deleting database " + dbn);
  return this.client.deleteDatabase(dbid).then(function (response) {
    self.clearBusy();
    self.client.connectionConfig.dbid = false;
    self.removeDB(dbid);
    self.showServerMainPage();
    self.showMessage("Successfully Deleted Database " + dbn, "success");
    self.refreshDBList();
    return response;
  })["catch"](function (error) {
    self.clearBusy();
    self.showError(error);
  });
};
/*
 * Transforms a details (id, title, description) array into  json-ld document
 */


TerminusUI.prototype.generateNewDatabaseDocument = function (dets) {
  var doc = {
    "@context": {
      rdfs: "http://www.w3.org/2000/01/rdf-schema#",
      terminus: "https://datachemist.net/ontology/terminus#"
    },
    "@type": "terminus:Database"
  };

  if (dets.title) {
    doc['rdfs:label'] = {
      "@language": "en",
      "@value": dets.title
    };
  }

  if (dets.description) {
    doc['rdfs:comment'] = {
      "@language": "en",
      "@value": dets.description
    };
  }

  doc['terminus:allow_origin'] = {
    "@type": "xsd:string",
    "@value": "*"
  };
  return doc;
};

TerminusUI.prototype.getBadArguments = function (fname, str) {
  return "Bad arguments to " + fname + ": " + str;
};

TerminusUI.prototype.getCrashString = function (fname, str) {
  return "Results from " + fname + " indicate the possibility of a system failure " + str;
};
/*
 * Parses the passed URL and turns it into a call to the connect function - loads the appropriate endpoing
 */


TerminusUI.prototype.load = function (url, key) {
  var args = {};

  if (url && url.indexOf("/document/") != -1) {
    url = url.substring(0, url.indexOf("/document/"));
    args.document = url.substring(url.indexOf("/document/") + 10);
  } else if (url && url.indexOf("/schema") != -1) {
    url = url.substring(0, url.indexOf("/schema"));
    args.schema = {};
  } else if (url && url.indexOf("/woql") != -1) {
    url = url.substring(0, url.indexOf("/query"));
    args.query = url.substring(url.indexOf("/query") + 7);
  }

  args.server = url;
  if (key) args.key = key;
  return this.connect(args);
};
/**
 * Fetches the DB URL from the url by chopping off the extra bits
 */


TerminusUI.prototype.getConnectionEndpoint = function (url) {
  if (url && url.lastIndexOf("/schema") != -1) {
    return url.substring(0, url.lastIndexOf("/schema"));
  }

  if (url && url.lastIndexOf("/document") != -1) {
    return url.substring(0, url.lastIndexOf("/document"));
  }

  if (url && url.lastIndexOf("/frame") != -1) {
    return url.substring(0, url.lastIndexOf("/frame"));
  }

  if (url && url.lastIndexOf("/woql") != -1) {
    return url.substring(0, url.lastIndexOf("/woql"));
  }

  return url;
};

TerminusUI.prototype.server = function () {
  return this.client.connectionConfig.server;
};

TerminusUI.prototype.db = function () {
  return this.client.connectionConfig.dbid;
};

TerminusUI.prototype.clearServer = function () {
  this.client.connectionConfig.server = false;
};

TerminusUI.prototype.connectToDB = function (dbid) {
  this.client.connectionConfig.dbid = dbid;
};

TerminusUI.prototype.clearDB = function () {
  this.client.connectionConfig.dbid = false;
};

TerminusUI.prototype.removeDB = function (db, url) {
  this.client.connection.removeDBFromConnection(db, url);
};

TerminusUI.prototype.getDBRecord = function (db, url) {
  return this.client.connection.getDBRecord(db, url);
};

TerminusUI.prototype.refreshDBList = function () {
  var self = this;
  return this.client.connect();
};

TerminusUI.prototype.showServerMainPage = function () {
  this.viewer = new TerminusServersdk.TerminusServerViewer(this);
  this.redrawMainPage();
};

TerminusUI.prototype.showLoadURLPage = function (val) {
  this.viewer = new TerminusURLLoader(this, val);
  this.redrawMainPage();
};

TerminusUI.prototype.showDBMainPage = function () {
  this.viewer = new TerminusDBsdk.TerminusDBViewer(this);
  this.redrawMainPage();
};

TerminusUI.prototype.showCreateDBPage = function () {
  this.viewer = new TerminusDBsdk.TerminusDBCreator(this);
  this.redrawMainPage();
};

TerminusUI.prototype.showSchemaPage = function (durl) {
  this.viewer = new TerminusSchemaViewer(this);
  this.redrawMainPage();
};

TerminusUI.prototype.showQueryPage = function (query) {
  this.viewer = new TerminusQueryViewer(this, query, this.options);
  this.redrawMainPage();
};

TerminusUI.prototype.showMappingPage = function (mapping) {
  this.viewer = new TerminusMappingViewer(this, mapping, this.options);
  this.redrawMainPage();
};

TerminusUI.prototype.showDocument = function (durl) {
  this.viewer = new TerminusDocumentViewer(this, "view", this.getDocViewerOptions());
  this.viewer.loadDocument(durl);
  this.redrawMainPage();
};

TerminusUI.prototype.showCreateDocument = function (durl) {
  this.viewer = new TerminusDocumentViewer(this, "create", this.getDocCreatorOptions());
  this.viewer.loadCreateDocument(durl);
  this.redrawMainPage();
};

TerminusUI.prototype.redrawMainPage = function () {
  FrameHelper.removeChildren(this.main);

  if (this.viewer) {
    this.main.appendChild(this.viewer.getAsDOM());
  }
};

TerminusUI.prototype.showResult = function (response) {
  this.showMessage(response, "success");
};

TerminusUI.prototype.showError = function (response) {
  this.showMessage(response, "error");
};

TerminusUI.prototype.clearMessages = function (response) {
  if (this.messages) FrameHelper.removeChildren(this.messages);
};

TerminusUI.prototype.clearMainPage = function () {
  if (this.main) FrameHelper.removeChildren(this.main);
};

TerminusUI.prototype.setMessageDOM = function (dom) {
  this.messages = dom;
};

TerminusUI.prototype.setbuttonControls = function (dom) {
  this.buttons = dom;
};

TerminusUI.prototype.setControllerDOM = function (dom) {
  this.controller = dom;
};

TerminusUI.prototype.setExplorerDOM = function (dom) {
  this.explorer = dom;
};

TerminusUI.prototype.setPluginsDOM = function (dom) {
  this.plugins = dom;
};

TerminusUI.prototype.setViewerDOM = function (dom) {
  this.main = dom;
};

TerminusUI.prototype.draw = function (comps, slocation) {
  if (comps && comps.buttons) this.setbuttonControls(comps.buttons);
  if (comps && comps.messages) this.setMessageDOM(comps.messages);
  if (comps && comps.controller) this.setControllerDOM(comps.controller);
  if (comps && comps.explorer) this.setExplorerDOM(comps.explorer);
  if (comps && comps.viewer) this.setViewerDOM(comps.viewer);
  if (comps && comps.plugins) this.setPluginsDOM(comps.plugins);

  if (this.buttons) {
    this.toggleControl();
  }

  if (this.controller) {
    this.drawControls();
  }

  if (this.plugins) {
    this.drawPlugins();
  }

  if (slocation && slocation.server) {
    if (typeof this.client.connection.connection[slocation.server] == "undefined") this.connect(slocation)["catch"](function (error) {
      this.showLoadURLPage();
      this.showError(error);
    });
  } else {
    this.showLoadURLPage();
  }

  ;
};

TerminusUI.prototype.redraw = function (msg) {
  this.clearMessages();

  if (this.controller) {
    FrameHelper.removeChildren(this.controller);
    this.drawControls();
  }

  if (this.explorer) {
    FrameHelper.removeChildren(this.explorer); //this.drawExplorer();
  }

  if (this.viewer) {
    this.redrawMainPage();
  }

  if (msg) this.showMessage(msg);
};

TerminusUI.prototype.toggleControl = function () {
  var self = this;
  this.buttons.client.addEventListener('click', function () {
    FrameHelper.removeChildren(self.controller);
    FrameHelper.removeChildren(self.explorer);
    self.drawControls();
    self.showServerMainPage();
  });
  this.buttons.explorer.addEventListener('click', function () {
    FrameHelper.removeChildren(self.controller);
    FrameHelper.removeChildren(self.explorer);
    self.drawExplorer();
  });
};

TerminusUI.prototype.drawControls = function () {
  this.controls = [];
  this.loadControls();

  for (var i = 0; i < this.controls.length; i++) {
    var ncontrol = this.controls[i];

    if (ncontrol && (nd = ncontrol.getAsDOM())) {
      this.controller.appendChild(nd);
    }
  }
};

TerminusUI.prototype.drawExplorer = function () {
  if (this.explorer) {
    if (this.showControl("api_explorer")) {
      var exp = new ApiExplorer(this);
      ae = exp.getAsDOM();
      this.explorer.appendChild(ae);
      this.explorer.style.display = 'block';
    }
  }
};

TerminusUI.prototype.loadControls = function () {
  if (this.showControl('server')) {
    var sc = new TerminusServersdk.TerminusServerController(this);

    if (sc) {
      this.controls.push(sc);
    }

    if (this.db() && this.showControl("db")) {
      var sc = new TerminusDBsdk.TerminusDBController(this);
      if (sc) this.controls.push(sc);
    }
  }
};

TerminusUI.prototype.showControl = function (el) {
  if (this.show_controls.indexOf(el) == -1) return false;
  if (this.pseudoCapability(el)) return true;

  if (this.client.connection.capabilitiesPermit(el)) {
    return true;
  }

  return false;
};

TerminusUI.prototype.showView = function (el) {
  if (this.show_views.indexOf(el) == -1) return false;
  if (this.pseudoCapability(el)) return true;

  if (this.client.connection.capabilitiesPermit(el)) {
    return true;
  }

  return false;
};

TerminusUI.prototype.clearBusy = function (response) {
  this.clearMessages();
  if (this.viewer && typeof this.viewer.busy == "function") this.viewer.busy(false);
};

TerminusUI.prototype.showMessage = function (msg, type) {
  if (this.messages) {
    var md = document.createElement('div');
    md.setAttribute('class', 'terminus-show-msg terminus-msg-' + type);
    md.appendChild(document.createTextNode(msg));
    this.messages.appendChild(md);
  }
};

TerminusUI.prototype.showBusy = function (msg) {
  this.showMessage(msg, "busy");
  if (this.viewer && typeof this.viewer.busy == "function") this.viewer.busy(msg);
};

TerminusUI.prototype.pseudoCapability = function (el) {
  var pseuds = ["server", "db", "change-server", "api_explorer", "import_schema", "schema_format"];
  if (pseuds.indexOf(el) == -1) return false;
  return true;
};

TerminusUI.prototype.setOptions = function (opts) {
  this.show_controls = opts && opts.controls ? opts.controls : ["server", "db", "change-server", "schema_format", "import_schema", "class_frame", "create_database", "create_document", "get_document", "update_schema", "get_schema", "woql_select"];
  this.show_views = opts && opts.views ? opts.views : this.show_controls;

  if (opts.document) {
    this.document_options = opts.document;
  }

  if (opts.schema) {
    this.schema_options = opts.schema;
  }

  this.piman = new TerminusPluginManager();
  var self = this;
  this.piman.init(opts.plugins, function () {
    self.redraw();
  });

  if (opts.css && this.piman) {
    this.piman.loadPageCSS(opts.css);
  }

  this.loadControls();
};

TerminusUI.prototype.pluginAvailable = function (p) {
  return this.piman.pluginAvailable(p);
};

TerminusUI.prototype.drawPlugins = function () {
  if (!this.piman) {
    console.log(new Error("No plugin manager initialised in UI object"));
    return false;
  }

  this.plugins.appendChild(this.piman.getAsDOM(this));
};

TerminusUI.prototype.getDocViewerOptions = function () {
  if (this.document_options && this.document_options['view']) {
    return this.document_options['view'];
  }

  return false;
};

TerminusUI.prototype.getDocCreatorOptions = function () {
  if (this.document_options && this.document_options['view']) {
    return this.document_options['view'];
  }

  return false;
};

TerminusUI.prototype.getClassFrameOptions = function () {
  return this.viewdoc_options;
};

module.exports = TerminusUI;

/***/ }),

/***/ "./src/Utils.js":
/*!**********************!*\
  !*** ./src/Utils.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * @file Javascript Api explorer tool
 * @author Kitty Jose
 * @license Copyright 2018-2019 Data Chemist Limited, All Rights Reserved. See LICENSE file for more
 *
 * @summary Set of functions used across scripts
 */
var Codemirror = __webpack_require__(/*! ./plugins/codemirror.terminus */ "./src/plugins/codemirror.terminus.js"); // function to read Files


function readFile(file) {
  if (window.XMLHttpRequest) {
    // code for IE7+, Firefox, Chrome, Opera, Safari
    xmlhttp = new XMLHttpRequest();
  } else {
    // code for IE6, IE5
    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
  }

  xmlhttp.open("GET", file, false);
  xmlhttp.send();
  xmlDoc = xmlhttp.responseText;
  return xmlDoc;
} // readFile()
// function to write api call signatures from woql client


function getFunctionSignature(which) {
  var sigs = {};
  sigs.connect = {
    spec: "WOQLClient.connect(server_url, key)",
    descr: "\n\nConnect to a Terminus server at the given URI with an API key" + "Stores the terminus:ServerCapability document returned in the connection register" + "which stores, the url, key, capabilities, and database meta-data for the connected server" + "If the curl argument is false or null, the this.server will be used if present," + " or the promise will be rejected.",
    result: "HTTP 200 on success, 409 for already existing database, otherwise error code",
    args: {
      server_url: 'url',
      key: 'Api key'
    },
    options: {
      title: "",
      description: ""
    }
  };
  sigs.create = {
    spec: "WOQLClient.createDatabase(database_url, details, key)",
    descr: "\n\nCreate a Terminus Database by posting a terminus:" + "The dburl argument can be \n1) a valid URL of a terminus database or \n2) a valid Terminus " + "database id or \n3) can be omitted" + "\nin case 2) the current server will be used, " + "\nin case 3) the database id will be set from the @id field of the terminuse:Database document." + "\nThe second (details) argument contains a \nterminus:Database document with a mandatory " + "\nrdfs:label field and an optional rdfs:comment field." + "\nThe third (key) argument contains an optional API key ",
    result: "HTTP 200 on success, 409 for already existing database, otherwise error code",
    args: {
      database_url: 'url',
      details: '',
      key: ' Api key'
    },
    options: {
      title: "",
      description: ""
    }
  };
  sigs["delete"] = {
    spec: "WOQLClient.deleteDatabase(database_url, options)",
    descr: "\n\nDeletes a Database" + "\nThe first (dburl) argument can \n1) a valid URL of a terminus database or \n2) a valid database id" + " or \n3) ommitted in case \n2) the current server will be used, and in case \n3) the current server " + "and database will be used. \nThe second argument (opts) is an options json - no options are" + " currently supported for this function",
    result: "HTTP 200 on success, otherwise error code"
  };
  sigs.getSchema = {
    spec: "WOQLClient.getSchema(schema_url, options)",
    descr: "\n\nGets the schema of a database. \nThe first (schurl) argument can be " + "\n1) a valid URL of a terminus database or \n2) a valid database id or " + "\n3) omitted, \nin case 2) the current server will be used, and \nin case 3) the current server and" + "database will be used the second argument (opts) is an options json - " + "\nopts.format is optional and defines which format is requested (*json / turtle)" + "\nopts.key is an optional API key",
    result: "Ontology Document on success (HTTP 200), 409 for already existing database, otherwise error code",
    options: {
      format: "turtle"
    }
  };
  sigs.getClassFrames = {
    spec: "WOQLClient.getClassFrame = function(cfurl, cls, opts)",
    descr: "\n\nRetrieves a WOQL query on the specified database which updates the state and returns the results" + "\nThe first (cfurl) argument can be" + "\n1) a valid URL of a terminus database or" + "\n2) omitted - the current database will be used" + "\nthe second argument (cls) is the URL / ID of a document class that exists in the database schema" + "\nthe third argument (opts) is an options json - opts.key is an optional API key",
    result: "Ontology Document on success (HTTP 200), 409 for already existing database, otherwise error code",
    options: {
      format: "turtle"
    }
  };
  sigs.updateSchema = {
    spec: "WOQLClient.updateSchema(schema_url, docs, options)",
    descr: "\n\nUpdates the Schema of the specified database" + "\nThe first (schurl) argument can be \n1) a valid URL of a terminus database or \n2)" + " a valid database id or \n3) omitted, \nin case 2) the current server will be used," + " and \nin case 3) the current server and database will be used" + "\nThe second argument (doc) is a valid owl ontology in json-ld or turtle format" + "\nthe third argument (opts) is an options json - " + "opts.format is used to specify which format is being used (*json / turtle)" + "opts.key is an optional API key",
    result: "Ontology Document on success (HTTP 200), 409 for already existing database, otherwise error code",
    args: {
      document: 'doc'
    },
    options: {
      format: "turtle",
      editmode: "replace"
    }
  };
  sigs.createDocument = {
    spec: "WOQLClient.createDocument(document_url, document, options)",
    descr: "\n\nCreates a new document in the specified database" + "\nThe first (docurl) argument can be" + "\n1) a valid URL of a terminus database (an id will be randomly assigned) or" + "\n2) a valid URL or of a terminus document (the document will be given the passed URL) or" + "\n3) a valid terminus document id (the current server and database will be used)" + "\n4) can be ommitted (the URL will be taken from the document if present)" + "\nThe second argument (doc) is a valid document in json-ld" + "\nthe third argument (opts) is an options json - opts.key is an optional API key",
    result: "Created Document on success (HTTP 200), Violation Report Otherwise (HTTP 400+)",
    args: {
      document_url: 'url',
      document: "doc"
    },
    options: {
      format: "turtle",
      fail_on_id_denied: false
    }
  };
  sigs.viewDocument = {
    spec: "WOQLClient.getDocument(document_url, options)",
    descr: "\n\nRetrieves a document from the specified database" + "\nThe first (docurl) argument can be" + "\n1) a valid URL of a terminus document or" + "\n2) a valid ID of a terminus document in the current database" + "\nthe second argument (opts) is an options json - " + "\nopts.key is an optional API key" + "\nopts.shape is frame | *document ",
    result: "Document (HTTP 200), Violation Report Otherwise (HTTP 400+)",
    args: {
      document_url: 'url'
    },
    options: {
      format: "turtle"
    }
  };
  sigs.updateDocument = {
    spec: "WOQLClient.updateDocument(document_url, document, options)",
    descr: "\n\nUpdates a document in the specified database with a new version" + "\nThe first (docurl) argument can be" + "\n1) a valid URL of a terminus document or " + "\n2) a valid ID of a terminus document in the current database or" + "\n3) ommitted in which case the id will be taken from the document @id field" + "\nthe second argument (doc) is a document in json-ld format" + "\nthe third argument (opts) is an options json - opts.key is an optional API key",
    result: "Ontology Document on success (HTTP 200), 409 for already existing database, otherwise error code",
    args: {
      document_url: 'url',
      document: "doc"
    },
    options: {
      format: "turtle",
      editmode: "replace"
    }
  };
  sigs.deleteDocument = {
    spec: "WOQLClient.deleteDocument(document_url, options)",
    descr: "\n\nDeletes a document from the specified database" + "\nThe first (docurl) argument can be" + "\n1) a valid URL of a terminus document or" + "\n2) a valid ID of a terminus document in the current database" + "\n3) omitted - the current document will be used" + "\nthe second argument (opts) is an options json - opts.key is an optional API key",
    result: "Ontology Document on success (HTTP 200), 409 for already existing database, otherwise error code",
    args: {
      document_url: 'url'
    }
  };
  sigs.select = {
    spec: "WOQLClient.select(database_url, woql, options)",
    descr: "\n\nExecutes a read-only WOQL query on the specified database and returns the results" + "\nThe first (qurl) argument can be " + "\n1) a valid URL of a terminus database or " + "\n2) omitted - the current database will be used " + "\nthe second argument (woql) is a woql select statement encoded as a string" + "\nthe third argument (opts) is an options json - opts.key is an optional API key",
    result: "WOQL Result (HTTP 200), otherwise error code",
    args: {
      woql: 'woql'
    }
  };
  sigs.update = {
    spec: "WOQLClient.update(database_url, woql, options)",
    descr: "\n\nExecutes a WOQL query on the specified database which updates the state and returns the results" + "\nThe first (qurl) argument can be " + "\n1) a valid URL of a terminus database or " + "\n2) omitted - the current database will be used " + "\nthe second argument (woql) is a woql select statement encoded as a string" + "\nthe third argument (opts) is an options json - opts.key is an optional API key",
    result: "WOQL Result (HTTP 200), otherwise error code",
    args: {
      woql: 'woql'
    }
  };
  sigs.lookup = {
    spec: "WOQLClient.lookup(database_url, woql, options)",
    result: "WOQL Result (HTTP 200), otherwise error code",
    args: {
      "class": 'url',
      term: 'string'
    }
  };
  sigs.map = {
    spec: "WOQLClient.lookup(source, target, woql, options)",
    result: "WOQL Result (HTTP 200), otherwise error code",
    args: {
      source: 'json',
      target: "json",
      woql: 'json'
    }
  };
  sigs.getClassFrame = {
    spec: "WOQLClient.getClassFrame(class, options)",
    result: "WOQL Result (HTTP 200), otherwise error code",
    args: {
      "class": 'url'
    }
  };
  sigs.getPropertyFrame = {
    spec: "WOQLClient.getPropertyFrame(class, property, options)",
    result: "WOQL Result (HTTP 200), otherwise error code",
    args: {
      "class": 'url',
      property: 'url'
    }
  };
  sigs.getFilledPropertyFrame = {
    spec: "WOQLClient.getPropertyFrame(document_url, property, options)",
    result: "WOQL Result (HTTP 200), otherwise error code",
    args: {
      document_url: 'url',
      property: 'url'
    }
  };
  sigs.getSubClasses = {
    spec: "WOQLClient.getSubClasses(class, options)",
    result: "WOQL Result (HTTP 200), otherwise error code",
    args: {
      "class": 'url'
    }
  };
  return sigs[which];
} //getFunctionSignature
// returns dom element for header text


function getHeaderDom(text) {
  var hd = document.createElement('div');
  hd.setAttribute('class', 'terminus-module-head');
  var h = document.createElement('h3');
  h.innerHTML = text;
  hd.appendChild(h);
  return hd;
} // getHeaderTextDom
// returns dom for alert banner


function getInfoAlertDom(type, label, msg) {
  var ald = document.createElement('div');
  if (type == 'info') ald.setAttribute('class', 'terminus-alert terminus-alert-success');else ald.setAttribute('class', 'alert');
  var str = document.createElement('STRONG');
  str.innerHTML = label;
  ald.appendChild(str);
  var txt = document.createTextNode(msg);
  ald.appendChild(txt);
  return ald;
} // getInfoAlertDom()
// formats response results from platform


function getResponse(currForm, action, response, terminator) {
  var rd = document.createElement('div'); // get header result

  rd.appendChild(UTILS.getHeaderDom('Result'));
  var br = document.createElement('BR');
  rd.appendChild(br);
  var data = JSON.stringify(response, 0, 4);
  var pre = document.createElement('pre');
  pre.setAttribute('class', 'terminus-api-view terminus-scheme-pre');
  pre.innerHTML = data;
  var cm = stylizeCodeDisplay(terminator, pre, rd, 'javascript');
  if (!cm) rd.appendChild(pre);
  var br = document.createElement('BR');
  rd.appendChild(br);
  currForm.appendChild(rd);
  return currForm;
} // formats the response from fetch call and spits out Http header and result


function showHttpResult(response, action, currForm, terminator) {
  //var currForm = document.createElement('div');
  var br = document.createElement('BR');
  currForm.appendChild(br);
  var br = document.createElement('BR');
  currForm.appendChild(br); // get header result

  currForm.appendChild(UTILS.getHeaderDom('HTTP Header'));
  var br = document.createElement('BR');
  currForm.appendChild(br);
  var retHttpHeaders = ''; // iterate over all headers

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = response.headers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2),
          key = _step$value[0],
          value = _step$value[1];

      retHttpHeaders = retHttpHeaders + "".concat(key, " = ").concat(value) + '\n';
    } // http header result

  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var hdres = document.createElement('pre');
  hdres.setAttribute('class', 'terminus-api-signature-pre');
  var txt = document.createTextNode(retHttpHeaders);
  hdres.appendChild(txt);
  var cm = stylizeCodeDisplay(terminator, hdres, currForm, 'message/http');
  if (!cm) currForm.appendChild(hdres);
  return response.json().then(function (response) {
    getResponse(currForm, action, response, terminator); // get return response
  });
} // UTILS.showHttpResult()


function deleteStylizedEditor(ui, qip) {
  if (ui.pluginAvailable("codemirror")) {
    var cm = qip.nextElementSibling;
    cm.setAttribute('class', 'terminus-hide');
    FrameHelper.removeChildren(cm);
  }
}
/* ui: terminus ui reference
   txt: text area to be stylized
   view: defines the size of editor to appear in pages (schema/ query)
   mode: format to be displayed in
*/


function stylizeEditor(ui, txt, view, mode) {
  var cmConfig = ui.pluginAvailable("codemirror");
  if (!cmConfig) return;
  var cm = new Codemirror(txt, mode, cmConfig);
  var ar = cm.colorizeTextArea(view);
  cm.updateTextArea(ar);
}
/* ui: terminus ui reference
   txt: text area to be stylized
   dom: stylized pre area is appended to dom
   mode: format to be displayed in
*/


function stylizeCodeDisplay(ui, txt, dom, mode) {
  var cmConfig = ui.pluginAvailable("codemirror");
  if (!cmConfig) return false;
  var cm = new Codemirror(txt, mode, cmConfig);
  var pr = cm.colorizePre();
  dom.appendChild(pr);
  return true;
}
/* name: classname to find and remove classes from elements
*/


function removeSelectedNavClass(name) {
  var el = document.getElementsByClassName(name);

  for (var i = 0; i < el.length; i++) {
    el[i].classList.remove(name);
  }
} // toggles between contents


function tolggleContent(icon, content) {
  if (content.style.display === "block") {
    removeSelectedNavClass("fa-chevron-up");
    icon.classList.add("fa-chevron-down");
    content.style.display = "none";
  } else {
    removeSelectedNavClass("fa-chevron-down");
    icon.classList.add("fa-chevron-up");
    content.style.display = "block";
  }
}

module.exports = {
  tolggleContent: tolggleContent,
  removeSelectedNavClass: removeSelectedNavClass,
  stylizeCodeDisplay: stylizeCodeDisplay,
  stylizeEditor: stylizeEditor,
  deleteStylizedEditor: deleteStylizedEditor,
  showHttpResult: showHttpResult,
  getHeaderDom: getHeaderDom,
  getInfoAlertDom: getInfoAlertDom,
  getFunctionSignature: getFunctionSignature
};

/***/ }),

/***/ "./src/client/HTMLFrameHelper.js":
/*!***************************************!*\
  !*** ./src/client/HTMLFrameHelper.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

var TerminusPluginManager = __webpack_require__(/*! ../plugins/TerminusPlugin */ "./src/plugins/TerminusPlugin.js");

var HTMLFrameHelper = {};

HTMLFrameHelper.getActionControl = function (type, control, label, callback, disabled) {
  var pman = new TerminusPluginManager();
  var dpropDOM = document.createElement("span");
  dpropDOM.setAttribute("class", "terminus-action-control " + type + "-" + control);
  var pman = new TerminusPluginManager();

  if (pman.pluginAvailable("font-awesome")) {
    var icon = document.createElement('icon');
    var faic = this.getControlIcon(control);

    if (disabled) {
      icon.setAttribute("class", "terminus-frame-control frame-control-action action-disabled fa fa" + faic + " " + type + "-" + control + "-disabled terminus-font-align");
      icon.setAttribute("title", disabled);
    } else {
      icon.setAttribute("class", "terminus-frame-control frame-control-action frame-control-action fa fa" + faic + " " + type + "-" + control + " terminus-font-align");
      icon.addEventListener("click", function () {
        callback(control);
      });
    }

    dpropDOM.appendChild(icon);
  } else {
    var button = document.createElement("button");
    button.appendChild(document.createTextNode(label));

    if (disabled) {
      button.setAttribute("class", "terminus-frame-control terminus-btn frame-control-action action-disabled " + type + "-" + control + "-disabled");
      button.setAttribute("title", disabled);
    } else {
      button.setAttribute("class", "terminus-frame-control terminus-btn frame-control-action " + type + "-" + control);
      button.addEventListener("click", function () {
        callback(control);
      });
    }

    dpropDOM.appendChild(button);
  }

  return dpropDOM;
};

HTMLFrameHelper.getSettingsControl = function () {
  var pman = new TerminusPluginManager();

  if (pman.pluginAvailable("font-awesome")) {
    var icon = document.createElement('icon');
    icon.setAttribute('class', 'fa fa-bars');
    return icon;
  } else {
    var button = document.createElement("button");
    button.appendChild(document.createTextNode('Settings'));
    return button;
  }
};

HTMLFrameHelper.getControlIcon = function (control) {
  var icon;

  switch (control) {
    case 'delete':
      icon = '-alt-delete';
      break;

    case 'add':
      icon = '-plus';
      break;

    case 'reset':
      icon = '-undo';
      break;

    case 'save':
      icon = '-save';
      break;

    case 'hide':
      icon = '-eye-slash';
      break;
  }

  return icon;
};

HTMLFrameHelper.getSelectionControl = function (type, options, selected, callback) {
  var sel = document.createElement("select");
  sel.setAttribute("class", "terminus-frame-selector frame-control-selection " + type);

  for (var i = 0; i < options.length; i++) {
    var opt = document.createElement("option");

    if (_typeof(options[i]) == "object") {
      opt.value = options[i].value;
      var label = options[i].label ? document.createTextNode(options[i].label) : document.createTextNode(FrameHelper.labelFromURL(options[i].value));
      opt.appendChild(label);
    } else {
      opt.value = options[i];
      label = FrameHelper.labelFromURL(opt.value);
      opt.appendChild(document.createTextNode(label));
    }

    if (selected == opt.value) {
      opt.setAttribute("selected", "selected");
    }

    sel.appendChild(opt);
  }

  sel.addEventListener("change", function () {
    callback(this.value);
  });
  return sel;
};

HTMLFrameHelper.getModeSelectorDOM = function (which, renderer) {
  var viewsDOM = document.createElement("span");
  viewsDOM.setAttribute("class", "terminus-mode terminus-" + which + "-mode");

  if (renderer.mode == "view") {
    var callback = function callback() {
      renderer.setMode("edit");
    };

    viewsDOM.appendChild(HTMLFrameHelper.getActionControl("terminus-mode terminus-" + which + "-mode", "edit", " Edit ", callback));
  } else if (renderer.isNew()) {
    return false;
  } else {
    var callback = function callback() {
      renderer.cancel();
    };

    viewsDOM.appendChild(HTMLFrameHelper.getActionControl(which, "cancel", "Cancel", callback));
  }

  return viewsDOM;
};

HTMLFrameHelper.goToName = function (s, p, i) {
  var url = window.location.href;

  if (url) {
    var wbits = url.split("#");
    var loc = wbits[0];
    var sh = FrameHelper.getShorthand(s);
    if (!sh) sh = s;
    var bits = sh.split(":");
    if (bits.length > 1) sh = bits[1];
    var htmlid = sh;

    if (p) {
      var prop = FrameHelper.getShorthand(p);
      if (!prop) prop = p;
      var bits = prop.split(":");
      if (bits.length > 1) prop = bits[1];
      htmlid += "_" + prop;

      if (i) {
        htmlid += "_" + i;
      }
    }

    window.location = loc + "#" + htmlid;
  }
};
/*HTMLFrameHelper.getFrameRow = function(){
	var row = document.createElement('div');
	row.setAttribute('class', 'terminus-frame-row');
	return row;
}

HTMLFrameHelper.getFrameGroup = function(frow){
	var fl = document.createElement('div');
	fl.setAttribute('class', 'terminus-frame-length');
	frow.appendChild(fl);

	var fg = document.createElement('div');
	fg.setAttribute('class', 'terminus-frame-group');
	fl.appendChild(fg);
	return fl;
}*/


HTMLFrameHelper.getInfoboxDOM = function (type, label, value, help, input) {
  /*var frow = this.getFrameRow();
  var fgroup = this.getFrameGroup(frow);*/
  var infoDOM = document.createElement("span");
  infoDOM.setAttribute("class", "terminus-frame-infobox-box " + "terminus-" + type); //fgroup.appendChild(infoDOM);

  if (help) {
    infoDOM.setAttribute("title", help);
  }

  if (label) {
    var linfo = document.createElement("span");
    linfo.setAttribute("class", "terminus-frame-infobox-label " + "terminus-" + type + "-label");
    linfo.appendChild(document.createTextNode(label));
    infoDOM.appendChild(linfo);
  }

  var lspacer = document.createElement("span");
  lspacer.setAttribute("class", "terminus-frame-infobox-spacer " + "terminus-" + type + "-spacer");
  lspacer.appendChild(document.createTextNode(" "));
  infoDOM.appendChild(lspacer);
  var lval = document.createElement("span");
  lval.setAttribute("class", "terminus-frame-infobox-value " + "terminus-" + type + "-value terminus-property-label-align");

  if (input) {
    input.value = value;
    lval.appendChild(input);
  } else if (value) {
    var sh = FrameHelper.getShorthand(value);

    if (sh) {
      var bits = sh.split(":");
      sh = bits[1];
      lval.setAttribute("title", value);
      lval.appendChild(document.createTextNode(sh));
    } else {
      lval.appendChild(document.createTextNode(value));
    }
  }

  infoDOM.appendChild(lval);
  return infoDOM;
};

module.exports = HTMLFrameHelper;

/***/ }),

/***/ "./src/client/ObjectRenderer.js":
/*!**************************************!*\
  !*** ./src/client/ObjectRenderer.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * object renderer binds to object frame - provides filters, sorts and manipulations of underlying object frame
 * and coordinates viewer to draw updates

 * Object Renderer - provides sorting / filtering / state management of objects
 * @param obj ObjectFrame object - contains underlying data and frame structure
 * @param parent PropertyRenderer - property that owns this object (if any)
 * @param options options json
 * @returns
 */
var PropertyRenderer = __webpack_require__(/*! ./PropertyRenderer */ "./src/client/PropertyRenderer.js");

var RenderingMap = __webpack_require__(/*! ./RenderingMap */ "./src/client/RenderingMap.js");

function ObjectRenderer(obj, parent, options) {
  this.objframe = obj;
  this.parent = parent;
  this.options = this.setOptions(options);
  this.properties = {};
  this.originalProperties = false;
  this.newProperties = [];
} //options has to include mode, viewer, facet, controls, features, hide_disabled_controls


ObjectRenderer.prototype.setOptions = function (options) {
  //var rendconf = new RendererConfigurationMatcher(options);
  return RenderingMap.decorateRenderer(options, this);
  /*rendconf.setObjectRenderingConfiguration(this);
  options = (options ? options : {});
  if(options.mode) this.mode = options.mode;
  else {
  	this.mode = (this.parent && this.parent.mode ? this.parent.mode : "view");
  	options.mode = this.mode;
  }
  if(options.view) this.view = options.view;
  else {
  	this.view = (this.parent && this.parent.view ? this.parent.view : "full");
  	options.view = this.view;
  }
  if(options.facet) this.facet = options.facet;
  else this.facet = this.getDefaultFacet();
  this.hide_disabled_controls = (options && options.hide_disabled_controls ? options.hide_disabled_controls : true);
  this.facets = {
  	label: 	["facet", "status", "label"],
  	summary: ["facet", "satus", "label", "type", "summary", "status", "facet"],
  	line: ["facet", "label", "comment", "id", "type", "body", "status", "facet"],
  	page: ["facet", "label", "comment", "id", "control", "type", "body", "status", "facet", "view", "viewer"].concat(this.controls)
  }
  if(options && options.facets){
  	for(var facet in options.facets){
  		this.facets[facet] = options.facets[facet];
  	}
  }
  //this.loadConfigurationFromOptions(options);
  if(options && options.features){
  	this.features = options.features;
  }
  else {
  	this.features = ["body", "id", "type", "summary", "status", "label", "facet", "control", "viewer", "view", "comment"];
  }
  if(options && options.controls){
  	this.controls = options.controls;
  }
  else {
  	this.controls = ["delete", "clone", "add", "reset", "cancel", "update", "mode", "show", "hide"];
  }
  return options;*/
};

ObjectRenderer.prototype.getOptionsForProperty = function (prop) {
  return this.options;
};

ObjectRenderer.prototype.render = function (viewer) {
  this.buildPropertyRenderers();
  this.viewer = viewer ? viewer : this.getViewerForObject();

  for (var prop in this.properties) {
    var renderedprop = this.properties[prop].render();
    if (renderedprop && this.showFeature("body")) this.viewer.addRenderedProperty(prop, renderedprop);
  }

  return this.viewer.render(this.view);
};

ObjectRenderer.prototype.buildPropertyRenderers = function () {
  var props = this.getPropertiesToRender();
  if (this.originalProperties === false) this.originalProperties = props;
  var renders = {};

  for (var j = 0; j < props.length; j++) {
    if (typeof this.properties[props[j]] == "undefined") {
      renders[props[j]] = new PropertyRenderer(props[j], this, this.getOptionsForProperty(props[j]));
    } else {
      renders[props[j]] = this.properties[props[j]];
    }

    if (this.newProperties.indexOf(props[j]) != -1) {
      renders[props[j]].setNew();
      renders[props[j]].mode = "edit";
    }
  }

  this.properties = renders;
};

ObjectRenderer.prototype.subject = function () {
  if (this.objframe) return this.objframe.subjid;
  return false;
};

ObjectRenderer.prototype.subjectClass = function () {
  if (this.objframe) return this.objframe.cls;
  return false;
};

ObjectRenderer.prototype.getAvailableViewers = function () {
  //if(this.mode == "view"){
  //	return RenderingMap.getAvailableObjectViewers(this);		
  //}
  //return RenderingMap.getAvailableObjectEditors(this);				
  return ["html", "json"];
};

ObjectRenderer.prototype.depth = function () {
  if (this.parent) return this.parent.depth() + 1;
  return 0;
};

ObjectRenderer.prototype.property = function () {
  if (this.parent) return this.parent.property();
  return false;
};

ObjectRenderer.prototype.parentObject = function () {
  if (this.parent && this.parent.parent && this.parent.parent.objframe) {
    return this.parent.parent.objframe;
  }

  return false;
};

ObjectRenderer.prototype.root = function () {
  if (this.parent) return false;
  return true;
};

ObjectRenderer.prototype.load = function (link) {
  var self = this;

  if (this.controller) {
    this.controller.ui.showDocument(link);
  } else if (this.parent) {
    this.parent.load(link);
  }
};

ObjectRenderer.prototype.copy = function (nkid) {
  nkid = nkid ? nkid : this.objframe;
  var other = new ObjectRenderer(nkid, this.parent, this.options);
  return other;
};

ObjectRenderer.prototype.clone = function () {
  if (this.root()) {
    this.objframe = this.objframe.clone("_:");
    this.objframe.newDoc = true;
    this.setMode("edit");
  } else {
    var nkid = this.objframe.clone(FrameHelper.genBNID());
    var parentobj = this.parentObject();
    var prop = this.property();

    if (parentobj && prop) {
      if (typeof parentobj.children[prop] == "undefined") {
        parentobj.children[prop] = [];
      }

      parentobj.children[prop].push(nkid);
      var newrend = this.copy(nkid);
      this.parent.values.push(newrend);
    }

    this.parent.redraw();
  }
};

ObjectRenderer.prototype.cancel = function () {
  this.reset();
  this.setMode("view");
};

ObjectRenderer.prototype.save = function () {
  if (this.controller) {
    if (this.isNewDocument()) {
      var demandid = this.inputID();
      if (demandid == "_:") demandid = "";
      this.controller.createDocument(demandid);
    } else {
      this.controller.updateDocument();
    }
  } else if (this.parent) {
    this.parent.save();
  }
};

ObjectRenderer.prototype["delete"] = function () {
  var dval = this.subject();

  if (this.controller && this.root()) {
    if (!this.isNewDocument()) {
      this.controller.deleteDocument(dval);
    }

    this.nukeViewer();
  } else {
    if (this.parent) {
      this.parent.deletePropertyValue(dval);
      this.parent.redraw();
    }
  }
};

ObjectRenderer.prototype.reset = function () {
  this.objframe.reset();
  var nprops = {};

  for (var i = 0; i < this.originalProperties.length; i++) {
    var prop = this.originalProperties[i];

    if (_typeof(this.properties[prop]) == "object") {
      this.properties[prop].reset();
      nprops[prop] = this.properties[prop];
    }
  }

  this.properties = nprops;
  this.redraw();
};

ObjectRenderer.prototype.deleteProperty = function (prop) {
  this.objframe.removeProperty(prop);
  delete this.properties[prop];
  this.updated();
};

ObjectRenderer.prototype.addProperty = function (prop) {
  this.objframe.addProperty(prop);
  this.updated();
  this.redraw();
};

ObjectRenderer.prototype.addNewProperty = function (prop) {
  this.objframe.addProperty(prop);
  this.updated();
  this.newProperties.push(prop);
  this.redraw();
  this.goToProperty(prop);
};

ObjectRenderer.prototype.addPropertyClass = function (prop, cls) {
  this.objframe.addProperty(prop, cls);
  this.updated();
};

ObjectRenderer.prototype.changeClass = function (cls) {
  if (this.parent) {
    this.parent.addClass(cls);
    this.parent.deletePropertyValue(this.subject());
  }
};

ObjectRenderer.prototype.getClassMeta = function (cls) {
  var ctl = this.getController();

  if (ctl && ctl.classmeta && ctl.classmeta[cls]) {
    return ctl.classmeta[cls];
  }

  return false;
};

ObjectRenderer.prototype.getController = function () {
  if (this.controller) {
    return this.controller;
  }

  if (this.parent && this.parent.parent) {
    return this.parent.parent.getController();
  }

  return false;
};

ObjectRenderer.prototype.getClient = function () {
  if (this.controller) {
    return this.controller.getClient();
  } else {
    if (this.parent && this.parent.parent) {
      return this.parent.parent.getClient();
    }
  }

  return false;
};

ObjectRenderer.prototype.inputID = function () {
  if (this.idDOM) {
    return this.idDOM.value;
  }

  return false;
};

ObjectRenderer.prototype.isNew = function () {
  if (this.new_object) {
    return true;
  }

  if (this.isPartOfNewDocument()) {
    return true;
  }

  if (this.parent) return this.parent.isNew();
  return false;
};

ObjectRenderer.prototype.setNew = function () {
  this.new_object = true;
};

ObjectRenderer.prototype.isUpdated = function () {
  var i = 0;

  for (var prop in this.properties) {
    if (this.originalProperties[i] != prop) return true;
    if (this.properties[prop].isUpdated()) return true;
    i++;
  }

  if (i != this.originalProperties.length) return true;
  return false;
};

ObjectRenderer.prototype.childUpdated = function () {
  this.viewer.redrawHeader();
  if (this.parent) this.parent.childUpdated();
};

ObjectRenderer.prototype.updated = ObjectRenderer.prototype.childUpdated;

ObjectRenderer.prototype.isNewDocument = function () {
  if (this.root() && this.objframe.isnew()) return true;
  return false;
};

ObjectRenderer.prototype.isPartOfNewDocument = function () {
  if (this.isNewDocument()) return true;

  if (this.parent && this.parent.parent) {
    return this.parent.parent.isPartOfNewDocument();
  }

  return false;
};

ObjectRenderer.prototype.setFacet = function (facet, nocascade) {
  this.facet = facet;

  if (!nocascade) {
    for (var prop in this.properties) {
      this.properties[prop].parentFacetChange(facet);
    }
  }

  if (this.parent) {
    this.parent.redraw();
  } else {
    this.redraw();
  }
};

ObjectRenderer.prototype.getDefaultFacets = function () {
  var defs = {
    page: {
      label: "Full Page",
      value: "page",
      features: ["facet", "label", "comment", "id", "control", "type", "body", "status", "facet", "view", "viewer"],
      controls: ["delete", "clone", "add", "reset", "cancel", "update", "mode", "show", "hide"]
    },
    line: {
      label: "Single Line",
      value: "line",
      features: ["facet", "label", "comment", "id", "type", "body", "status", "facet"],
      controls: []
    },
    summary: {
      label: "Summary",
      value: "summary",
      features: ["facet", "satus", "label", "type", "summary", "status", "facet"],
      controls: []
    },
    label: {
      label: "Label",
      value: "label",
      features: ["facet", "status", "label"],
      controls: []
    }
  };
  return defs;
};

ObjectRenderer.prototype.getAvailableFacets = function () {
  return Object.keys(this.facets);
};

ObjectRenderer.prototype.currentFacet = function () {
  return this.facet;
};

ObjectRenderer.prototype.getDefaultFacet = function () {
  if (!this.parent) return "page";
  var pfacet = this.parent.currentFacet();

  if (pfacet == "page") {
    return "page";
  }

  if (pfacet == "multiline") return "line";
  if (pfacet == "line") return "summary";
  return "label";
};

ObjectRenderer.prototype.parentFacetChange = function (pfacet) {
  if (pfacet == "page") this.setFacet("page");
  if (pfacet == "multiline") this.setFacet("summary");
  if (pfacet == "line") this.setFacet("summary");
  if (pfacet == "summary") this.setFacet("summary");
};

ObjectRenderer.prototype.getContentOrientation = function () {
  if (this.currentFacet() == "page") {
    return "page";
  }

  if (this.currentFacet() == "line") {
    return "line";
  }

  return "label";
};

ObjectRenderer.prototype.getLabel = function () {
  for (var prop in this.properties) {
    if (FrameHelper.getShorthand(prop) == "rdfs:label") {
      var prend = this.properties[prop];
      var vrend = prend.values[0];

      if (vrend) {
        var sum = vrend.getSummary();
        if (sum["long"] != "empty") return sum["long"];
      }
    }
  }

  var s = this.subject();

  if (s && s.substring(0, 2) == "_:") {
    var ty = this.subjectClass();
    var sh = FrameHelper.getShorthand(ty);

    if (sh) {
      var b = sh.split(":");

      if (b.length > 1) {
        return "New " + b[1];
      }
    }

    return "New Object";
  }

  return false;
};

ObjectRenderer.prototype.getSummary = function () {
  var ret = {
    status: "ok"
  };
  if (this.isUpdated()) ret.status = "updated";
  if (this.isNew()) ret.status = "new";
  ret.propcount = 0;

  for (var prop in this.properties) {
    ret.propcount++;
  }

  ret["long"] = ret.propcount + " properties";
  return ret;
};

ObjectRenderer.prototype.getObjectHeaderViewer = function () {
  return this.header_viewer;
};

ObjectRenderer.prototype.getViewerForObject = function (format) {
  return RenderingMap.getViewerForObject(format, this);
};

ObjectRenderer.prototype.getFeaturesForFacet = function (facet) {
  return this.facets[facet].features.concat(this.facets[facet].controls);
};

ObjectRenderer.prototype.hideDisabledControls = function () {
  return this.hide_disabled_controls;
};

ObjectRenderer.prototype.showFeature = function (which) {
  if (this.features.indexOf(which) == -1 && this.controls.indexOf(which) == -1) {
    return false;
  }

  var cardcontrols = ["delete", "clone", "add"];

  if (cardcontrols.indexOf(which) != -1) {
    if (!this.cardControlAllows(which)) return false;
  }

  var updcontrols = ["update", "reset"];

  if (this.hideDisabledControls() && updcontrols.indexOf(which) != -1) {
    if (!this.isUpdated()) {
      return false;
    }
  }

  if (this.isNewDocument() && which == "clone") return false;
  if (which == 'hide' && this.view == "hidden") return false;
  if (which == 'show' && this.view != "hidden") return false;
  var fets = this.getFeaturesForFacet(this.facet);

  if (fets.indexOf(which) != -1) {
    return true;
  }

  return false;
};

ObjectRenderer.prototype.cardControlAllows = function (action) {
  if (!this.parent) return true;

  if (this.parent.cframe.hasRestriction()) {
    var rest = this.parent.cframe.restriction;
    var currentnum = this.parent.values.length;

    if (action == "add" || action == "clone") {
      if (rest.max && currentnum >= rest.max) {
        return false;
      }
    }

    if (action == "delete" && rest.min && currentnum <= rest.min) {
      return false;
    }
  }

  return true;
};

ObjectRenderer.prototype.goToProperty = function (prop) {
  this.viewer.goTo(this.subject(), prop);
};

ObjectRenderer.prototype.setMode = function (mode) {
  this.mode = mode;

  for (var prop in this.properties) {
    this.properties[prop].setMode(mode);
  }

  this.viewer.redraw();
};

ObjectRenderer.prototype.currentViewer = function () {
  return this.viewerType;
};

ObjectRenderer.prototype.setViewer = function (viewer) {
  var nviewer = this.getViewerForObject(viewer);

  if (nviewer) {
    this.viewerType = viewer;
    this.viewer = nviewer;
    this.viewer.redraw();
  }
};

ObjectRenderer.prototype.setView = function (view) {
  var views = {
    "full": {},
    "hidden": {}
  };
  this.view = view;
  this.viewer.redraw();
};

ObjectRenderer.prototype.hide = function () {
  this.setView("hidden");
};

ObjectRenderer.prototype.show = function () {
  this.setView("full");
};

ObjectRenderer.prototype.nukeViewer = function () {
  this.viewer.remove();
};

ObjectRenderer.prototype.getViewableProperties = function () {
  return this.objframe.getFilledPropertyList();
};

ObjectRenderer.prototype.getAddableProperties = function () {
  var props = this.objframe.getMissingPropertyList();
  return props;
};

ObjectRenderer.prototype.getPropertiesToRender = function (options) {
  var sort = this.standardSort;

  var filter = function filter() {
    return true;
  };

  if (options && options.map && options.map.patterns) {
    for (var i = 0; i < options.map.patterns.length; i++) {
      if (this.objframe.matchesPattern({
        property: this.property(),
        action: "sort"
      }, options.map.patterns[i])) {
        sort = options.map.patterns[i].sort;
      }

      if (this.objframe.matchesPattern({
        property: this.property(),
        action: "filter"
      }, options.map.patterns[i])) {
        filter = options.map.patterns[i].filter;
      }
    }
  }

  return sort(this.objframe, filter);
};

ObjectRenderer.prototype.standardSort = function (objframe, filter) {
  var sorted = [];
  var rdft = FrameHelper.getStdURL("rdfs", "label");

  if (objframe.dataframes[rdft] && filter(objframe, rdft, objframe.dataframes[rdft])) {
    sorted.push(rdft);
  }

  var rdfc = FrameHelper.getStdURL("rdfs", "comment");

  if (objframe.dataframes[rdfc]) {
    sorted.push(rdfc);
  }

  for (var prop in objframe.dataframes) {
    if (sorted.indexOf(prop) == -1) sorted.push(prop);
  }

  for (var prop in objframe.children) {
    if (sorted.indexOf(prop) == -1) sorted.push(prop);
  }

  return sorted;
};

ObjectRenderer.prototype.redraw = function () {
  this.viewer.clear();
  this.render(this.viewer);
};

ObjectRenderer.prototype.extractLDO = function (extracts) {
  extracts["rdf:type"] = this.objframe.cls;
  var full = {};
  full[this.subject()] = extracts;
  return full;
};

ObjectRenderer.prototype.extractJSONLD = function (extracts) {
  extracts["@type"] = this.objframe.cls;
  if (this.subject() != "_:") extracts["@id"] = this.subject();
  if (this.objframe.jsonld_context) extracts['@context'] = this.objframe.jsonld_context;
  return extracts;
};

ObjectRenderer.prototype.extract = function () {
  var extracts = {};

  for (var i in this.properties) {
    var extracted = this.properties[i].extract();

    if (!FrameHelper.empty(extracted)) {
      extracts[i] = extracted;
    }
  }

  if (FrameHelper.empty(extracts) && this.parent) {
    return false;
  } else {
    return this.extractJSONLD(extracts); //return this.extractLDO(extracts);
  }
};

module.exports = ObjectRenderer;

/***/ }),

/***/ "./src/client/ObjectViewer.js":
/*!************************************!*\
  !*** ./src/client/ObjectViewer.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Object for producing a HTML view of a given object in a frame
 */
var HTMLFrameHelper = __webpack_require__(/*! ./HTMLFrameHelper */ "./src/client/HTMLFrameHelper.js");

function HTMLObjectViewer(renderer) {
  this.renderer = renderer;
  this.properties = [];
  this.headerViewer = renderer.getObjectHeaderViewer(); //this.featureViewers = {};
}
/**
 * Functions for rendering / re-rendering the object as header and body components
 */


HTMLObjectViewer.prototype.render = function () {
  if (this.renderedDOM) {
    var renderedDOM = this.getObjectDOM();
    this.renderedDOM.replaceWith(renderedDOM);
    this.renderedDOM = renderedDOM;
  } else {
    this.renderedDOM = this.getObjectDOM();
  }

  this.renderedDOM.appendChild(this.getObjectIDMarker(this.renderer));

  if (this.headerViewer) {
    this.header = this.headerViewer.getAsDOM(this.renderer);
    if (this.header) this.renderedDOM.appendChild(this.header);
  }

  this.body = this.getObjectBodyDOM();
  if (this.body) this.renderedDOM.appendChild(this.body);
  return this.renderedDOM;
};

HTMLObjectViewer.prototype.getObjectDOM = function () {
  var orientation = this.renderer.getContentOrientation();
  var pcls = "terminus-object-frame-" + orientation;

  if (orientation == "page") {
    var sp = document.createElement("div");
  } else {
    var sp = document.createElement("span");
  }

  var css = "terminus-object-frame " + pcls + (this.renderer.parent ? "" : " terminus-root-frame") + " terminus-object-frame-" + this.renderer.mode;
  sp.setAttribute("class", css);
  sp.setAttribute("data-class", this.renderer.subjectClass());
  sp.setAttribute("data-id", this.renderer.subject());
  return sp;
};

HTMLObjectViewer.prototype.getObjectBodyDOM = function () {
  var orientation = this.renderer.getContentOrientation();
  var pcls = "terminus-object-properties-" + orientation;

  if (orientation == "page") {
    var vholder = document.createElement("div");
  } else {
    var vholder = document.createElement("span");
  }

  vholder.setAttribute('class', 'terminus-object-properties ' + pcls);

  for (var prop in this.properties) {
    if (this.properties[prop]) vholder.appendChild(this.properties[prop]);
  }

  return vholder;
};

HTMLObjectViewer.prototype.getFeatureDOM = function (feature) {
  if (this.hasFeatureViewer(feature)) {
    return this.featureViewer[feature](this.renderer, this);
  }
};

HTMLObjectViewer.prototype.redraw = function () {
  FrameHelper.removeChildren(this.renderedDOM);
  this.properties = [];
  this.renderer.render(this);
};

HTMLObjectViewer.prototype.redrawHeader = function () {
  if (this.headerViewer && this.header) {
    var nheader = this.headerViewer.getAsDOM(this.renderer);
    this.header.replaceWith(nheader);
    this.header = nheader;
  }
};

HTMLObjectViewer.prototype.redrawBody = function () {
  if (this.body) {
    var nbody = this.getObjectBodyDOM();
    this.body.replaceWith(nbody);
    this.body = nbody;
  }
};
/**
 * Adds a rendered version of a property to the internal properties array
 */


HTMLObjectViewer.prototype.addRenderedProperty = function (prop, renderedprop) {
  this.properties[prop] = renderedprop;
};

HTMLObjectViewer.prototype.clear = function () {
  FrameHelper.removeChildren(this.renderedDOM);
  this.properties = {};
};
/**
 * Removes the object from the dom
 */


HTMLObjectViewer.prototype.remove = function () {
  this.renderedDOM.parentNode.removeChild(this.renderedDOM);
};

HTMLObjectViewer.prototype.goTo = function (subj, property) {
  HTMLFrameHelper.goToName(subj, property);
};
/**
 * Generates a html anchor element to use as a marker to find the object on the page
 */


HTMLObjectViewer.prototype.getObjectIDMarker = function (renderer) {
  var idm = document.createElement("a");
  idm.setAttribute("class", "terminus-object-idmarker");
  var sh = FrameHelper.getShorthand(renderer.subject());
  if (!sh) sh = renderer.subject();

  if (sh) {
    var bits = sh.split(":");
    if (bits.length > 1) sh = bits[1];
    idm.setAttribute("name", sh);
  }

  return idm;
};

function HTMLObjectHeaderViewer() {}

HTMLObjectHeaderViewer.prototype.getAsDOM = function (renderer) {
  var orientation = renderer.getContentOrientation();
  var pcls = "terminus-object-frame-btn terminus-object-header-" + orientation;

  if (orientation == "page") {
    var objDOM = document.createElement("div");
  } else {
    var objDOM = document.createElement("span");
  }

  objDOM.setAttribute("class", "terminus-object-header " + pcls);

  if (renderer.showFeature("facet")) {
    var facetDOM = this.getObjectFacetDOM(renderer);
    if (facetDOM) objDOM.appendChild(facetDOM);
  }

  if (renderer.showFeature("label")) {
    var sumDOM = this.getObjectLabelDOM(renderer);
    if (sumDOM) objDOM.appendChild(sumDOM);
  }

  if (renderer.showFeature("id")) {
    var idDOM = this.getObjectIDDOM(renderer);
    if (idDOM) objDOM.appendChild(idDOM);
  }

  if (renderer.showFeature("type")) {
    var typeDOM = this.getObjectTypeDOM(renderer);
    if (typeDOM) objDOM.appendChild(typeDOM);
  }

  if (renderer.showFeature("status")) {
    var sumDOM = this.getObjectStatusDOM(renderer);
    if (sumDOM) objDOM.appendChild(sumDOM);
  }

  if (renderer.showFeature("view")) {
    var viewDOM = this.getViewPropertyDOM(renderer);
    if (viewDOM) objDOM.appendChild(viewDOM);
  }

  if (renderer.showFeature("viewer")) {
    var hideDOM = this.getViewerSelectorDOM(renderer);
    if (hideDOM) objDOM.appendChild(hideDOM);
  }

  if (renderer.showFeature("add")) {
    var addDOM = this.getAddPropertyDOM(renderer);
    if (addDOM) objDOM.appendChild(addDOM);
  }

  if (renderer.showFeature("control")) {
    var controlsDOM = this.getObjectControlsDOM(renderer);
    if (controlsDOM) objDOM.appendChild(controlsDOM);
  }

  if (renderer.showFeature("summary")) {
    var controlsDOM = this.getObjectSummaryDOM(renderer);
    if (controlsDOM) objDOM.appendChild(controlsDOM);
  }

  objDOM.addEventListener('click', function () {
    if (this.nextSibling.style.display == 'block' || this.nextSibling.style.display == '') this.nextSibling.style.display = 'none';else this.nextSibling.style.display = 'block';
  });
  return objDOM;
};

HTMLObjectHeaderViewer.prototype.getObjectSummaryDOM = function (renderer) {
  var sum = renderer.getSummary();
  return HTMLFrameHelper.getInfoboxDOM("object-summary", false, sum["long"], sum.status);
};

HTMLObjectHeaderViewer.prototype.getObjectControlsDOM = function (renderer) {
  var controlsDOM = document.createElement("span");
  controlsDOM.setAttribute("class", "terminus-object-controls");

  if (renderer.showFeature("mode")) {
    var viewsDOM = HTMLFrameHelper.getModeSelectorDOM("object", renderer);
    if (viewsDOM) controlsDOM.appendChild(viewsDOM);
  }

  if (renderer.showFeature("delete")) {
    var dpropDOM = this.getObjectDeleteDOM(renderer);
    if (dpropDOM) controlsDOM.appendChild(dpropDOM);
  }

  if (renderer.showFeature("clone")) {
    var cpropDOM = this.getObjectCloneDOM(renderer);
    if (cpropDOM) controlsDOM.appendChild(cpropDOM);
  }

  if (renderer.showFeature("reset")) {
    var rpropDOM = this.getObjectResetDOM(renderer);
    if (rpropDOM) controlsDOM.appendChild(rpropDOM);
  }

  if (renderer.showFeature("update")) {
    var upropDOM = this.getObjectUpdateDOM(renderer);
    if (upropDOM) controlsDOM.appendChild(upropDOM);
  }

  if (renderer.showFeature("show")) {
    var showDOM = this.getObjectShowDOM(renderer);
    if (showDOM) controlsDOM.appendChild(showDOM);
  }

  if (renderer.showFeature("hide")) {
    var hideDOM = this.getObjectHideDOM(renderer);
    if (hideDOM) controlsDOM.appendChild(hideDOM);
  }

  return controlsDOM;
};

HTMLObjectHeaderViewer.prototype.getObjectFacetDOM = function (renderer) {
  var viewables = renderer.getAvailableFacets();
  var self = this;

  if (viewables && viewables.length) {
    var mpropDOM = document.createElement("span");
    mpropDOM.setAttribute("class", "terminus-object-facet");

    var callback = function callback(val) {
      if (val) {
        renderer.setFacet(val);
      }
    };

    var sel = HTMLFrameHelper.getSelectionControl("object-facet", viewables, renderer.currentFacet(), callback);
    mpropDOM.appendChild(sel);
    return mpropDOM;
  }

  return false;
};

HTMLObjectHeaderViewer.prototype.getObjectLabelDOM = function (renderer) {
  var lab = renderer.getLabel();

  if (lab) {
    return HTMLFrameHelper.getInfoboxDOM("object-label", false, lab);
  }

  return false;
};

HTMLObjectHeaderViewer.prototype.getObjectIDDOM = function (renderer) {
  var val = renderer.subject();
  var input = false;

  if (renderer.mode == "edit" && renderer.isNewDocument()) {
    if (renderer.idDOM) val = renderer.idDOM.value;
    input = document.createElement("input");
    input.setAttribute("class", "terminus-object-id-input");
    if (val == "_:") val = "";
    renderer.idDOM = input;
  } else {
    if (renderer.isNewDocument() && val == "_:") val = "New Document";
  }

  return HTMLFrameHelper.getInfoboxDOM("object-id", "ID", val, "Every fragment of data is identified by a unique URL", input);
};

HTMLObjectHeaderViewer.prototype.getObjectTypeDOM = function (renderer) {
  if (renderer.mode == "edit" && renderer.parent && renderer.parent.isClassChoice() && renderer.isNew()) {
    var cs = renderer.parent.getAvailableClassChoices();

    if (cs && cs.length) {
      var mpropDOM = document.createElement("span");
      mpropDOM.setAttribute("class", "terminus-property-change-class");
      var mlabDOM = document.createElement("span");
      mlabDOM.setAttribute("class", "terminus-property-change-label");
      mlabDOM.appendChild(document.createTextNode("Type"));
      mpropDOM.appendChild(mlabDOM);

      var callback = function callback(cls) {
        if (cls) {
          renderer.changeClass(cls);
        }
      };

      var sel = HTMLFrameHelper.getSelectionControl("change-class", cs, renderer.subjectClass(), callback);
      mpropDOM.appendChild(sel);
      return mpropDOM;
    }
  }

  var cm = renderer.getClassMeta(renderer.subjectClass());
  var lab = renderer.subjectClass();
  var cmt = "All objects have types, identified by a unique URL";

  if (cm) {
    lab = cm.Label && cm.Label["@value"] ? cm.Label["@value"] : lab;
    cmt = cm.Comment && cm.Comment["@value"] ? renderer.subjectClass() + " " + cm.Comment["@value"] : cmt;
  }

  return HTMLFrameHelper.getInfoboxDOM("object-type", "Type", lab, cmt);
};

HTMLObjectHeaderViewer.prototype.getObjectStatusDOM = function (renderer) {
  var sum = renderer.getSummary();
  return HTMLFrameHelper.getInfoboxDOM("status-" + sum.status, false, sum.status, sum.status);
};

HTMLObjectHeaderViewer.prototype.getAddPropertyDOM = function (renderer) {
  var addables = renderer.getAddableProperties();

  if (addables && addables.length) {
    var mpropDOM = document.createElement("span");
    mpropDOM.setAttribute("class", "terminus-object-add-property");
    addables.unshift({
      value: "",
      label: "Add New Property"
    });

    var callback = function callback(add) {
      if (add) {
        renderer.addNewProperty(add);
      }
    };

    var disabled = renderer.cardControlAllows("add") ? false : "Cardinality Rules Forbid Add";
    var sel = HTMLFrameHelper.getSelectionControl("add-property", addables, "", callback, disabled);
    mpropDOM.appendChild(sel);
    return mpropDOM;
  }

  return false;
};

HTMLObjectHeaderViewer.prototype.getViewPropertyDOM = function (renderer) {
  var viewables = renderer.getViewableProperties();
  var self = this;

  if (viewables && viewables.length) {
    var mpropDOM = document.createElement("span");
    mpropDOM.setAttribute("class", "terminus-object-view-property");
    viewables.unshift({
      value: "",
      label: "View Property"
    });

    var callback = function callback(add) {
      if (add) {
        renderer.goToProperty(add);
      }
    };

    var sel = HTMLFrameHelper.getSelectionControl("view-property", viewables, "", callback);
    mpropDOM.appendChild(sel);
    return mpropDOM;
  }

  return false;
};

HTMLObjectHeaderViewer.prototype.getObjectDeleteDOM = function (renderer) {
  var callback = function callback() {
    renderer["delete"]();
  };

  var disabled = renderer.cardControlAllows("delete") ? false : "Cardinality Rules Forbid Delete";
  return HTMLFrameHelper.getActionControl("object", "delete", "Delete", callback, disabled);
};

HTMLObjectHeaderViewer.prototype.getObjectCloneDOM = function (renderer) {
  var callback = function callback() {
    renderer.clone();
  };

  var disabled = renderer.cardControlAllows("clone") ? false : "Cardinality Rules Forbid Clone";
  return HTMLFrameHelper.getActionControl("object", "clone", "Clone", callback, disabled);
};

HTMLObjectHeaderViewer.prototype.getObjectResetDOM = function (renderer) {
  var callback = function callback() {
    renderer.reset();
  };

  var disabled = renderer.isUpdated() ? false : "Nothing to reset";
  return HTMLFrameHelper.getActionControl("object", "reset", "Reset", callback, disabled);
};

HTMLObjectHeaderViewer.prototype.getViewerSelectorDOM = function (renderer) {
  var viewers = renderer.getAvailableViewers();

  if (viewers && viewers.length) {
    var mpropDOM = document.createElement("span");
    mpropDOM.setAttribute("class", "terminus-object-viewer");

    var callback = function callback(viewer) {
      if (viewer) {
        renderer.setViewer(viewer);
      }
    };

    var selected = renderer.currentViewer();
    var sel = HTMLFrameHelper.getSelectionControl('object-viewer', viewers, selected, callback);
    mpropDOM.appendChild(sel);
    return mpropDOM;
  }

  return false;
};

HTMLObjectHeaderViewer.prototype.getObjectHideDOM = function (renderer) {
  var callback = function callback() {
    renderer.hide();
  };

  return HTMLFrameHelper.getActionControl("object", "hide", "Hide", callback);
};

HTMLObjectHeaderViewer.prototype.getObjectShowDOM = function (renderer) {
  var callback = function callback() {
    renderer.show();
  };

  return HTMLFrameHelper.getActionControl("object", "show", "Show", callback);
};

HTMLObjectHeaderViewer.prototype.getObjectUpdateDOM = function (renderer) {
  var dpropDOM = document.createElement("span");
  dpropDOM.setAttribute("class", "terminus-object-update");

  if (renderer.isNewDocument()) {
    var disabled = false; //(renderer.isUpdated() ? false : "No changes");
  } else {
    var disabled = renderer.isUpdated() ? false : "No changes";
  }

  var saveback = function saveback() {
    renderer.save();
  };

  dpropDOM.appendChild(HTMLFrameHelper.getActionControl("object", "save", "Save", saveback, disabled));
  return dpropDOM;
};

module.exports = {
  HTMLObjectViewer: HTMLObjectViewer,
  HTMLObjectHeaderViewer: HTMLObjectHeaderViewer
};

/***/ }),

/***/ "./src/client/PropertyRenderer.js":
/*!****************************************!*\
  !*** ./src/client/PropertyRenderer.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

var ObjectRenderer = __webpack_require__(/*! ./ObjectRenderer */ "./src/client/ObjectRenderer.js");

var ValueRenderer = __webpack_require__(/*! ./ValueRenderer */ "./src/client/ValueRenderer.js");

var RenderingMap = __webpack_require__(/*! ./RenderingMap */ "./src/client/RenderingMap.js");

function PropertyRenderer(prop, parent, options) {
  /*
  if(options && options.features){
  	this.features = options.features;
  }
  else {
  	this.features = ["body", "type", "cardinality", "summary", "label", "status", "facet", "control", "viewer", "view", "comment", "id", "toolbox", "help	"];
  }
  if(options && options.controls){
  	this.controls = options.controls;
  }
  else {
  	this.controls = ["delete", "clone", "add", "reset", "cancel", "update", "mode", "show", "hide"];
  }*/
  this.predicate = prop;
  this.parent = parent;
  this.cframe = this.parent.objframe.getPropertyClassFrame(this.predicate);
  this.options = this.setOptions(options);
  this.originalValues = false;
  this.changed = false;
  this.values = [];
}

PropertyRenderer.prototype.setOptions = function (options) {
  return RenderingMap.decorateRenderer(options, this);
  /*options = (options ? options : {});
  if(options.mode) this.mode = options.mode;
  else {
  	this.mode = (this.parent && this.parent.mode ? this.parent.mode : "view");
  	options.mode = this.mode;
  }
  if(options.view) this.view = options.view;
  else {
  	this.view = (this.parent && this.parent.view ? this.parent.view : "full");
  	options.view = this.view;
  }
  if(options.viewer) this.viewerType = options.viewer;
  else this.viewerType = this.getViewerForDataValue();
  if(options.facet) this.facet = options.facet;
  else this.facet = this.getDefaultFacet();
  this.hide_disabled_controls = (options && options.hide_disabled_controls ? options.hide_disabled_controls : true);
  this.facets = {
  	icon: 	["facet", "summary"],
  	label: 	["facet", "status", "label", "summary"],
  	summary: ["facet", "satus", "label", "type", "cardinality", "body", "status", "facet", "viewer"],
  	line: ["facet", "label", "comment", "id", "control", "type", "cardinality", "body", "status", "facet", "viewer"].concat(this.controls),
  	multiline: ["facet", "label", "comment", "id", "control", "type", "cardinality", "body", "status", "facet", "view", "viewer"].concat(this.controls),
  	page: ["facet", "label", "comment", "id", "control", "type", "cardinality", "body", "status", "facet", "view", "viewer"].concat(this.controls)
  }
  if(options && options.facets){
  	for(var facet in options.facets){
  		this.facets[facet] = options.facets[facet];
  	}
  }*/

  return options;
};

PropertyRenderer.prototype.getOptionsForChild = function () {
  var opts = {};

  if (this.options.features) {
    opts.features = this.options.features;
  }

  ;

  if (this.options.controls) {
    opts.controls = this.options.controls;
  }

  ; //return opts;

  return this.options;
};

PropertyRenderer.prototype.getOptionsForValue = function (df, index) {
  return this.getOptionsForChild();
};

PropertyRenderer.prototype.getOptionsForObject = function (objframe) {
  return this.getOptionsForChild();
};

PropertyRenderer.prototype.render = function (viewer) {
  this.buildValueRenderers();

  if (this.cframe && this.cframe.property) {
    this.viewer = viewer ? viewer : this.getViewerForProperty();

    for (var i = 0; i < this.values.length; i++) {
      var renderedval = this.values[i].render();
      if (renderedval && this.showFeature("body")) this.viewer.addRenderedValue(renderedval);
    }

    return this.viewer.render();
  }
};
/*
 * Creates the array of object renderer or value renderer objects corresponding to the property values. 
 */


PropertyRenderer.prototype.buildValueRenderers = function () {
  var adorig = this.originalValues === false ? true : false;
  this.cframe = this.parent.objframe.getPropertyClassFrame(this.predicate);

  if (!this.cframe) {
    console.error("No frame for " + this.property() + " id: " + this.subject());
    return false;
  }

  if (this.cframe && this.cframe.isData()) {
    var dataframes = this.getDataFramesToRender();

    if (dataframes.length == 0) {
      alert(this.predicate);
    }

    var vals = [];

    for (var i = this.values.length; i < dataframes.length; i++) {
      var vr = new ValueRenderer(dataframes[i], i, this, this.getOptionsForValue(dataframes[i], i));
      this.values.push(vr);
      vals.push(vr.value());
    }

    if (adorig) this.originalValues = vals;
  } else {
    if (adorig) this.originalValues = [];
    var kids = this.getChildrenToRender();

    if (kids && kids.length) {
      for (var i = this.values.length; i < kids.length; i++) {
        var kidf = new ObjectRenderer(kids[i], this, this.getOptionsForObject(kids[i]));
        if (adorig) this.originalValues.push(kidf.subject());
        this.values.push(kidf);
      }
    }
  }
};
/*
 * Returns the array of values that should be rendered (enables value filtering)
 */


PropertyRenderer.prototype.getDataFramesToRender = function (options) {
  var allvals = this.parent.objframe.getDataFrames(this.property());
  return allvals;
};
/*
 * Returns the array of child / objects that should be rendered (enables value filtering)
 */


PropertyRenderer.prototype.getChildrenToRender = function (options) {
  /*var sort = this.standardSort;
  var filter = function(){return true};
  for(var i = 0; i<options.map.patterns.length; i++){
  	if(this.objframe.matchesPattern("sort", options.map.patterns[i])){
  		sort = options.map.patterns[i].sort;
  	}
  	if(this.objframe.matchesPattern("filter", options.map.patterns[i])){
  		filter = options.map.patterns[i].filter;
  	}
  }
  return sort(this.values, filter);*/
  if (FrameHelper.viewIncludesChildren(this.view, "property")) {
    var allkids = this.parent.objframe.getChildren(this.property());
  } else {
    var allkids = [];
  }

  return allkids;
};

PropertyRenderer.prototype.redraw = function () {
  this.viewer.clear();
  this.render(this.viewer);
};

PropertyRenderer.prototype.extract = function () {
  var extracts = [];

  for (var i = 0; i < this.values.length; i++) {
    var val = this.values[i].extract();
    if (val !== "" && typeof val != "undefined") extracts.push(val);
  }

  if (this.cframe.isData()) {
    return extracts;
  } else {
    var extr = {};

    for (var i = 0; i < extracts.length; i++) {
      for (var subjid in extracts[i]) {
        extr[subjid] = extracts[i][subjid];
      }
    }

    return extr;
  }
};
/*
 * simple wrapper functions
 */


PropertyRenderer.prototype.currentViewer = function () {
  return this.viewerType;
};

PropertyRenderer.prototype.property = function () {
  return this.predicate;
};

PropertyRenderer.prototype.subject = function () {
  return this.parent ? this.parent.subject() : false;
};

PropertyRenderer.prototype.depth = function () {
  return this.parent ? this.parent.depth() : false;
};

PropertyRenderer.prototype.subjectClass = function () {
  return this.parent ? this.parent.subjectClass() : false;
};

PropertyRenderer.prototype.updated = function () {
  return this.parent ? this.parent.childUpdated() : false;
};

PropertyRenderer.prototype.range = function () {
  return this.cframe ? this.cframe.range : "";
};

PropertyRenderer.prototype.getLabel = function () {
  return this.cframe ? this.cframe.getLabel() : "";
};

PropertyRenderer.prototype.getComment = function () {
  return this.cframe ? this.cframe.getComment() : false;
};

PropertyRenderer.prototype.load = function (link) {
  return this.parent ? this.parent.load(link) : false;
};

PropertyRenderer.prototype.hasCardinalityRestriction = function () {
  return this.cframe ? this.cframe.hasRestriction() : false;
};

PropertyRenderer.prototype.getRestriction = function () {
  return this.cframe ? this.cframe.restriction : false;
};

PropertyRenderer.prototype.isClassChoice = function () {
  return this.cframe ? this.cframe.isClassChoice() : false;
};

PropertyRenderer.prototype.currentFacet = function () {
  return this.facet;
};

PropertyRenderer.prototype.save = function () {
  return this.parent ? this.parent.save() : false;
};

PropertyRenderer.prototype.cancel = function () {
  this.reset();
  this.setMode("view");
};

PropertyRenderer.prototype.getAvailableClassChoices = function () {
  if (this.cframe) {
    var cf = this.cframe.getClassChoices();

    if (this.parent) {
      var choices = [];

      for (var i = 0; i < cf.length; i++) {
        var clsmeta = this.parent.getClassMeta(cf[i]);
        var lab = clsmeta && clsmeta.Label && clsmeta.Label["@value"] ? clsmeta.Label["@value"] : FrameHelper.labelFromURL(cf[i]);
        choices.push({
          value: cf[i],
          label: lab
        });
      }

      return choices;
    }

    return cf;
  }

  return false;
};

PropertyRenderer.prototype["delete"] = function () {
  var prop = this.predicate;

  if (prop) {
    this.reset();
    this.parent.deleteProperty(prop);
    this.parent.redraw();
  }
};

PropertyRenderer.prototype.add = function (view) {
  this.parent.addProperty(this.property(), view);
  this.updated();

  if (view) {
    this.values[this.values.length - 1].setMode(view);
    this.values[this.values.length - 1].setNew();
  }

  this.redraw();
  this.goToValue(this.values.length - 1);
};

PropertyRenderer.prototype.goToValue = function (index) {
  this.viewer.goTo(this.subject(), this.property(), index);
};

PropertyRenderer.prototype.addClass = function (cls) {
  this.parent.addPropertyClass(this.property(), cls);
  this.updated();
  var newb = this.values[this.values.length - 1];

  if (newb) {
    newb.setNew();
    newb.setMode("edit");
  }

  this.redraw();
  if (newb) this.viewer.goTo(newb.subject());
};

PropertyRenderer.prototype.reset = function () {
  this.parent.objframe.reset(this.predicate);

  if (this.cframe && this.cframe.isData()) {
    for (var i = 0; i < this.values.length; i++) {
      this.values[i].reset();
    }

    this.values = [];
  } else {
    var nvals = [];

    for (var i = 0; i < this.originalValues.length; i++) {
      for (var j = 0; j < this.values.length; j++) {
        this.values[j].reset();

        if (this.values[j].subject() == this.originalValues[i]) {
          nvals.push(this.values[j]);
        }
      }
    }

    this.values = nvals;
  }

  this.redraw();
  this.parent.childUpdated();
};

PropertyRenderer.prototype.deletePropertyValue = function (value, index) {
  this.parent.objframe.removePropertyValue(this.property(), value, index);
  var nvals = [];

  for (var i = 0; i < this.values.length; i++) {
    if (typeof index == "undefined") {
      if (this.values[i].subject() == value) {
        this.values[i].reset();
      } else {
        nvals.push(this.values[i]);
      }
    } else if (i != index) {
      this.values[i].index = nvals.length;
      nvals.push(this.values[i]);
    } else {
      this.values[i].reset();
    }
  }

  this.values = nvals;
  this.parent.childUpdated();
  this.parent.redraw();
};

PropertyRenderer.prototype.addPropertyValue = function (value) {
  this.updated();
  return this.parent.objframe.addPropertyValue(this.property(), value);
};
/*
 * Checks to see if an action (add, clone, delete) which affects the cardinality of the property is allowed by cardinality rules.
 */


PropertyRenderer.prototype.cardControlAllows = function (action) {
  if (this.cframe.hasRestriction()) {
    var rest = this.cframe.restriction;
    var currentnum = this.values.length;

    if (action == "add" || action == "clone") {
      if (rest.max && currentnum >= rest.max) {
        return false;
      }
    }

    if (action == "delete" && rest.min) {
      return false;
    }
  }

  return true;
};

PropertyRenderer.prototype.isNew = function () {
  if (this.new_property) {
    return true;
  }

  return this.parent.isNew();
};

PropertyRenderer.prototype.setNew = function () {
  this.new_property = true;
};

PropertyRenderer.prototype.isUpdated = function () {
  if (this.values.length != this.originalValues.length) return true;

  for (var i = 0; i < this.values.length; i++) {
    if (this.cframe && this.cframe.isData()) {
      if (this.values[i].value() != this.originalValues[i]) {
        return true;
      }
    } else {
      if (this.values[i].subject() != this.originalValues[i]) {
        return true;
      }

      if (this.values[i].isUpdated()) {
        return true;
      }
    }
  }

  return false;
};

PropertyRenderer.prototype.childUpdated = function () {
  this.viewer.redrawHeader();
  if (this.parent) this.parent.childUpdated();
};
/**
 * Sets mode of viewer to either "view" or "edit"
 */


PropertyRenderer.prototype.setMode = function (mode) {
  this.mode = mode;

  for (var i = 0; i < this.values.length; i++) {
    this.values[i].setMode(mode);
  }

  this.redraw();
};
/*
 * Jump to property value
 */


PropertyRenderer.prototype.getViewableValues = function () {
  var viewables = [];
  if (this.cframe && this.cframe.isData()) for (var i = 0; i < this.values.length; i++) {
    var sum = this.values[i].getSummary();
    var lab = sum["long"];
    viewables.push({
      label: lab,
      value: i
    });
  }
  return viewables;
};

PropertyRenderer.prototype.hideDisabledControls = function () {
  return this.hide_disabled_controls;
};

PropertyRenderer.prototype.setFacet = function (facet, nocascade) {
  this.facet = facet;

  if (!nocascade) {
    for (var i = 0; i < this.values.length; i++) {
      this.values[i].parentFacetChange(facet);
    }
  }

  this.redraw();
};

PropertyRenderer.prototype.parentFacetChange = function (facet) {
  if (facet == 'page') {
    if (!(this.facet == "page" || this.facet == "multiline")) {
      this.setFacet('multiline');
    }
  }

  if (facet == 'line') {
    this.setFacet("label");
  }
};

PropertyRenderer.prototype.getDefaultFacets = function () {
  var defs = {
    page: {
      label: "Full Page",
      value: "page",
      features: ["facet", "label", "comment", "id", "control", "type", "cardinality", "body", "status", "facet", "view", "viewer"],
      controls: ["delete", "clone", "add", "reset", "cancel", "update", "mode", "show", "hide"]
    },
    multiline: {
      label: "Multiple Lines",
      value: "multiline",
      features: ["facet", "label", "comment", "id", "control", "type", "cardinality", "body", "status", "facet", "view", "viewer"],
      controls: ["delete", "clone", "add", "reset", "cancel", "update", "mode", "show", "hide"]
    },
    line: {
      label: "Single Line",
      value: "line",
      features: ["facet", "label", "comment", "id", "control", "type", "cardinality", "body", "status", "facet", "viewer"],
      controls: ["delete", "clone", "add", "reset", "cancel", "update", "mode", "show", "hide"]
    },
    summary: {
      label: "Summary",
      value: "summary",
      features: ["facet", "satus", "label", "type", "cardinality", "body", "status", "facet", "viewer"],
      controls: []
    },
    label: {
      label: "Label",
      value: "label",
      features: ["facet", "status", "label", "summary"],
      controls: []
    },
    icon: {
      label: "Snippet",
      value: "icon",
      features: ["facet", "summary"],
      controls: []
    }
  };
  return defs;
};

PropertyRenderer.prototype.getAvailableFacets = function () {
  return Object.values(this.facets);
  var facets = [];
  facets.push({
    label: "Full Page",
    value: "page"
  });
  facets.push({
    label: "Multiple Lines",
    value: "multiline"
  });
  facets.push({
    label: "Single Line",
    value: "line"
  });
  facets.push({
    label: "Summary",
    value: "summary"
  });
  facets.push({
    label: "Label",
    value: "label"
  });
  facets.push({
    label: "Snippet",
    value: "icon"
  });
  return facets;
};

PropertyRenderer.prototype.getContentOrientation = function (facet) {
  if (this.currentFacet() == "page" || this.containsPage()) {
    return "page";
  }

  if (this.currentFacet() == "line" || this.currentFacet() == "multiline" || this.currentFacet() == "summary") {
    return "line";
  }

  return "label";
};

PropertyRenderer.prototype.getDefaultFacet = function () {
  if (this.cframe && this.cframe.isObject()) {
    return "page";
  }

  return "multiline";
};
/*
 * Viewers for specific properties
 */


PropertyRenderer.prototype.hide = function () {
  this.setView("hidden");
};

PropertyRenderer.prototype.show = function () {
  this.setView("full");
};

PropertyRenderer.prototype.setView = function (view) {
  this.view = view;
  this.redraw();
};

PropertyRenderer.prototype.getAvailableViewers = function () {
  if (this.mode == "view") {
    return RenderingMap.getAvailablePropertyViewers(this);
  }

  return RenderingMap.getAvailablePropertyEditors(this);
};

PropertyRenderer.prototype.getViewerForDataValue = function () {
  /*if(this.cframe && this.cframe.isData()){
  	var dt = this.cframe.getTypeShorthand();
  	var ft = this.cframe.ftype();
  	if(this.mode == "edit"){
  		return RenderingMap.getEditorForFrame(dt, ft);				
  	}
  	return RenderingMap.getViewerForFrame(dt, ft);		
  }*/
};

PropertyRenderer.prototype.setViewer = function (viewer) {//this.viewerType = viewer;
  //for(var i = 0; i<this.values.length; i++){
  //	this.values[i].setViewer(viewer);
  //}
  //this.redraw();
};

PropertyRenderer.prototype.nukeViewer = function () {
  this.viewer.remove();
};

PropertyRenderer.prototype.containsPage = function () {
  //collapsed facets do not show their values
  if (this.currentFacet() == "icon" || this.currentFacet() == "label") return false;

  for (var i = 0; i < this.values.length; i++) {
    if (this.values[i].facet == "page") {
      return true;
    }
  }

  return false;
};

PropertyRenderer.prototype.getViewerForProperty = function (ptype) {
  if (this.mode == "edit") {
    return RenderingMap.getEditorForProperty(ptype, this);
  }

  return RenderingMap.getViewerForProperty(ptype, this);
};

PropertyRenderer.prototype.getPropertyHeaderViewer = function () {
  return new HTMLPropertyHeaderViewer();
};

PropertyRenderer.prototype.getSummary = function () {
  var status = "ok";
  if (this.isNew()) status = "new";else if (this.isUpdated()) status = "updated";
  var ret = {
    status: status,
    valcount: this.values.length
  };
  ret["long"] = ret.valcount != 1 ? "(" + ret.valcount + ") " : "";

  for (var i = 0; i < this.values.length; i++) {
    vsum = this.values[i].getSummary();
    ret["long"] += vsum["long"];
    if (i < this.values.length - 1) ret["long"] += ", ";
  }

  return ret;
};

PropertyRenderer.prototype.getFeaturesForFacet = function (facet) {
  return this.facets[facet].features.concat(this.facets[facet].controls);
};

PropertyRenderer.prototype.showFeature = function (which) {
  if (this.features.indexOf(which) == -1 && this.controls.indexOf(which) == -1) {
    return false;
  }

  var cardcontrols = ["delete", "clone", "add"];

  if (cardcontrols.indexOf(which) != -1) {
    if (!this.cardControlAllows(which)) return false;
  }

  var updcontrols = ["update", "reset"];

  if (this.hideDisabledControls() && updcontrols.indexOf(which) != -1) {
    if (!this.isUpdated()) {
      return false;
    }
  }

  if (which == 'hide' && this.view == "hidden") return false;
  if (which == 'show' && this.view != "hidden") return false;
  var fets = this.getFeaturesForFacet(this.facet);
  return fets.indexOf(which) != -1;
};

module.exports = PropertyRenderer;

/***/ }),

/***/ "./src/client/PropertyViewer.js":
/*!**************************************!*\
  !*** ./src/client/PropertyViewer.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

var HTMLFrameHelper = __webpack_require__(/*! ./HTMLFrameHelper */ "./src/client/HTMLFrameHelper.js");
/**
 * Property Viewer
 */


function HTMLPropertyViewer(renderer) {
  this.renderer = renderer;
  this.values = [];
  this.headerViewer = renderer.getPropertyHeaderViewer();
}
/**
 * Draws the property as header and body components
 */


HTMLPropertyViewer.prototype.render = function () {
  var block = document.createElement('div');
  block.setAttribute('style', 'display: flex; margin: 10px 10px 0px 0px;');
  var br = document.createElement('br');
  block.appendChild(br);

  if (this.propDOM) {
    var npropDOM = this.getPropertyDOM();
    block.appendChild(npropDOM);
    this.propDOM.replaceWith(npropDOM); //11092019 this.propDOM = npropDOM;

    this.propDOM = block;
  } else {
    block.appendChild(this.getPropertyDOM());
    this.propDOM = block; //11092019 this.propDOM = this.getPropertyDOM();
  }

  this.propDOM.appendChild(this.getPropertyIDMarker(this.renderer));

  if (this.headerViewer) {
    this.header = this.headerViewer.getAsDOM(this.renderer);
    if (this.header) this.propDOM.appendChild(this.header);
  }

  this.body = this.getPropertyBodyDOM();
  if (this.body) this.propDOM.appendChild(this.body);
  return this.propDOM;
};

HTMLPropertyViewer.prototype.getPropertyDOM = function () {
  var orientation = this.renderer.getContentOrientation();
  var pcls = " terminus-property-frame-display terminus-property-frame-" + orientation;

  if (orientation == "label") {
    var sp = document.createElement("span");
  } else {
    var sp = document.createElement("div");
  } //terminus-property-frame-spacer


  sp.setAttribute("class", "WHATER terminus-property-frame " + sp + " terminus-property-frame-" + this.renderer.mode + " " + pcls);
  sp.setAttribute('data-property', this.renderer.property());
  return sp;
};

HTMLPropertyViewer.prototype.getPropertyBodyDOM = function () {
  var orientation = this.renderer.getContentOrientation();
  var pcls = "terminus-property-values-" + orientation;

  if (orientation == "page") {
    var vholder = document.createElement("div");
  } else {
    var vholder = document.createElement("span");
  }

  vholder.setAttribute('class', 'terminus-property-values ' + pcls + ' terminus-property-values-align');

  for (var i = 0; i < this.values.length; i++) {
    vholder.appendChild(this.values[i]);
  }

  return vholder;
};

HTMLPropertyViewer.prototype.addRenderedValue = function (renderedval) {
  this.values.push(renderedval);
};

HTMLPropertyViewer.prototype.clear = function () {
  FrameHelper.removeChildren(this.propDOM);
  this.values = [];
};
/**
 * Removes the property from the dom
 */


HTMLPropertyViewer.prototype.remove = function () {
  this.propDOM.parentNode.removeChild(this.propDOM);
};
/**
 * Redraws the property to reflect an updated state
 */


HTMLPropertyViewer.prototype.redraw = function () {
  var npropDOM = this.getPropertyDOM();
  this.propDOM.replaceWith(npropDOM);
  this.propDOM = npropDOM;
  this.values = [];
  this.renderer.render(this);
};

HTMLPropertyViewer.prototype.redrawHeader = function () {
  if (this.headerViewer && this.header) {
    var nheader = this.headerViewer.getAsDOM(this.renderer);
    this.header.replaceWith(nheader);
    this.header = nheader;
  }
};

HTMLPropertyViewer.prototype.redrawBody = function () {
  if (this.body) {
    var nbody = this.getPropertyBodyDOM();
    this.body.replaceWith(nbody);
    this.body = nbody;
  }
};
/**
 * Generates a html anchor element to use as a marker to find the property on the page
 */


HTMLPropertyViewer.prototype.getPropertyIDMarker = function (renderer) {
  var idm = document.createElement("a");
  idm.setAttribute("class", "terminus-property-idmarker");
  var subj = FrameHelper.getShorthand(renderer.subject());
  if (!subj) subj = renderer.subject();
  var bits = subj.split(":");
  if (bits.length > 1) subj = bits[1];
  var prop = FrameHelper.getShorthand(renderer.property());
  if (!prop) prop = renderer.property();
  var bits = prop.split(":");
  if (bits.length > 1) prop = bits[1];
  idm.setAttribute("name", subj + "_" + prop);
  return idm;
};

HTMLPropertyViewer.prototype.goTo = function (subj, property, index) {
  HTMLFrameHelper.goToName(subj, property, index);
};

function HTMLPropertyHeaderViewer() {}

HTMLPropertyHeaderViewer.prototype.getAsDOM = function (renderer) {
  var orientation = renderer.getContentOrientation();
  var pcls = "terminus-property-header-" + orientation;

  if (orientation == "page") {
    var objDOM = document.createElement("div");
  } else {
    var objDOM = document.createElement("span");
  }

  objDOM.setAttribute("class", "terminus-text terminus-property-header " + pcls);
  var wrapper = document.createElement("span");
  wrapper.setAttribute("class", "terminus-property-header-wrapper");

  if (renderer.showFeature("control")) {
    var controlsDOM = this.getPropertyControlsDOM(renderer);
    if (controlsDOM) wrapper.appendChild(controlsDOM);
  }

  if (renderer.showFeature("label")) {
    var sumDOM = this.getPropertyLabelDOM(renderer);

    if (renderer.showFeature("status")) {
      var statDOM = this.getPropertyStatusDOM(renderer);
      if (statDOM) sumDOM.prepend(statDOM);
    }

    if (sumDOM) wrapper.appendChild(sumDOM);
  } else if (renderer.showFeature("status")) {
    var statDOM = this.getPropertyStatusDOM(renderer);
    if (statDOM) wrapper.appendChild(statDOM);
  }

  if (renderer.showFeature("summary")) {
    var sumDOM = this.getPropertySummaryDOM(renderer);
    if (sumDOM) wrapper.appendChild(sumDOM);
  }

  var prelude = document.createElement("span");
  prelude.setAttribute("class", "terminus-property-header-info terminus-property-header-info-" + renderer.currentFacet());

  if (renderer.showFeature("facet")) {
    var facetDOM = this.getPropertyFacetDOM(renderer);
    if (facetDOM) prelude.appendChild(facetDOM);
  }

  if (renderer.showFeature("view")) {
    var viewDOM = this.getViewValueDOM(renderer);
    if (viewDOM) prelude.appendChild(viewDOM);
  }

  if (renderer.showFeature("id")) {
    var idDOM = this.getPropertyIDDOM(renderer);
    if (idDOM) prelude.appendChild(idDOM);
  }

  if (renderer.showFeature("type")) {
    var typeDOM = this.getPropertyRangeDOM(renderer);
    if (typeDOM) prelude.appendChild(typeDOM);
  }

  if (renderer.showFeature("cardinality") && renderer.hasCardinalityRestriction()) {
    var hideDOM = this.getPropertyCardinalityDOM(renderer);
    if (hideDOM) prelude.appendChild(hideDOM);
  }

  if (renderer.showFeature("comment")) {
    var sumDOM = this.getPropertyCommentDOM(renderer);
    if (sumDOM) prelude.appendChild(sumDOM);
  }

  wrapper.appendChild(prelude);
  objDOM.appendChild(wrapper);
  return objDOM;
};

HTMLPropertyHeaderViewer.prototype.getPropertyFacetDOM = function (renderer) {
  var viewables = renderer.getAvailableFacets();
  var self = this;

  if (viewables && viewables.length) {
    var mpropDOM = document.createElement("span");
    mpropDOM.setAttribute("class", "terminus-property-facet");

    var callback = function callback(val) {
      if (val) {
        renderer.setFacet(val);
      }
    };

    var sel = HTMLFrameHelper.getSelectionControl("property-facet", viewables, renderer.currentFacet(), callback);
    mpropDOM.appendChild(sel);
    return mpropDOM;
  }

  return false;
};

HTMLPropertyHeaderViewer.prototype.getPropertyIDDOM = function (renderer) {
  return HTMLFrameHelper.getInfoboxDOM("property-id", "Property", renderer.property(), "This property is identified by this unique URL: " + renderer.property());
};

HTMLPropertyHeaderViewer.prototype.getPropertyRangeDOM = function (renderer) {
  return HTMLFrameHelper.getInfoboxDOM("property-type", "Type", renderer.range(), "The type of arguments that this property accepts");
};

HTMLPropertyHeaderViewer.prototype.getPropertySummaryDOM = function (renderer) {
  var sum = renderer.getSummary();
  return HTMLFrameHelper.getInfoboxDOM("property-summary", false, sum["long"], sum.status);
};

HTMLPropertyHeaderViewer.prototype.getPropertyStatusDOM = function (renderer) {
  var sum = renderer.getSummary();
  return HTMLFrameHelper.getInfoboxDOM("status-" + sum.status, false, sum.status, sum.status);
};

HTMLPropertyHeaderViewer.prototype.getPropertyLabelDOM = function (renderer) {
  var lab = renderer.getLabel();
  return HTMLFrameHelper.getInfoboxDOM("property-label", false, lab);
};

HTMLPropertyHeaderViewer.prototype.getPropertyCommentDOM = function (renderer) {
  var lab = renderer.getComment();
  return HTMLFrameHelper.getInfoboxDOM("property-comment", false, lab);
};

HTMLPropertyHeaderViewer.prototype.getPropertyCardinalityDOM = function (renderer) {
  var restriction = renderer.getRestriction();

  if (restriction.min && restriction.max) {
    if (restriction.min == restriction.max) {
      var lab = restriction.min;
      var help = "Cardinality: " + restriction.min;
    } else {
      var lab = restriction.min + "-" + restriction.max;
      var help = "Minimum Cardinality: " + restriction.min;
      help += ", Maximum Cardinality: " + restriction.max;
    }
  } else if (restriction.min) {
    var lab = ">" + (restriction.min - 1);
    var help = "Minimum Cardinality: " + restriction.min;
  } else if (restriction.max) {
    var lab = "<" + (restriction.max + 1);
    var help = "Maximum Cardinality: " + restriction.max;
  } else {
    return false;
  }

  return HTMLFrameHelper.getInfoboxDOM("property-cardinality", "Cardinality", lab, help);
};

HTMLPropertyHeaderViewer.prototype.getActionControlDOM = function (settingsDOM, renderer) {
  if (renderer.showFeature("mode")) {
    var viewsDOM = HTMLFrameHelper.getModeSelectorDOM("property", renderer);
    if (viewsDOM) settingsDOM.appendChild(viewsDOM);
  }

  if (renderer.showFeature("delete")) {
    var dpropDOM = this.getPropertyDeleteDOM(renderer);
    if (dpropDOM) settingsDOM.appendChild(dpropDOM);
  }

  if (renderer.showFeature("add") && !renderer.isClassChoice()) {
    var addDOM = this.getAddValueDOM(renderer);
    if (addDOM) settingsDOM.appendChild(addDOM);
  }

  if (renderer.showFeature("reset")) {
    var rpropDOM = this.getPropertyResetDOM(renderer);
    if (rpropDOM) settingsDOM.appendChild(rpropDOM);
  }

  if (renderer.showFeature("update")) {
    var upropDOM = this.getPropertyUpdateDOM(renderer);
    if (upropDOM) settingsDOM.appendChild(upropDOM);
  }

  if (renderer.showFeature("show")) {
    var showDOM = this.getPropertyShowDOM(renderer);
    if (showDOM) settingsDOM.appendChild(showDOM);
  }

  if (renderer.showFeature("hide")) {
    var hideDOM = this.getPropertyHideDOM(renderer);
    if (hideDOM) settingsDOM.appendChild(hideDOM);
  }

  if (renderer.showFeature("viewer")) {
    var hideDOM = this.getViewerSelectorDOM(renderer);
    if (hideDOM) settingsDOM.appendChild(hideDOM);
  }

  if (renderer.showFeature("add") && renderer.isClassChoice()) {
    var addDOM = this.getAddValueDOM(renderer);
    if (addDOM) settingsDOM.appendChild(addDOM);
  }
};

HTMLPropertyHeaderViewer.prototype.getSettingsControlDOM = function (controlsDOM, renderer) {
  var settings = document.createElement("div");
  var sControl = HTMLFrameHelper.getSettingsControl();
  var popup = document.createElement('div');
  popup.setAttribute('class', 'terminus-hide terminus-popup');
  popup.appendChild(document.createTextNode('blah blah'));
  sControl.appendChild(popup);
  sControl.addEventListener('click', function () {
    if (this.children[0].style.display == 'none') this.children[0].style.display = 'block';else this.children[0].style.display = 'block';
  });
  settings.appendChild(sControl);
  controlsDOM.appendChild(settings); // append action controls to pop up

  this.getActionControlDOM(popup, renderer);
};

HTMLPropertyHeaderViewer.prototype.getPropertyControlsDOM = function (renderer) {
  var controlsDOM = document.createElement("span");
  controlsDOM.setAttribute("class", "terminus-property-controls"); // get settings icon or button

  this.getSettingsControlDOM(controlsDOM, renderer);
  return controlsDOM;
};

HTMLPropertyHeaderViewer.prototype.getAddValueDOM = function (renderer) {
  if (renderer.isClassChoice()) {
    var cs = renderer.getAvailableClassChoices();

    if (cs && cs.length) {
      var mpropDOM = document.createElement("span");
      mpropDOM.setAttribute("class", "terminus-property-add-class");
      cs.unshift({
        value: "",
        label: "Add Type"
      });

      var callback = function callback(cls) {
        if (cls) {
          renderer.addClass(cls);
        }
      };

      var sel = HTMLFrameHelper.getSelectionControl("add-property", cs, "", callback);
      mpropDOM.appendChild(sel);
      return mpropDOM;
    }
  } else {
    var callback = function callback() {
      renderer.add("edit");
    };

    var disabled = renderer.cardControlAllows("add") ? false : "Cardinality Rules Forbid Add";
    return HTMLFrameHelper.getActionControl("property", "add", "Add", callback, disabled);
  }

  return false;
};

HTMLPropertyHeaderViewer.prototype.getViewValueDOM = function (renderer) {
  var viewables = renderer.getViewableValues();
  var self = this;

  if (viewables && viewables.length) {
    var mpropDOM = document.createElement("span");
    mpropDOM.setAttribute("class", "terminus-property-view-value");
    viewables.unshift({
      value: "",
      label: "View Value"
    });

    var callback = function callback(val) {
      renderer.goToValue(val);
    };

    var sel = HTMLFrameHelper.getSelectionControl("view-values", viewables, "", callback);
    mpropDOM.appendChild(sel);
    return mpropDOM;
  }

  return false;
};

HTMLPropertyHeaderViewer.prototype.getPropertyDeleteDOM = function (renderer) {
  var callback = function callback() {
    renderer["delete"]();
  };

  var disabled = renderer.cardControlAllows("delete") ? false : "Cardinality Rules Forbid Delete";
  return HTMLFrameHelper.getActionControl("property", "delete", "Delete", callback, disabled);
};

HTMLPropertyHeaderViewer.prototype.getPropertyHideDOM = function (renderer) {
  var callback = function callback() {
    renderer.hide();
  };

  return HTMLFrameHelper.getActionControl("property", "hide", "Hide", callback);
};

HTMLPropertyHeaderViewer.prototype.getPropertyResetDOM = function (renderer) {
  var callback = function callback() {
    renderer.reset();
  };

  var disabled = renderer.isUpdated() ? false : "Nothing to reset";
  return HTMLFrameHelper.getActionControl("property", "reset", "Reset", callback, disabled);
};

HTMLPropertyHeaderViewer.prototype.getPropertyShowDOM = function (renderer) {
  var callback = function callback() {
    renderer.show();
  };

  return HTMLFrameHelper.getActionControl("property", "show", "Show", callback);
};

HTMLPropertyHeaderViewer.prototype.getPropertyUpdateDOM = function (renderer) {
  var dpropDOM = document.createElement("span");
  dpropDOM.setAttribute("class", "terminus-property-update");
  var disabled = renderer.isUpdated() ? false : "No Change";

  var saveback = function saveback() {
    renderer.save();
  };

  dpropDOM.appendChild(HTMLFrameHelper.getActionControl("property", "save", "Save", saveback, disabled));
  return dpropDOM;
};

HTMLPropertyHeaderViewer.prototype.getViewerSelectorDOM = function (renderer) {
  var viewers = renderer.getAvailableViewers();

  if (viewers && viewers.length) {
    var mpropDOM = document.createElement("span");
    mpropDOM.setAttribute("class", "terminus-property-viewer");

    var callback = function callback(viewer) {
      if (viewer) {
        renderer.setViewer(viewer);
      }
    };

    var selected = renderer.currentViewer();
    var sel = HTMLFrameHelper.getSelectionControl("property-viewers", viewers, selected, callback);
    mpropDOM.appendChild(sel);
    return mpropDOM;
  }

  return false;
};

HTMLPropertyHeaderViewer.prototype.showValue = function (renderer, index) {
  var htmlid = renderer.subject() + "->" + renderer.property() + "_" + index;
  window.location = ("" + window.location).replace(/#[A-Za-z0-9_]*$/, '') + "#" + htmlid;
};

function HTMLDataViewer(renderer) {
  this.renderer = renderer;
  this.headerViewer = renderer.getValueHeaderViewer();
}

module.exports = {
  HTMLPropertyViewer: HTMLPropertyViewer,
  HTMLPropertyHeaderViewer: HTMLPropertyHeaderViewer
};

/***/ }),

/***/ "./src/client/RenderingMap.js":
/*!************************************!*\
  !*** ./src/client/RenderingMap.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

var HTMLPropertyViewer = __webpack_require__(/*! ./PropertyViewer */ "./src/client/PropertyViewer.js");

var ObjectViewer = __webpack_require__(/*! ./ObjectViewer */ "./src/client/ObjectViewer.js");

var RenderingMap = {
  registeredDataViewers: {},
  registeredDataEditors: {},
  registeredPropertyViewers: {},
  registeredPropertyEditors: {},
  registeredObjectViewers: {},
  registeredObjectEditors: {},
  getValidDataViewerList: function getValidDataViewerList(type, frametype) {
    var valids = ['HTMLStringViewer'];

    if (frametype && typeof this.registeredDataViewers[frametype] != "undefined") {
      valids = valids.concat(this.registeredDataViewers[frametype]);
    }

    if (typeof this.registeredDataViewers[type] != "undefined") {
      valids = valids.concat(this.registeredDataViewers[type]);
    }

    return valids;
  },
  getValidDataEditorList: function getValidDataEditorList(type, frametype) {
    var valids = ['HTMLStringEditor'];

    if (frametype && typeof this.registeredDataEditors[frametype] != "undefined") {
      var nftypes = this.registeredDataEditors[frametype];

      if (nftypes) {
        for (var i = 0; i < nftypes.length; i++) {
          if (valids.indexOf(nftypes[i]) == -1) valids.push(nftypes[i]);
        }
      }
    }

    if (typeof this.registeredDataEditors[type] != "undefined") {
      valids = valids.concat(this.registeredDataEditors[type]);
    }

    return valids;
  },
  getValidPropertyViewerList: function getValidPropertyViewerList(property, proptype, proprange, propdom) {
    var valids = ['HTMLPropertyViewer'];

    if (property && typeof this.registeredPropertyViewers[property] != "undefined") {
      valids = valids.concat(this.registeredPropertyViewers[property]);
    }

    if (proprange && typeof this.registeredPropertyViewers[proprange] != "undefined") {
      valids = valids.concat(this.registeredPropertyViewers[proprange]);
    }

    if (propdom && typeof this.registeredPropertyViewers[propdom] != "undefined") {
      valids = valids.concat(this.registeredPropertyViewers[propdom]);
    }

    if (proptype && typeof this.registeredPropertyViewers[proptype] != "undefined") {
      valids = valids.concat(this.registeredPropertyViewers[proptype]);
    }

    return valids;
  },
  getValidPropertyEditorList: function getValidPropertyEditorList(property, proptype, proprange, propdom) {
    var valids = ['HTMLPropertyViewer'];

    if (property && typeof this.registeredPropertyEditors[property] != "undefined") {
      valids = valids.concat(this.registeredPropertyEditors[property]);
    }

    if (proprange && typeof this.registeredPropertyEditors[proprange] != "undefined") {
      valids = valids.concat(this.registeredPropertyEditors[proprange]);
    }

    if (propdom && typeof this.registeredPropertyEditors[propdom] != "undefined") {
      valids = valids.concat(this.registeredPropertyEditors[propdom]);
    }

    if (proptype && typeof this.registeredPropertyEditors[proptype] != "undefined") {
      valids = valids.concat(this.registeredPropertyEditors[proptype]);
    }

    return valids;
  },
  getViewer: function getViewer(type, options) {
    var vi = this.renderers[type];
    options = options ? options : {};

    try {
      var viewer = eval("new " + type + "(" + JSON.stringify(options) + ")");
      return viewer;
    } catch (e) {
      alert(e.toString());
    }
  },
  getAvailablePropertyViewers: function getAvailablePropertyViewers(type, renderer) {
    var viewers = [];
    var nviewers = [];
    var opts = this.getValidPropertyViewerList(type);

    for (var i = 0; i < opts.length; i++) {
      if (nviewers.indexOf(opts[i]) == -1) {
        nviewers.push(opts[i]);
      }
    }

    for (var i = 0; i < nviewers.length; i++) {
      if (this.renderers[nviewers[i]]) {
        var sets = this.renderers[nviewers[i]];
        viewers.push({
          value: nviewers[i],
          label: sets.label
        });
      }
    }

    return viewers;
  },
  getAvailablePropertyEditors: function getAvailablePropertyEditors(type, renderer) {
    var viewers = [];
    var nviewers = [];
    var opts = this.getValidPropertyEditorList();

    for (var i = 0; i < opts.length; i++) {
      if (nviewers.indexOf(opts[i]) == -1) {
        nviewers.push(opts[i]);
      }
    }

    for (var i = 0; i < nviewers.length; i++) {
      if (this.renderers[nviewers[i]]) {
        var sets = this.renderers[nviewers[i]];
        viewers.push({
          value: nviewers[i],
          label: sets.label
        });
      }
    }

    return viewers;
  },
  getAvailableDataViewers: function getAvailableDataViewers(type, frametype) {
    var viewers = [];
    var nviewers = [];
    var opts = this.getValidDataViewerList(type, frametype);

    for (var i = 0; i < opts.length; i++) {
      if (nviewers.indexOf(opts[i]) == -1) {
        nviewers.push(opts[i]);
      }
    }

    for (var i = 0; i < nviewers.length; i++) {
      if (this.renderers[nviewers[i]]) {
        var sets = this.renderers[nviewers[i]];
        viewers.push({
          value: nviewers[i],
          label: sets.label
        });
      }
    }

    return viewers;
  },
  getAvailableDataEditors: function getAvailableDataEditors(type, frametype) {
    var viewers = [];
    var nviewers = [];
    var opts = this.getValidDataEditorList(type, frametype);

    for (var i = 0; i < opts.length; i++) {
      if (nviewers.indexOf(opts[i]) == -1) {
        nviewers.push(opts[i]);
      }
    }

    for (var i = 0; i < nviewers.length; i++) {
      if (this.renderers[nviewers[i]]) {
        var sets = this.renderers[nviewers[i]];
        viewers.push({
          value: nviewers[i],
          label: sets.label
        });
      }
    }

    return viewers;
  },
  getViewerForDataFrame: function getViewerForDataFrame(type, frametype) {
    var vals = this.getValidDataViewerList(type, frametype);
    return vals[vals.length - 1];
  },
  getEditorForDataFrame: function getEditorForDataFrame(type, frametype) {
    var vals = this.getValidDataEditorList(type, frametype);
    return vals[vals.length - 1];
  },
  registerViewerForTypes: function registerViewerForTypes(viewer, label, types) {
    for (var i = 0; i < types.length; i++) {
      if (typeof this.registeredDataViewers[types[i]] == "undefined") {
        this.registeredDataViewers[types[i]] = [];
      }

      if (this.registeredDataViewers[types[i]].indexOf(viewer) == -1) {
        this.registeredDataViewers[types[i]].push(viewer);
        this.renderers[viewer] = {
          label: label
        };
      }
    }
  },
  registerEditorForTypes: function registerEditorForTypes(viewer, label, types) {
    for (var i = 0; i < types.length; i++) {
      if (typeof this.registeredDataEditors[types[i]] == "undefined") {
        this.registeredDataEditors[types[i]] = [];
      }

      if (this.registeredDataEditors[types[i]].indexOf(viewer) == -1) {
        this.registeredDataEditors[types[i]].push(viewer);
        this.renderers[viewer] = {
          label: label
        };
      }
    }
  },
  registerEditorForFrameType: function registerEditorForFrameType(viewer, label, frametype) {
    this.renderers[viewer] = {
      label: label
    };
    if (typeof this.registeredDataEditors[frametype] == "undefined") this.registeredDataEditors[frametype] = [];

    if (this.registeredDataEditors[frametype].indexOf(viewer) == -1) {
      this.registeredDataEditors[frametype].push(viewer);
    }
  },
  registerViewerForFrameType: function registerViewerForFrameType(viewer, label, frametype) {
    this.renderers[viewer] = {
      label: label
    };
    if (typeof this.registeredDataViewers[frametype] == "undefined") this.registeredDataViewers[frametype] = [];

    if (this.registeredDataViewers[frametype].indexOf(viewer) == -1) {
      this.registeredDataViewers[frametype].push(viewer);
    }
  },
  registerViewerForProperties: function registerViewerForProperties(viewer, label, properties) {
    for (var i = 0; i < properties.length; i++) {
      if (typeof this.registeredPropertyViewers[properties[i]] == "undefined") {
        this.registeredPropertyViewers[properties[i]] = [];
      }

      if (this.registeredPropertyViewers[properties[i]].indexOf(viewer) == -1) {
        this.registeredPropertyViewers[properties[i]].push(viewer);
        this.renderers[viewer] = {
          label: label
        };
      }
    }
  },
  registerEditorForProperties: function registerEditorForProperties(viewer, label, properties) {
    for (var i = 0; i < properties.length; i++) {
      if (typeof this.registeredPropertyEditors[properties[i]] == "undefined") {
        this.registeredPropertyEditors[properties[i]] = [];
      }

      if (this.registeredPropertyEditors[properties[i]].indexOf(viewer) == -1) {
        this.registeredPropertyEditors[properties].push(viewer);
        this.renderers[viewer] = {
          label: label
        };
      }
    }
  },
  renderers: {
    HTMLStringViewer: {
      label: "String Viewer"
    },
    HTMLStringEditor: {
      label: "String Editor"
    },
    HTMLPropertyViewer: {
      label: "HTML Property Viewer"
    }
  },
  patternMatchesRenderer: function patternMatchesRenderer(pattern, renderer) {
    if (_typeof(pattern) == "object" && pattern.length) {
      //multiple patterns are ANDed
      for (var i = 0; i < pattern.length; i++) {
        var fp = new FramePattern(pattern[i]);
        if (!fp.checkRenderer(renderer)) return false;
      }

      return true;
    } else {
      var fp = new FramePattern(pattern);
      return fp.checkRenderer(renderer);
    }
  }
};

RenderingMap.getViewerForProperty = function (target, renderer) {
  return new HTMLPropertyViewer(renderer);
};

RenderingMap.getEditorForProperty = function (target, renderer) {
  return new HTMLPropertyViewer(renderer);
};

RenderingMap.getViewerForObject = function (target, renderer) {
  if (target == "json") {
    return new JSONObjectViewer(renderer);
  }

  return new ObjectViewer.HTMLObjectViewer(renderer);
};

RenderingMap.getEditorForObject = RenderingMap.getViewerForObject;

RenderingMap.getAvailableObjectViewers = function (renderer) {
  var entries = ['html', 'json'];
  return entries;
};

RenderingMap.decorateRenderer = function (options, renderer) {
  var compiled_options = this.compileOptions(options, renderer);

  if (compiled_options && compiled_options.mode) {
    renderer.mode = compiled_options.mode;
  } else {
    if (renderer.parent && renderer.parent.mode) renderer.mode = renderer.parent.mode;else renderer.mode = "view";
  }

  if (compiled_options && compiled_options.view) {
    renderer.view = compiled_options.view;
  } else {
    if (renderer.parent && renderer.parent.view) renderer.view = renderer.parent.view;else renderer.view = "full";
  }

  if (compiled_options && compiled_options.facets) {
    renderer.facets = compiled_options.facets;
  } else {
    renderer.facets = renderer.getDefaultFacets();
  }

  if (compiled_options && compiled_options.facet && _typeof(renderer.facets[compiled_options.facet]) == "object") {
    renderer.facet = compiled_options.facet;
  } else {
    var deffacet = renderer.getDefaultFacet();

    if (_typeof(renderer.facets[deffacet]) == "object") {
      renderer.facet = deffacet;
    } else {
      renderer.facet = key(renderer.facets);
    }
  }

  if (compiled_options && compiled_options.hide_disabled_buttons) {
    renderer.hide_disabled_buttons = compiled_options.hide_disabled_buttons;
  } else if (renderer.parent) renderer.hide_disabled_buttons = parent.hide_disabled_buttons;else renderer.hide_disabled_buttons = true;

  if (compiled_options && _typeof(compiled_options.features) == "object") {
    renderer.features = compiled_options.features;
  } else {
    renderer.features = renderer.facets[renderer.facet].features; //renderer.features = renderer.getDefaultFeatures(renderer.facet);
  }

  if (compiled_options && _typeof(compiled_options.controls) == "object") {
    renderer.controls = compiled_options.controls;
  } else {
    renderer.controls = renderer.facets[renderer.facet].controls; //renderer.controls = renderer.getDefaultControls();
  }

  if (compiled_options && typeof compiled_options.viewerType != "undefined") {
    renderer.viewerType = compiled_options.viewerType;
    if (compiled_options.viewerOptions) renderer.viewerOptions = compiled_options.viewerOptions;
  }

  if (compiled_options && typeof compiled_options.header != "undefined") {} else {
    renderer.header_viewer = new ObjectViewer.HTMLObjectHeaderViewer();
  }

  if (compiled_options && typeof compiled_options.filter != "undefined") {} else {}

  if (compiled_options && typeof compiled_options.sort != "undefined") {} else {}

  return options;
};

RenderingMap.compileOptions = function (options, renderer) {
  var compiled_options = {};
  var rules = [];

  for (var key in options) {
    if (key != "rules") {
      compiled_options[key] = options[key];
    }
  }

  if (options.rules) {
    for (var i = 0; i < options.rules.length; i++) {
      var match = !options.rules[i].pattern || this.patternMatchesRenderer(options.rules[i].pattern, renderer);

      if (match && options.rules[i].output) {
        for (var k in options.rules[i].output) {
          compiled_options[k] = options.rules[i].output[k];
        }
      }
    }
  }

  return compiled_options;
};

FramePattern = function (_FramePattern) {
  function FramePattern(_x) {
    return _FramePattern.apply(this, arguments);
  }

  FramePattern.toString = function () {
    return _FramePattern.toString();
  };

  return FramePattern;
}(function (pattern) {
  this.renderer = pattern.renderer ? pattern.renderer : false;
  this.label = pattern.value ? pattern.value : false;
  this.frame_type = pattern.frame_type ? pattern.frame_type : false;
  this.subject = pattern.subject ? pattern.subject : false;
  this.subjectClass = pattern.subjectClass ? pattern.subjectClass : false;
  this.range = pattern.range ? pattern.range : false;
  this.property = pattern.property ? pattern.property : false;
  this.value = pattern.value ? pattern.value : false;
  this.parent = pattern.parent ? new FramePattern(pattern.parent) : false;
  this.children = [];

  if (pattern.children) {
    for (var i = 0; i < pattern.children.length; i++) {
      this.children.push(new FramePattern(pattern.children[i]));
    }
  }

  this.depth = typeof pattern.depth != "undefined" ? pattern.depth : false;
  this.index = pattern.index ? pattern.index : false;
  this.status = pattern.status ? pattern.status : false;
});

FramePattern.prototype.checkRenderer = function (renderer) {
  var rtype = this.getRendererType(renderer);
  if (!rtype) return false;
  if (this.renderer && this.renderer != rtype) return false;
  if (this.illegalRuleType(rtype)) return false;
  if (this.frame_type && !this.checkFrameType(rtype, renderer)) return false;
  if (this.label && !this.checkLabel(rtype, renderer)) return false;
  if (this.subject && !this.checkSubject(rtype, renderer)) return false;
  if (this.subjectClass && !this.checkSubjectClass(rtype, renderer)) return false;
  if (this.property && !this.checkProperty(rtype, renderer)) return false;
  if (this.depth !== false && !this.checkDepth(rtype, renderer)) return false;
  if (this.range && !this.checkRange(rtype, renderer)) return false;
  if (this.value && !this.checkValue(rtype, renderer)) return false;
  if (this.parent && !this.checkParent(rtype, renderer)) return false;
  if (this.children && this.children.length && !this.checkChildren(rtype, renderer)) return false;
  if (this.index && !this.checkIndex(rtype, renderer)) return false;
  if (this.status && !this.checkStatus(rtype, renderer)) return false;
  return true;
};

FramePattern.prototype.illegalRuleType = function (rtype) {
  if (rtype == 'value' && (this.children.length || this.label)) return true;
  if (rtype == 'object' && this.range) return true;
  return false;
};
/* subject is an id or an array of ids, 
/* match is positive if the renderer's subject appears in the array or is the id
 */


FramePattern.prototype.checkSubject = function (subject, renderer) {
  if (_typeof(this.subject) != "object" || !this.subject.length) this.subject = [this.subject];
  var rsubj = renderer.subject();

  for (var i = 0; i < this.subject.length; i++) {
    if (this.IDsMatch(subject[i], rsubj)) {
      return true;
    }
  }

  return false;
}; //at least one child must match all child rules


FramePattern.prototype.checkChildren = function (rtype, renderer) {
  for (var i = 0; i < this.children.length; i++) {
    var found = false;

    if (rtype == "object") {
      for (var prop in renderer.properties) {
        if (this.children[i].checkRenderer(renderer.properties[prop])) {
          found = true;
          continue;
        }
      }
    } else if (rtype == "property") {
      for (var j = 0; j <= renderer.values.length; j++) {
        if (this.children[j].checkRenderer(renderer.values[j])) {
          found = true;
          continue;
        }
      }
    }

    if (!found) return false;
  }

  return true;
};

FramePattern.prototype.checkStatus = function (rtype, renderer) {
  if (_typeof(this.status) != "object" || this.status.length == 0) this.status = [this.status];

  for (var i = 0; i < this.status.length; i++) {
    if (this.status[i] == "updated" && !renderer.isUpdated()) return false;
    if (this.status[i] == "new" && !renderer.isNew()) return false;
    if (this.status[i] == "unchanged" && renderer.isUpdated()) return false;
  }

  return true;
};

FramePattern.prototype.checkDepth = function (rtype, renderer) {
  return this.numberMatch(this.depth, renderer.depth());
};

FramePattern.prototype.checkParent = function (rtype, renderer) {
  return this.parent.checkRenderer(renderer.parent);
};

FramePattern.prototype.checkIndex = function (rtype, renderer) {
  if (rtype == 'value') {
    return this.index == renderer.index;
  }

  return false;
};

FramePattern.prototype.checkProperty = function (rtype, renderer) {
  if (_typeof(this.property) != "object" || !this.property.length) this.property = [this.property];

  for (var i = 0; i < this.property.length; i++) {
    if (this.propertyIDsMatch(renderer.property(), this.property[i])) {
      return true;
    }
  }

  return false;
}; //returns true if any of the values are found


FramePattern.prototype.checkValue = function (rtype, renderer) {
  if (_typeof(this.value) != "object" || !this.value.length) this.value = [this.value];

  for (var i = 0; i < this.value.length; i++) {
    if (rtype == "value") {
      if (this.valuesMatch(renderer.value(), this.value[i])) {
        return true;
      }
    } else if (rtype == "property") {
      for (var j = 0; j <= renderer.values.length; j++) {
        if (this.getRendererType(renderer.values[i]) == 'value' && this.valuesMatch(renderer.values[i].value(), this.value[i])) {
          return true;
        }
      }
    } else if (rtype == "object") {
      for (var prop in renderer.properties) {
        if (this.checkValue(this.getRendererType(renderer.properties[prop]), renderer.properties[prop])) {
          return true;
        }
      }
    }
  }

  return false;
};

FramePattern.prototype.checkRange = function (rtype, renderer) {
  if (_typeof(this.range) != "object" || !this.range.length) this.range = [this.range];

  for (var i = 0; i < this.range.length; i++) {
    if (this.rangeIDsMatch(renderer.range(), this.range[i])) {
      return true;
    }
  }

  return false;
};

FramePattern.prototype.checkSubjectClass = function (rtype, renderer) {
  if (_typeof(this.subjectClass) != "object" || !this.subjectClass.length) this.subjectClass = [this.subjectClass];
  var rcls = renderer.subjectClass();

  for (var i = 0; i < this.subjectClass.length; i++) {
    if (this.classIDsMatch(this.subjectClass[i], rcls)) {
      return true;
    }
  }

  return false;
};

FramePattern.prototype.checkFrameType = function (rtype, renderer) {
  if (rtype == "object") return this.frame_type == "object";

  if (rtype == "value") {
    if (renderer.frame) {
      return this.frame_type == renderer.frame.ftype();
    } else {
      alert(JSON.stringify(renderer));
      alert("No frame");
    }
  }

  if (rtype == "property") return false;
};

FramePattern.prototype.checkLabel = function (rtype, renderer) {
  if (typeof renderder.getLabel != "function") {
    console.log(new Error("Rule passed to check label with broken renderer object - no getLabel"));
    return false;
  }

  return this.stringMatch(this.label, renderer.getLabel());
};

FramePattern.prototype.IDsMatch = function (ida, idb) {
  return FrameHelper.compareIDs(ida, idb);
};

FramePattern.prototype.classIDsMatch = function (ida, idb) {
  return this.IDsMatch(ida, idb);
};

FramePattern.prototype.propertyIDsMatch = function (ida, idb) {
  var match = this.IDsMatch(ida, idb);
  return match;
};

FramePattern.prototype.rangeIDsMatch = function (ida, idb) {
  return this.IDsMatch(ida, idb);
};

FramePattern.prototype.valuesMatch = function (vala, valb) {
  return vala == valb;
};

FramePattern.prototype.numberMatch = function (vala, valb) {
  if (typeof vala == "string") {
    try {
      return eval(valb + vala);
    } catch (e) {
      return false;
    }
  }

  return vala === valb;
};

FramePattern.prototype.stringMatch = function (vala, valb) {
  var pat = new RegExp(vala);
  return pat.test(valb);
};

FramePattern.prototype.getRendererType = function (renderer) {
  if (renderer.constructor.name == "ValueRenderer") return "value";
  if (renderer.constructor.name == "PropertyRenderer") return "property";
  if (renderer.constructor.name == "ObjectRenderer") return "object";
  console.log(new Error("frame configuration passed non-renderer type: " + renderer.constructor.name));
  return false;
};

module.exports = RenderingMap;

/***/ }),

/***/ "./src/client/TerminusClassChooser.js":
/*!********************************************!*\
  !*** ./src/client/TerminusClassChooser.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
 * Utility class which runs a query against the schema and presents the returned classes as a drop-down / class filter list
 */
var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

var WOQLQuery = __webpack_require__(/*! ../query/WOQLQuery */ "./src/query/WOQLQuery.js");

TerminusClassChooser = function TerminusClassChooser(ui, filter, chosen) {
  this.ui = ui;
  this.choice = chosen ? chosen : false;
  this.filter = filter;
  this.show_single = true;
};

TerminusClassChooser.prototype.setRoot = function (root) {
  this.root = root;
};

TerminusClassChooser.prototype.setFilter = function (filter) {
  this.filter = filter;
};

TerminusClassChooser.prototype.change = function (cls) {
  alert("Need to specify class chooser function (" + cls + ")");
};

TerminusClassChooser.prototype.getAsDOM = function (style) {
  var ccdom = document.createElement("span");
  ccdom.setAttribute("class", "terminus-class-chooser");
  var ccsel = document.createElement("select");
  ccsel.setAttribute("class", style + " terminus-type-select"); // ccsel.setAttribute("class", "terminus-class-select terminus-type-select terminus-query-select");

  var self = this;
  ccsel.addEventListener("change", function () {
    if (this.value != this.choice) {
      this.choice = this.value;
      self.change(this.value);
    }
  });
  ccdom.appendChild(ccsel);
  var wq = new WOQLQuery(this.ui.client);
  var woql = wq.getClassListMetaDataQuery(this.filter);
  var self = this;
  wq.execute(woql).then(function (response) {
    var opts = self.getResultsAsOptions(response);

    if (opts) {
      for (var i = 0; i < opts.length; i++) {
        ccsel.appendChild(opts[i]);
      }

      self.options = opts;
    } else {
      ccdom.removeChild(ccsel);
    }
  });
  return ccdom;
};

TerminusClassChooser.prototype.getResultsAsOptions = function (clist) {
  var choices = [];

  if (clist.bindings) {
    if (this.show_single == false && clist.bindings.length < 2) return false;

    if (this.empty_choice) {
      var opt1 = document.createElement("option");
      opt1.setAttribute("class", "terminus-class-choice terminus-empty-choice");
      opt1.value = "";
      opt1.appendChild(document.createTextNode(this.empty_choice));
      choices.push(opt1);
    }

    var added = [];

    for (var i = 0; i < clist.bindings.length; i++) {
      if (clist.bindings[i].Class && added.indexOf(clist.bindings[i].Class) == -1) {
        added.push(clist.bindings[i].Class);
        var opt = document.createElement("option");
        opt.setAttribute("class", "terminus-class-choice");
        opt.value = clist.bindings[i].Class;

        if (opt.value == this.choice) {
          opt.selected = true;
        }

        var lab = clist.bindings[i].Label;

        if (!lab || lab == "unknown") {
          lab = FrameHelper.labelFromURL(clist.bindings[i].Class);
        }

        if (lab["@value"]) lab = lab["@value"];
        opt.appendChild(document.createTextNode(lab));
        choices.push(opt);
      }
    }
  }

  return choices;
};

module.exports = TerminusClassChooser;

/***/ }),

/***/ "./src/client/TerminusDB.js":
/*!**********************************!*\
  !*** ./src/client/TerminusDB.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
 * User Interface elements dealing with database level functions - view, delete, create, db
 * view document etc
 */
var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

var WOQLResultsViewer = __webpack_require__(/*! ../query/WOQLResultsViewer */ "./src/query/WOQLResultsViewer.js");

var TerminusClassChooser = __webpack_require__(/*! ./TerminusClassChooser */ "./src/client/TerminusClassChooser.js");

var TerminusDocumentChooser = __webpack_require__(/*! ./TerminusDocumentChooser */ "./src/client/TerminusDocumentChooser.js");

var WOQLQuery = __webpack_require__(/*! ../query/WOQLQuery */ "./src/query/WOQLQuery.js");

var UTILS = __webpack_require__(/*! ../Utils */ "./src/Utils.js");

function TerminusDBController(ui) {
  this.ui = ui;
}
/*
 * Controller provides access to the server level functions (create/delete db) and db-level functions (schema, query, document)
 */


TerminusDBController.prototype.getAsDOM = function () {
  var self = this;
  var dbc = document.createElement("div");
  dbc.setAttribute("class", "terminus-db-controller");

  if (this.ui && this.ui.db()) {
    var scd = document.createElement("div");
    scd.setAttribute("class", "terminus-field terminus-db-connection");
    var lab = document.createElement("span");
    lab.setAttribute("class", "terminus-label terminus-db-label terminus-control-panel-label");
    lab.appendChild(document.createTextNode("DB "));
    var val = document.createElement("span");
    val.setAttribute("class", "terminus-value terminus-db-value terminus-control-panel-value");
    var dbrec = this.ui.client.connection.getDBRecord();
    var nm = dbrec && dbrec["rdfs:label"] && dbrec["rdfs:label"]["@value"] ? dbrec["rdfs:label"]["@value"] : this.ui.db();
    val.appendChild(document.createTextNode(nm));
    scd.appendChild(lab);
    scd.appendChild(val); //dbc.appendChild(scd);

    var nav = document.createElement('div');
    nav.setAttribute('class', 'span3');
    dbc.appendChild(nav);
    var ul = document.createElement('ul');
    ul.setAttribute('class', 'terminus-ul');
    nav.appendChild(ul);

    if (this.ui.showControl("db")) {
      var item = this.getControlHTML("Database Home", "fa-home");
      item.classList.add("terminus-selected");
      item.addEventListener("click", function () {
        UTILS.removeSelectedNavClass("terminus-selected");
        this.classList.add("terminus-selected");
        self.ui.showDBMainPage();
      });
      ul.appendChild(item);
    }

    if (this.ui.showControl("delete_database")) {
      var item = this.getControlHTML("Delete Database", "fa-trash-alt");
      item.addEventListener("click", function () {
        self.ui.deleteDatabase();
      });
      ul.appendChild(item);
    }

    if (this.ui.showControl("woql_select")) {
      var item = this.getControlHTML("Query", "fa-search");
      item.addEventListener("click", function () {
        UTILS.removeSelectedNavClass("terminus-selected");
        this.classList.add("terminus-selected");
        self.ui.showQueryPage();
      });
      ul.appendChild(item);
    }

    if (this.ui.showControl("woql_update")) {
      var item = this.getControlHTML("Mapping", "fa-file-import");
      item.addEventListener("click", function () {
        UTILS.removeSelectedNavClass("terminus-selected");
        this.classList.add("terminus-selected");
        self.ui.showMappingPage();
      });
      ul.appendChild(item);
    }

    if (this.ui.showControl("get_schema")) {
      var item = this.getControlHTML("Schema", "fa-cog");
      item.addEventListener("click", function () {
        UTILS.removeSelectedNavClass("terminus-selected");
        this.classList.add("terminus-selected");
        self.ui.showSchemaPage();
      });
      ul.appendChild(item);
    }
    /*var li = document.createElement('li');
    li.setAttribute("class", "terminus-control-button terminus-change-server-button terminus-doc-li active terminus-pointer");
    ul.appendChild(li);*/


    var a = document.createElement('a');
    a.setAttribute('class', 'terminus-doc terminus-list-group-a terminus-list-group-a-action terminus-nav-width');
    ul.appendChild(a);
    var icon = document.createElement('i');
    icon.setAttribute('class', 'terminus-menu-icon fa fa-file');
    a.appendChild(icon);
    var txt = document.createTextNode('Documents');
    a.appendChild(txt); //li.appendChild(a);

    var icon = document.createElement('i');

    if (this.ui.showControl("get_document")) {
      a.appendChild(this.getDocumentChooserDOM());
    }

    if (this.ui.showControl("create_document")) {
      a.appendChild(this.getDocumentCreatorDOM());
    }
  }

  return dbc;
};

TerminusDBController.prototype.getControlHTML = function (text, ic, css) {
  var self = this;
  var a = document.createElement('a');
  a.setAttribute('class', 'terminus-a terminus-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
  var icon = document.createElement('i');
  icon.setAttribute('class', 'terminus-menu-icon fa ' + ic);
  a.appendChild(icon);
  var txt = document.createTextNode(text);
  a.appendChild(txt);
  return a;
};

TerminusDBController.prototype.getDocumentChooserDOM = function () {
  var self = this;
  var scd = document.createElement("div");
  scd.setAttribute("class", "terminus-document-chooser terminus-form-horizontal terminus-control-group terminus-choose-by-id");
  var lab = document.createElement("span");
  lab.setAttribute("class", "terminus-document-chooser-label terminus-control-label terminus-control-label-padding"); //lab.appendChild(document.createTextNode("ID "));

  var dcip = document.createElement("input");
  dcip.setAttribute("class", "terminus-form-value terminus-document-chooser terminus-doc-input-text");
  dcip.setAttribute("placeholder", "Enter Document ID");
  var nbut = document.createElement("button");
  nbut.setAttribute('class', "terminus-control-button terminus-document-button terminus-doc-btn");
  nbut.appendChild(document.createTextNode("View Document"));
  nbut.addEventListener("click", function () {
    if (dcip.value) self.ui.showDocument(dcip.value);
  });

  if (this.ui.client.connectionConfig.platformEndpoint() && this.ui.pluginAvailable("select2")) {
    var mcls = FrameHelper.unshorten("dcog:Document");
    var d2ch = new TerminusDocumentChooser(this.ui, mcls);

    d2ch.change = function (val) {
      alert("changed to " + val);
      self.ui.showDocument(val);
    };

    d2ch.view = "label";
    var sdom = d2ch.getAsDOM('terminus-class-select');
    /*
    var showDoc = function(durl){
    	self.ui.showDocument(durl);
    }
    var callback = showDoc;
    var searchurl = self.ui.client.dbURL() + "/search";
    var sdom = getS2EntityChooser(false, searchurl, this.ui.client, mcls, callback);*/

    jQuery(dcip).hide();
    jQuery(nbut).hide();
    var nlab = document.createElement("a");
    nlab.setAttribute("href", "#");
    nlab.setAttribute("class", "terminus-document-which-chooser");
    nlab.appendChild(document.createTextNode("Choose by ID"));
    var show = "label";
    jQuery(nlab).click(function () {
      if (show == "label") {
        show = "id";
        jQuery(dcip).show();
        jQuery(nbut).show();
        jQuery(sdom).hide();
        jQuery(nlab).text("Choose by Label");
      } else {
        show = "label";
        jQuery(dcip).hide();
        jQuery(nbut).hide();
        jQuery(sdom).show();
        jQuery(nlab).text("Choose by ID");
      }
    });
    scd.appendChild(sdom);
    scd.prepend(nlab);
  }

  var nbuts = document.createElement("div");
  nbuts.setAttribute("class", "terminus-control-buttons terminus-document-chooser-buttons");
  nbuts.appendChild(nbut);
  scd.appendChild(lab);
  scd.appendChild(dcip);
  scd.appendChild(nbuts);
  return scd;
};

TerminusDBController.prototype.getDocumentCreatorDOM = function () {
  var self = this;
  var scd = document.createElement("div");
  scd.setAttribute("class", "terminus-document-creator terminus-form-horizontal terminus-control-group terminus-choose-by-id");
  var dcip = document.createElement("input");
  dcip.setAttribute("class", "terminus-form-value terminus-document-creator terminus-doc-input-text");
  dcip.setAttribute("placeholder", "Enter Document Type");
  var nbut = document.createElement("button");
  var lab = document.createElement("span");
  lab.setAttribute("class", "document-creator-label terminus-control-label terminus-control-label-padding"); //lab.appendChild(document.createTextNode("Type "));

  nbut.setAttribute('class', "terminus-control-button create-document-button terminus-doc-btn");
  nbut.appendChild(document.createTextNode("Create Document"));
  nbut.addEventListener("click", function () {
    if (dcip.value) self.ui.showCreateDocument(dcip.value);
  });
  var nbuts = document.createElement("div");
  nbuts.setAttribute("class", "terminus-control-buttons terminus-document-creator-buttons"); //nbuts.appendChild(nbut);
  //scd.appendChild(lab);
  //scd.appendChild(dcip);
  //scd.appendChild(nbuts);

  var wq = new WOQLQuery(this.ui.client, {});
  var filter = wq.getSubclassQueryPattern("Class", "dcog/'Document'") + ", not(" + wq.getAbstractQueryPattern("Class") + ")"; //var filter = "not(" + wq.getAbstractQueryPattern("Class") + ")";

  var termcc = new TerminusClassChooser(this.ui, filter);
  termcc.empty_choice = "Create Document of Type";

  termcc.change = function (new_class) {
    if (new_class) {
      self.ui.showCreateDocument(new_class);
      termcc.choice = false;
    }
  };

  var tcdom = termcc.getAsDOM('terminus-class-select');
  var nlab = document.createElement("a");
  nlab.setAttribute("href", "#");
  nlab.setAttribute("class", "document-which-chooser document-chooser-a");
  nlab.appendChild(document.createTextNode("Text Input"));
  var nlabs = document.createElement("div");
  nlabs.appendChild(nlab);
  scd.appendChild(nlabs);
  var ccDOM = document.createElement("span");
  ccDOM.setAttribute("class", "create-document-list");
  ccDOM.appendChild(tcdom);
  scd.appendChild(ccDOM);
  var which = "select";
  nlab.addEventListener("click", function () {
    FrameHelper.removeChildren(scd);
    scd.appendChild(nlabs);

    if (which == "select") {
      FrameHelper.removeChildren(nlab);
      nlab.appendChild(document.createTextNode("Dropdown List"));
      scd.appendChild(lab);
      scd.appendChild(dcip);
      scd.appendChild(nbut);
      which = "text";
    } else {
      scd.appendChild(ccDOM);
      FrameHelper.removeChildren(nlab);
      nlab.appendChild(document.createTextNode("Text Input"));
      which = "select";
    }
  });
  return scd;
};

function TerminusDBViewer(ui) {
  this.ui = ui;
  this.wquery = new WOQLQuery(ui.client, this.options);
}

TerminusDBViewer.prototype.getAsDOM = function (selected) {
  var pd = document.createElement("span");
  pd.setAttribute("class", "terminus-db-home-page");
  var sth = document.createElement('div');
  var banner = document.createElement('div');
  pd.appendChild(banner);
  banner.setAttribute('class', 'terminus-banner');
  var dhp = document.createElement("span");
  dhp.setAttribute('class', 'terminus-home-heading');
  dhp.appendChild(document.createTextNode("DB Home Page - "));
  sth.appendChild(dhp);
  var scd = document.createElement("span");
  scd.setAttribute("class", "terminus-db-details");
  var scs = document.createElement("span");
  scs.setAttribute("class", "terminus-db-details-value ");
  var dbrec = this.ui.getDBRecord();

  if (dbrec) {
    var nm = dbrec["rdfs:label"] && dbrec["rdfs:label"]["@value"] ? dbrec["rdfs:label"]["@value"] : this.db;
    scs.appendChild(document.createTextNode(nm));
    scs.setAttribute('class', 'terminus-home-heading');
  }

  scd.appendChild(scs);
  sth.appendChild(scd);
  banner.appendChild(sth); //pd.appendChild(sth);

  pd.appendChild(UTILS.getHeaderDom('Summary'));
  this.getDBSummary(pd);
  pd.appendChild(pd.appendChild(UTILS.getHeaderDom('List of Documents')));
  this.getClassesDOM(pd);
  return pd;
};

TerminusDBViewer.prototype.getDbInfoBox = function (r, module) {
  var sp = document.createElement('span');
  sp.setAttribute('class', 'terminus-db-info-box');
  var info = document.createElement('div');
  info.appendChild(document.createTextNode(module.charAt(0).toUpperCase() + module.slice(1)));
  info.setAttribute('class', 'terminus-db-info');
  sp.appendChild(info);
  var i = document.createElement('i');

  switch (module) {
    case 'size':
      i.setAttribute('class', 'terminus-icon fa fa-balance-scale');
      var txt = document.createTextNode('2 Gb');
      break;

    case 'created':
      i.setAttribute('class', 'terminus-icon fa fa-calendar');
      var txt = document.createTextNode('16 July 2015');
      break;

    case 'modified':
      i.setAttribute('class', 'terminus-icon fa fa-clock');
      var txt = document.createTextNode('22 Dec 2019');
      break;
  }

  sp.appendChild(i);
  if (txt) sp.appendChild(txt);
  r.appendChild(sp);
};

TerminusDBViewer.prototype.getDBSummary = function (d) {
  // delete database
  var del = document.createElement('button');
  del.setAttribute('class', 'terminus-del-btn');
  del.setAttribute('type', 'button');
  del.innerHTML = 'Delete';
  var dbrec = this.ui.getDBRecord();
  if (dbrec) var nm = dbrec["rdfs:label"] && dbrec["rdfs:label"]["@value"] ? dbrec["rdfs:label"]["@value"] : this.db;
  var self = this;
  del.addEventListener("click", function () {
    self.ui.deleteDatabase(nm);
  });
  d.appendChild(del);
  var r = document.createElement('span');
  r.setAttribute('class', 'terminus-db-info-box-display');
  d.appendChild(r);
  /* getDbInfoBox() calls can change according to further requirments */

  this.getDbInfoBox(r, 'size');
  this.getDbInfoBox(r, 'created');
  this.getDbInfoBox(r, 'modified');
};

TerminusDBViewer.prototype.getClassesDOM = function (d) {
  var q = this.wquery.getClassesQuery();
  var self = this;
  this.wquery.execute(q).then(function (result) {
    if (true) {
      self.result = new WOQLResultsViewer(this.ui, result, {}, {});
    } else {}

    if (self.result) {
      var nd = self.result.getAsDOM();

      if (nd) {
        nd.setAttribute('class', 'terminus-margin-box');
        d.appendChild(nd);
      } else d.appendChild(document.createTextNode("No results returned"));
    }
  })["catch"](function (err) {
    console.error(err);
    self.ui.showError(err);
  });
  return d;
};

function TerminusDBCreator(ui) {
  this.ui = ui;
}

TerminusDBCreator.prototype.getAsDOM = function (selected) {
  var scd = document.createElement("div");
  scd.setAttribute("class", "terminus-db-creator");
  var sct = document.createElement("h3");
  sct.setAttribute("class", "terminus-db-creator-title terminus-module-head");
  sct.appendChild(document.createTextNode("Create New Database"));
  scd.appendChild(sct);
  var mfd = document.createElement('div');
  mfd.setAttribute('class', 'terminus-form-border');
  scd.appendChild(mfd);
  var sci = document.createElement("div");
  sci.setAttribute("class", "terminus-form-field terminus-form-field-spacing terminus-form-horizontal terminus-control-group");
  var slab = document.createElement("span");
  slab.setAttribute("class", "terminus-id-label terminus-form-label terminus-control-label");
  slab.appendChild(document.createTextNode("ID"));
  sci.appendChild(slab);
  var idip = document.createElement("input");
  idip.setAttribute("type", "text");
  idip.setAttribute("class", "terminus-form-value terminus-input-text");
  idip.setAttribute("placeholder", "No spaces or special characters allowed in IDs");
  sci.appendChild(idip);
  mfd.appendChild(sci);
  var sci = document.createElement("div");
  sci.setAttribute("class", "terminus-form-field terminus-form-field-spacing terminus-form-horizontal terminus-control-group");
  var slab = document.createElement("span");
  slab.setAttribute("class", "terminus-title-label terminus-form-label terminus-control-label");
  slab.appendChild(document.createTextNode("Title"));
  var titip = document.createElement("input");
  titip.setAttribute("type", "text");
  titip.setAttribute("placeholder", "A brief title for the Database");
  titip.setAttribute("class", "terminus-form-value terminus-input-text");
  sci.appendChild(slab);
  sci.appendChild(titip);
  mfd.appendChild(sci);
  var sci = document.createElement("div");
  sci.setAttribute("class", "terminus-form-field terminus-form-field-spacing terminus-form-horizontal terminus-control-group");
  var slab = document.createElement("span");
  slab.setAttribute("class", "terminus-title-label terminus-form-label terminus-control-label");
  slab.appendChild(document.createTextNode("Description"));
  sci.appendChild(slab);
  var descip = document.createElement("textarea");
  descip.setAttribute("class", "terminus-textarea terminus-db-description terminus-textarea ");
  descip.setAttribute("placeholder", "A short text describing the database and its purpose");
  sci.appendChild(descip);
  mfd.appendChild(sci);
  var sci = document.createElement("div");
  sci.setAttribute("class", "terminus-form-field terminus-form-field-spacing terminus-form-horizontal terminus-control-group");
  var slab = document.createElement("span");
  slab.setAttribute("class", "terminus-schema-label terminus-form-label terminus-control-label");
  slab.appendChild(document.createTextNode("Import Schema"));
  sci.appendChild(slab);
  var schem = document.createElement("input");
  schem.setAttribute("placeholder", "Terminus DB URL");
  schem.setAttribute("type", "text");
  schem.setAttribute("class", "terminus-form-value terminus-form-url terminus-input-text");
  sci.appendChild(schem);
  mfd.appendChild(sci);
  var sci = document.createElement("div");
  sci.setAttribute("class", "terminus-form-field terminus-form-field-spacing terminus-form-horizontal terminus-control-group");
  var slab = document.createElement("span");
  slab.setAttribute("class", "terminus-data-label terminus-form-label terminus-control-label");
  slab.appendChild(document.createTextNode("Import Data"));
  sci.appendChild(slab);
  var datip = document.createElement("input");
  datip.setAttribute("type", "text");
  datip.setAttribute("placeholder", "Terminus DB URL");
  datip.setAttribute("class", "terminus-form-value terminus-form-url terminus-input-text");
  sci.appendChild(datip);
  mfd.appendChild(sci);
  var butfield = document.createElement("div");
  butfield.setAttribute("class", "terminus-control-buttons");
  var cancbut = document.createElement("button");
  cancbut.setAttribute("class", "terminus-control-button terminus-cancel-db-button terminus-btn");
  cancbut.appendChild(document.createTextNode("Cancel"));
  var loadbut = document.createElement("button");
  loadbut.setAttribute("class", "terminus-control-button terminus-create-db-button terminus-btn");
  loadbut.appendChild(document.createTextNode("Create"));
  var self = this;

  var gatherips = function gatherips() {
    var input = {};
    input.id = idip.value;
    input.title = titip.value;
    input.description = descip.value;
    input.schema = schem.value;
    input.data = datip.value;
    return input;
  };

  var self = this;
  loadbut.addEventListener("click", function () {
    var input = gatherips();
    self.ui.createDatabase(input);
  });
  cancbut.addEventListener("click", function () {
    self.ui.showServerMainPage();
  });
  butfield.appendChild(cancbut);
  butfield.appendChild(loadbut);
  mfd.appendChild(butfield);
  return scd;
};

module.exports = {
  TerminusDBViewer: TerminusDBViewer,
  TerminusDBController: TerminusDBController,
  TerminusDBCreator: TerminusDBCreator
};

/***/ }),

/***/ "./src/client/TerminusDocument.js":
/*!****************************************!*\
  !*** ./src/client/TerminusDocument.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

var ObjectFrame = __webpack_require__(/*! ../ObjectFrame */ "./src/ObjectFrame.js");

var WOQLQuery = __webpack_require__(/*! ../query/WOQLQuery */ "./src/query/WOQLQuery.js"); //const FrameConfig = require('./FrameConfig');


var ObjectRenderer = __webpack_require__(/*! ./ObjectRenderer */ "./src/client/ObjectRenderer.js");

function TerminusDocumentViewer(ui, action, options) {
  this.ui = ui;
  this.server = this.ui.server();
  this.db = this.ui.db();
  this.init();
  this.mode = options && options.mode ? options.mode : "view";
  this.editor = options && options.editor ? options.editor : false;
  this.load_schema = options && options.load_schema ? options.load_schema : true;
  this.config_options = this.getBuiltInViewerOptions();
  this.options = options ? options : this.config_options[action];
  this.action = action;
  this.document = false;
}

TerminusDocumentViewer.prototype.init = function () {
  var wq = new WOQLQuery(this.ui.client, this.options);
  var woql = wq.getClassMetaDataQuery();
  var self = this;
  self.classmeta = {};
  self.instancemeta = {};
  wq.execute(woql).then(function (wresult) {
    if (wresult && wresult.hasBindings()) {
      for (var i = 0; i < wresult.bindings.length; i++) {
        var cls = wresult.bindings[i].Class;

        if (cls && typeof self.classmeta[cls] == "undefined") {
          self.classmeta[cls] = wresult.bindings[i];
        }
      }

      self.refreshPage();
    }
  })["catch"](function (e) {
    console.log(e);
  });
};

TerminusDocumentViewer.prototype.getInstanceMeta = function (elid) {
  var self = this; //if(typeof self.instancemeta[elid] != "undefined") return self.instancemeta[elid] ;

  var wq = new WOQLQuery(this.ui.client, this.options);
  var woql = wq.getInstanceMeta(elid);
  return wq.execute(woql).then(function (wresult) {
    if (wresult && wresult.hasBindings()) {
      var res = wresult.bindings[0];
      return res;
    }

    return false;
  })["catch"](function (e) {
    console.log(e);
  });
};

TerminusDocumentViewer.prototype.getClassMeta = function (cls) {
  if (_typeof(this.classmeta[cls])) {
    return this.classmeta[cls];
  }

  return false;
};

TerminusDocumentViewer.prototype.loadCreateDocument = function (url) {
  if (url) {
    this.ui.showBusy("Fetching frame for document class " + url);
    var self = this;
    this.mode = "edit";
    this.page_config = "create";

    if (url.indexOf("/") == -1 && url.indexOf(":") == -1) {
      url = "schema:" + url;
    }

    return this.loadDocumentSchema(url).then(function (response) {
      self.ui.clearBusy();
      self.setLabel();
    })["catch"](function (error) {
      console.error(error);
      self.ui.clearBusy();
      self.ui.showError(error);
    });
  }
};

TerminusDocumentViewer.prototype.loadDocument = function (url, cls) {
  if (!url) return false;
  var self = this;

  if (url.substring(0, 4) == "doc:") {
    url = url.substring(4);
  }

  this.page_config = "view";
  url = url.replace("/candidate", "/platform/document");
  this.ui.showBusy("Loading Document from " + url);
  return this.ui.client.getDocument(url, {
    "terminus:encoding": "terminus:frame"
  }).then(function (response) {
    self.ui.clearBusy();
    self.loadDataFrames(response);
    self.setLabel();
    self.refreshPage();

    if (self.load_schema) {
      return self.loadDocumentSchema(self.document.cls).then(function () {
        self.refreshPage();
      })["catch"](function (e) {
        console.error(e);
      });
    }

    return response;
  })["catch"](function (error) {
    console.error(error);
    self.ui.clearBusy();
    self.ui.showError(error);
  });
};

TerminusDocumentViewer.prototype.loadDocumentSchema = function (cls) {
  var self = this;
  return this.ui.client.getClassFrame(false, cls).then(function (response) {
    self.loadSchemaFrames(response, cls);
    self.refreshPage();
  });
};

TerminusDocumentViewer.prototype.deleteDocument = function (URL) {
  this.document = false;
  var self = this;
  this.ui.showBusy("Deleting Document " + URL);
  return this.ui.client.deleteDocument(URL).then(function (response) {
    self.ui.clearBusy();
  })["catch"](function (error) {
    self.ui.clearBusy();
    self.ui.showError(error);
  });
};

TerminusDocumentViewer.prototype.createDocument = function (id) {
  var self = this;
  var extr = this.renderer.extract();
  var opts = {
    "terminus:encoding": "jsonld"
  };
  this.ui.showBusy("Creating document");
  return this.ui.client.createDocument(id, extr, opts).then(function (response) {
    self.ui.clearBusy();
    self.ui.showDocument(id);
  })["catch"](function (error) {
    self.ui.clearBusy();
    self.ui.showError(error);
  });
};

TerminusDocumentViewer.prototype.updateDocument = function () {
  var durl = this.document.subjid;
  var extr = this.renderer.extract();
  var self = this;
  var opts = {
    "terminus:encoding": "jsonld"
  };
  this.ui.showBusy("Updating document " + durl);
  return this.ui.client.updateDocument(durl, extr, opts).then(function (response) {
    self.ui.clearBusy();
    self.ui.showDocument(durl);
  })["catch"](function (error) {
    self.ui.clearBusy();
    self.ui.showError(error);
  });
};

TerminusDocumentViewer.prototype.loadDataFrames = function (dataframes, cls) {
  if (!cls) {
    if (this.document) cls = this.document.cls;else {
      if (dataframes && dataframes.length && dataframes[0] && dataframes[0].domain) {
        cls = dataframes[0].domain;
      }
    }
  }

  if (cls) {
    if (!this.document) {
      this.document = new ObjectFrame(cls, dataframes);
    } else {
      this.document.loadDataFrames(dataframes);
    }
  } else {
    alert("Missing Class" + " " + "Failed to add dataframes due to missing class");
  }
};

TerminusDocumentViewer.prototype.loadSchemaFrames = function (classframes, cls) {
  if (!cls) {
    if (classframes && classframes.length && classframes[0] && classframes[0].domain) {
      cls = classframes[0].domain;
    }
  }

  if (cls) {
    if (!this.document) {
      this.document = new ObjectFrame(cls);
    }

    if (classframes) {
      this.document.loadClassFrames(classframes);

      if (!this.document.subjid) {
        this.document.newDoc = true;
        this.document.fillFromSchema("_:");
      }
    }
  } else {
    this.error("Missing Class", "Failed to add class frames due to missing class");
  }
};

TerminusDocumentViewer.prototype.render = function () {
  if (!this.renderer && this.document) {
    if (this.page_config) {
      this.options = this.getOptionsFromPageConfig(this.page_config);
    }

    this.renderer = new ObjectRenderer(this.document, false, this.options);
    this.renderer.mode = this.mode;
    this.renderer.controller = this;
  }

  if (this.renderer) {
    return this.renderer.render();
  }
};

TerminusDocumentViewer.prototype.getBuiltInViewerOptions = function () {
  return FrameConfig;
};

TerminusDocumentViewer.prototype.getOptionsFromPageConfig = function (pageconf) {
  if (_typeof(this.config_options[pageconf]) == "object") {
    return this.config_options[pageconf];
  }

  return this.options;
};

TerminusDocumentViewer.prototype.getClient = function () {
  return this.ui.client;
};

TerminusDocumentViewer.prototype.extract = function (options) {
  return this.renderer.extract();
};

TerminusDocumentViewer.prototype.getLabel = function () {
  var lab = this.cls ? this.cls : false;
  if (!lab) lab = this.docid ? this.docid : "Void";
  return lab;
};

TerminusDocumentViewer.prototype.setLabel = function () {
  if (this.document && this.labdom) {
    FrameHelper.removeChildren(this.labdom);
    var dfs = this.document.getDataFrames(FrameHelper.getStdURL("rdfs", "label"));

    for (var i = 0; i < dfs.length; i++) {
      var lab = dfs[i].get();

      if (lab) {
        this.labdom.appendChild(document.createTextNode(lab));
      }
    }
  }
};

TerminusDocumentViewer.prototype.refreshPage = function () {
  if (this.pagedom) {
    FrameHelper.removeChildren(this.pagedom);
    var rends = this.render();

    if (rends) {
      this.pagedom.appendChild(rends);
    }
  }
};

TerminusDocumentViewer.prototype.getAsDOM = function () {
  var holder = document.createElement("div");
  holder.setAttribute("class", "terminus-document-holder");
  this.controldom = document.createElement("div");
  this.controldom.setAttribute("class", "terminus-document-controller");
  this.controldom.appendChild(this.getDocumentPageControls());
  this.pagedom = document.createElement("div");
  this.pagedom.setAttribute("class", "terminus-document-page");
  var rends = this.render();

  if (rends) {
    this.pagedom.appendChild(rends);
  }

  holder.appendChild(this.controldom);
  holder.appendChild(this.pagedom);
  return holder;
};

TerminusDocumentViewer.prototype.getDocumentPageControls = function () {
  var dpc = document.createElement("select");
  dpc.setAttribute("class", "terminus-form-select terminus-document-config");

  for (var i in this.config_options) {
    var opt = document.createElement("option");
    opt.value = i;

    if (this.page_config == i) {
      opt.selected = true;
    }

    opt.appendChild(document.createTextNode(this.config_options[i].label));
    dpc.appendChild(opt);
  }

  var self = this;
  dpc.addEventListener("change", function () {
    self.page_config = this.value;
    self.renderer = false;
    self.refreshPage();
  });
  return dpc;
};

module.exports = TerminusDocumentViewer;

/***/ }),

/***/ "./src/client/TerminusDocumentChooser.js":
/*!***********************************************!*\
  !*** ./src/client/TerminusDocumentChooser.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

var WOQLQuery = __webpack_require__(/*! ../query/WOQLQuery */ "./src/query/WOQLQuery.js");

var TerminusClassChooser = __webpack_require__(/*! ./TerminusClassChooser */ "./src/client/TerminusClassChooser.js");
/*
 * Utility class which allows the user to choose a document by id or by label (if select2 and full text indexing is turned on)
 */


TerminusDocumentChooser = function TerminusDocumentChooser(ui, root, value, view) {
  this.ui = ui;
  this.root = root; //this.filter = (currentcls ? FrameHelper.unshorten(currentcls) : false);

  this.choice = value;
  this.view = view ? view : "id";
  this.show_button = true;
};

TerminusDocumentChooser.prototype.setRoot = function (root) {
  this.root = root;
};

TerminusDocumentChooser.prototype.setFilter = function (filter) {
  this.filter = filter;
};

TerminusDocumentChooser.prototype.change = function (docid) {
  alert("Need to specify doc chooser function (" + docid + ")");
};

TerminusDocumentChooser.prototype.getAsDOM = function (style) {
  if (this.view == "label" && this.ui.client.connectionConfig.platformEndpoint() && this.ui.pluginAvailable("select2")) {
    return this.getS2DOM(style);
  }

  return this.getIDDOM();
};

TerminusDocumentChooser.prototype.getS2DOM = function (style) {
  var docchooser = document.createElement("span");
  docchooser.setAttribute("class", "terminus-document-chooser terminus-doc-holder");
  var wq = new WOQLQuery(this.ui.client, {});
  var cfilter = wq.getSubclassQueryPattern("Class", "'" + this.root + "'");
  var termcc = new TerminusClassChooser(this.ui, cfilter);
  termcc.empty_choice = "Filter by Type";
  termcc.show_single = false;
  var self = this;

  termcc.change = function (new_class) {
    if (new_class) {
      self.filter = new_class;
    }
  };

  tdom = termcc.getAsDOM(style);
  if (tdom) docchooser.appendChild(tdom);
  var holder = document.createElement("span");
  holder.setAttribute("class", "terminus-entity-reference-value");
  var sel = document.createElement("select");
  sel.setAttribute("class", "terminus-entity-class-input");
  holder.appendChild(sel);
  var opt = document.createElement("option");

  var lookup = function lookup(params) {
    params["class"] = self.filter;
    return JSON.stringify(params);
  };

  var searchurl = this.ui.client.dbURL() + "/search";
  var s2config = {
    ajax: {
      url: searchurl,
      dataType: 'json',
      data: lookup,
      type: "POST",
      contentType: "application/json; charset=utf-8",
      delay: 250,
      cache: true
    },
    placeholder: "Enter Document Name",
    width: 200
  };
  jQuery(sel).select2(s2config).change(function () {
    callback(this.value);
  });
  docchooser.appendChild(holder);
  return docchooser;
};

TerminusDocumentChooser.prototype.getIDDOM = function () {
  var docchooser = document.createElement("span");
  docchooser.setAttribute("class", "terminus-document-chooser terminus-doc-holder");
  var dcip = document.createElement("input");
  dcip.setAttribute("class", "terminus-document-chooser terminus-query-text"); //11092019 dcip.setAttribute("class", "terminus-form-value terminus-document-chooser");

  dcip.setAttribute("placeholder", "Enter Document ID");
  dcip.addEventListener('keypress', function (e) {
    var key = e.which || e.keyCode; // on enter

    if (key === 13 && dcip.value) {
      self.choice = dcip.value;
      self.change(dcip.value);
    }
  });
  docchooser.appendChild(dcip);

  if (this.show_button) {
    var dbut = document.createElement("button");
    dbut.setAttribute("class", "terminus-control-button terminus-query-go-btn");
    var self = this;
    dbut.addEventListener("click", function () {
      if (dcip.value) {
        self.choice = dcip.value;
        self.change(dcip.value);
      }
    }); //11092019 dbut.appendChild(document.createTextNode("View Document Properties"));

    dbut.appendChild(document.createTextNode("Go"));
    docchooser.appendChild(dbut);
  }

  return docchooser;
};

TerminusDocumentChooser.prototype.toggleView = function () {
  if (this.view == "id") this.view = "label";else this.view = "id";
};

TerminusDocumentChooser.prototype.getChangeViewText = function () {
  if (this.view == "id") {
    return "Document Lookup";
  }

  return "Load Document ID";
};

module.exports = TerminusDocumentChooser;

/***/ }),

/***/ "./src/client/TerminusMapping.js":
/*!***************************************!*\
  !*** ./src/client/TerminusMapping.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function TerminusMappingViewer(ui, mode) {
  this.ui = ui;
  this.mode = mode ? mode : "data";
}

TerminusMappingViewer.prototype.getAsDOM = function () {
  var scd = document.createElement("div");
  scd.setAttribute("class", "terminus-mapping-page terminus-page");
  var tsel = document.createElement("select");
  var o1 = document.createElement("option");
  o1.value = "data";
  o1.appendChild(document.createTextNode("Data Map"));
  tsel.appendChild(o1);
  var o2 = document.createElement("option");
  o2.value = "model";
  o2.appendChild(document.createTextNode("Model Map"));
  tsel.appendChild(o2);
  var ff = this.getFormFieldDOM("Map Type");
  ff.appendChild(tsel);
  scd.appendChild(ff);
  var source = this.getFormField(scd, "Map Source");
  var target = this.getFormField(scd, "Map Target");
  var queries = this.getFormField(scd, "Queries");
  var options = this.getFormField(scd, "Options");
  var mdom = this.getFormFieldDOM("Existing Mapping");
  var mapping = document.createElement("input");
  mapping.setAttribute("type", "text");
  mapping.setAttribute("size", 80);
  mdom.appendChild(mapping);
  scd.appendChild(mdom);
  var submit = document.createElement("button");
  submit.setAttribute("class", "terminus-btn terminus-control-button");
  submit.appendChild(document.createTextNode("Execute Mapping"));
  var self = this;
  submit.addEventListener("click", function () {
    var jsonip = {
      map_source: JSON.parse(source.value)
    };

    if (tsel.value == "data") {
      jsonip["rdf:type"] = "dcogmodel:DataMap";
    } else {
      jsonip["rdf:type"] = "dcogmodel:ModelMap";
    }

    if (target.value) jsonip.map_target = target.value;
    if (queries.value) jsonip.queries = queries.value;
    if (options.value) jsonip.options = options.value;
    if (mapping.value) jsonip.mapping = mapping.value;
    self.ui.client.update(false, jsonip);
  });
  scd.appendChild(submit);
  return scd;
};

TerminusMappingViewer.prototype.getFormFieldDOM = function (label) {
  var sci = document.createElement("div");
  sci.setAttribute("class", "terminus-form-field terminus-mapping-field");
  var lab = document.createElement("span");
  lab.setAttribute("class", "terminus-form-label terminus-mapping-label");
  lab.appendChild(document.createTextNode(label));
  sci.appendChild(lab);
  return sci;
};

TerminusMappingViewer.prototype.getFormField = function (holder, label) {
  var ff = this.getFormFieldDOM(label);
  var source = document.createElement("textarea");
  source.setAttribute("class", "terminus-form-value terminus-textarea");
  ff.appendChild(source);
  holder.appendChild(ff);
  return source;
};

module.exports = TerminusMappingViewer;

/***/ }),

/***/ "./src/client/TerminusPropertyChooser.js":
/*!***********************************************!*\
  !*** ./src/client/TerminusPropertyChooser.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
 * Utility Property which runs a query against the schema and presents the returned Propertyes as a drop-down / Property filter list
 */
var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

var WOQLQuery = __webpack_require__(/*! ../query/WOQLQuery */ "./src/query/WOQLQuery.js");

TerminusPropertyChooser = function TerminusPropertyChooser(ui, filter) {
  this.ui = ui;
  this.choice = false;
  this.filter = filter;
};

TerminusPropertyChooser.prototype.setRoot = function (root) {
  this.root = root;
};

TerminusPropertyChooser.prototype.setFilter = function (filter) {
  this.filter = filter;
};

TerminusPropertyChooser.prototype.change = function (cls) {
  alert("Need to specify Property chooser function (" + cls + ")");
};

TerminusPropertyChooser.prototype.getAsDOM = function () {
  var ccdom = document.createElement("span");
  ccdom.setAttribute("Class", "terminus-Class-chooser");
  var ccsel = document.createElement("select");
  ccsel.setAttribute("Class", " terminus-type-select terminus-query-select");
  var self = this;
  ccsel.addEventListener("change", function () {
    if (this.value != this.choice) {
      this.choice = this.value;
      self.change(this.value);
    }
  });
  ccdom.appendChild(ccsel);
  var wq = new WOQLQuery(this.ui.client);
  var woql = wq.getPropertyListQuery(this.filter);
  var self = this;
  wq.execute(woql).then(function (response) {
    var opts = self.getResultsAsOptions(response);

    for (var i = 0; i < opts.length; i++) {
      ccsel.appendChild(opts[i]);
    }
  });
  return ccdom;
};

TerminusPropertyChooser.prototype.getResultsAsOptions = function (clist) {
  var choices = [];

  if (this.empty_choice) {
    var opt1 = document.createElement("option");
    opt1.setAttribute("Class", "terminus-class-choice terminus-empty-choice");
    opt1.value = "";
    opt1.appendChild(document.createTextNode(this.empty_choice));
    choices.push(opt1);
  }

  if (clist.bindings) {
    var added = [];

    for (var i = 0; i < clist.bindings.length; i++) {
      if (clist.bindings[i].Property && added.indexOf(clist.bindings[i].Property) == -1) {
        added.push(clist.bindings[i].Property);
        var opt = document.createElement("option");
        opt.setAttribute("Class", "terminus-class-choice");
        opt.value = clist.bindings[i].Property;
        var lab = clist.bindings[i].Label;

        if (!lab || lab == "unknown") {
          lab = FrameHelper.labelFromURL(clist.bindings[i].Property);
        }

        if (lab["@value"]) lab = lab["@value"];
        opt.appendChild(document.createTextNode(lab));
        choices.push(opt);
      }
    }
  }

  return choices;
};

module.exports = TerminusPropertyChooser;

/***/ }),

/***/ "./src/client/TerminusQuery.js":
/*!*************************************!*\
  !*** ./src/client/TerminusQuery.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

var WOQLQuery = __webpack_require__(/*! ../query/WOQLQuery */ "./src/query/WOQLQuery.js");

var WOQLResult = __webpack_require__(/*! ../query/WOQLResult */ "./src/query/WOQLResult.js");

var WOQLResultsViewer = __webpack_require__(/*! ../query/WOQLResultsViewer */ "./src/query/WOQLResultsViewer.js");

var WOQLTextboxGenerator = __webpack_require__(/*! ../query/WOQLTextboxGenerator */ "./src/query/WOQLTextboxGenerator.js");

var WOQLGraphBrowserGenerator = __webpack_require__(/*! ../query/WOQLGraphBrowserGenerator */ "./src/query/WOQLGraphBrowserGenerator.js");

var TerminusPluginManager = __webpack_require__(/*! ../plugins/TerminusPlugin */ "./src/plugins/TerminusPlugin.js");

function TerminusQueryViewer(ui, options) {
  this.ui = ui;
  this.options = options;
  this.meta = {};
  this.init();
  this.generator = false;
  this.result = false;
  this.wquery = new WOQLQuery(ui.client, this.options);
  this.results_first = false;
  this.pman = new TerminusPluginManager();
  this.gentype = options && options.generator ? options.generator : "textbox";
  this.generators = {
    "textbox": {
      label: "Simple Text Box",
      value: "textbox"
    }
  };

  if (ui.pluginAvailable("jqueryui")) {
    this.generators.gbrowse = {
      label: "Graph Browser",
      value: "gbrowse"
    };
  }

  this.loadGenerator();
}

TerminusQueryViewer.prototype.hasGeneratorOptions = function () {
  var yup = false;

  for (var gen in this.generators) {
    if (yup) return true;else yup = true;
  }

  return false;
};

TerminusQueryViewer.prototype.changeGenerator = function (ng) {
  if (this.gentype != ng) {
    this.gentype = ng;
    this.loadGenerator();
    this.redrawGenerator();
  }
};

TerminusQueryViewer.prototype.redrawGenerator = function (q) {
  FrameHelper.removeChildren(this.inputDOM);
  this.inputDOM.appendChild(this.getQueryInputDOM(q));
};

TerminusQueryViewer.prototype.loadGenerator = function () {
  var self = this;

  var nquery = function nquery(q, settings) {
    self.query(q, settings);
  };

  if (this.gentype == "textbox") {
    this.generator = new WOQLTextboxGenerator(nquery, this, this.ui);
  } else if (this.gentype == "gbrowse") {
    this.generator = new WOQLGraphBrowserGenerator(nquery, this, this.ui);
  }
};

TerminusQueryViewer.prototype.init = function () {
  var wq = new WOQLQuery(this.ui.client, this.options);
  var woql = wq.getElementMetaDataQuery();
  var self = this;
  self.meta = {};
  wq.execute(woql).then(function (wresult) {
    var wqlR = new WOQLResult(wresult, null, null);

    if (wqlR.hasBindings(wresult)) {
      for (var i = 0; i < wresult.bindings.length; i++) {
        var el = wresult.bindings[i].Element;

        if (el && typeof self.meta[el] == "undefined") {
          self.meta[el] = wresult.bindings[i];
        }
      }
    }
  })["catch"](function (e) {
    console.error(e);
  });
};

TerminusQueryViewer.prototype.query = function (val, settings, tab) {
  var self = this;
  FrameHelper.removeChildren(this.resultDOM);
  this.wquery.execute(val).then(function (result) {
    if (true) {
      self.result = new WOQLResultsViewer(self.ui, result, self.options, settings);
    } else {}

    var nd = self.result.getAsDOM(self.resultDOM);

    if (nd) {
      self.resultDOM.appendChild(nd);
    }
  })["catch"](function (err) {
    console.error(err);
    self.ui.showError(err);
  });
};

TerminusQueryViewer.prototype.getResultViewDom = function () {
  this.resultDOM = document.createElement("div");
  this.resultDOM.setAttribute("class", "terminus-query-results");
};

TerminusQueryViewer.prototype.getAsDOM = function (q) {
  var qbox = document.createElement("div");
  qbox.setAttribute("class", "terminus-query-page");

  if (this.hasGeneratorOptions()) {
    qbox.appendChild(this.getQueryCreatorChoiceDOM(q));
  }

  this.resultDOM = document.createElement("div");
  this.resultDOM.setAttribute("class", "terminus-query-results");
  this.inputDOM = document.createElement("div");
  this.inputDOM.setAttribute("class", "terminus-query-input");
  this.inputDOM.appendChild(this.getQueryInputDOM(q));

  if (this.results_first) {
    qbox.appendChild(this.resultDOM);
    qbox.appendChild(this.inputDOM);
  } else {
    qbox.appendChild(this.inputDOM);
    qbox.appendChild(this.resultDOM);
  }

  return qbox;
};

TerminusQueryViewer.prototype.getQueryCreatorChoiceDOM = function () {
  var qcc = document.createElement("select");
  qcc.setAttribute("class", "terminus-query-generator-selector");

  for (var c in this.generators) {
    var gen = this.generators[c];
    var opt = document.createElement("option");
    opt.value = gen.value ? gen.value : c;
    var lab = gen.label ? gen.label : c;
    opt.appendChild(document.createTextNode(lab));
    qcc.appendChild(opt);
  }

  var self = this;
  qcc.addEventListener("change", function () {
    self.changeGenerator(this.value);
  });
  return qcc;
};

TerminusQueryViewer.prototype.getQueryInputDOM = function (q) {
  //input options ...
  //this.inputDOM.appendChild(this.getQueryCreatorChoiceDOM());
  return this.generator.getAsDOM(q);
};

module.exports = TerminusQueryViewer;

/***/ }),

/***/ "./src/client/TerminusSchema.js":
/*!**************************************!*\
  !*** ./src/client/TerminusSchema.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * Draws the screen for viewing and updating the schema
 * and provides wrappers around the client's schema API
 */
var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

var TerminusClassChooser = __webpack_require__(/*! ./TerminusClassChooser */ "./src/client/TerminusClassChooser.js");

var TerminusDocumentViewer = __webpack_require__(/*! ./TerminusDocument */ "./src/client/TerminusDocument.js");

var UTILS = __webpack_require__(/*! ../Utils */ "./src/Utils.js");

function TerminusSchemaViewer(ui) {
  this.ui = ui;
  this.mode = "view";
  this.format = "turtle";
  this.confirm_before_update = true;
}
/*
 * Retrieves schema from API and writes the response into the page
 */


TerminusSchemaViewer.prototype.getAsDOM = function () {
  this.holder = document.createElement("div");
  this.controldom = document.createElement("div");
  this.controldom.setAttribute("class", "terminus-schema-controls");
  this.pagedom = document.createElement("div");
  this.pagedom.setAttribute("class", "terminus-schema-viewer");
  this.loadSchema();
  this.holder.appendChild(this.controldom);
  this.holder.appendChild(this.pagedom);
  return this.holder;
};

TerminusSchemaViewer.prototype.loadSchema = function () {
  var self = this;
  this.ui.showBusy("Fetching Database Schema");
  this.ui.client.getSchema(false, {
    "terminus:encoding": "terminus:" + this.format
  }).then(function (response) {
    self.ui.clearBusy();
    self.schema = response;
    self.refreshPage();
  })["catch"](function (error) {
    self.ui.clearBusy();
    self.ui.showError(error);
  });
};

TerminusSchemaViewer.prototype.resetControlDOM = function () {
  FrameHelper.removeChildren(this.controldom);

  if (this.mode == "edit") {
    this.controldom.appendChild(this.getSchemaSaveButtons());
  } else if (this.mode == "import") {
    this.controldom.appendChild(this.getSchemaImportActionButtons());
  } else if (this.mode == "class_frame") {
    if (this.ui.showControl("get_schema")) {
      this.controldom.appendChild(this.getShowSchemaButton());
    }

    if (this.ui.showControl("class_frame")) {
      this.controldom.appendChild(this.getClassFrameChooser());
    }
  } else if (this.mode == "view") {
    if (this.ui.showControl("import_schema")) {
      this.controldom.appendChild(this.getImportButton());
    }

    if (this.ui.showControl("update_schema")) {
      this.controldom.appendChild(this.getSchemaEditButton());
    }

    if (this.ui.showControl("schema_format")) {
      this.controldom.appendChild(this.getFormatChoices());
    }

    if (this.ui.showControl("class_frame")) {
      this.controldom.appendChild(this.getClassFrameChooser());
    }
  }
};

TerminusSchemaViewer.prototype.getFormatChoices = function () {
  var fc = document.createElement("select");
  fc.setAttribute("class", "terminus-form-select terminus-schema-format terminus-type-select");
  var tc = document.createElement("option");
  tc.setAttribute("class", "terminus-schema-turtle");
  tc.value = "turtle";
  tc.appendChild(document.createTextNode("Turtle"));
  if (this.format == "turtle") tc.selected = true;
  fc.appendChild(tc);
  var tj = document.createElement("option");
  tj.setAttribute("class", "terminus-schema-jsonld");
  tj.value = "jsonld";
  tj.appendChild(document.createTextNode("Json LD"));
  if (this.format == "jsonld") tj.selected = true;
  fc.appendChild(tj);
  var self = this;
  fc.addEventListener("change", function (e) {
    self.format = this.value;
    self.loadSchema();
  });
  return fc;
};

TerminusSchemaViewer.prototype.refreshPage = function () {
  if (this.controldom) this.resetControlDOM();
  if (this.pagedom) this.refreshMainPage();
};

TerminusSchemaViewer.prototype.refreshMainPage = function () {
  FrameHelper.removeChildren(this.pagedom);

  if (this.mode == 'view') {
    this.pagedom.appendChild(this.getSchemaViewDOM());
  } else if (this.mode == "edit") {
    this.pagedom.appendChild(this.getSchemaEditDOM());
  } else if (this.mode == "import") {
    this.pagedom.appendChild(this.getSchemaImportDOM());
  } else if (this.mode == "class_frame") {
    this.pagedom.appendChild(this.getClassFrameDOM());
  }
};

TerminusSchemaViewer.prototype.getSchemaSaveButtons = function () {
  var ssb = document.createElement("span");
  ssb.setAttribute("class", "terminus-schema-save-buttons");
  ssb.appendChild(this.getCancelButton());
  ssb.appendChild(this.getSaveButton());
  return ssb;
};

TerminusSchemaViewer.prototype.getSchemaImportActionButtons = function () {
  var ssb = document.createElement("span");
  ssb.setAttribute("class", "terminus-schema-import-buttons");
  ssb.appendChild(this.getCancelButton());
  ssb.appendChild(this.getImportPreviewButton());
  ssb.appendChild(this.getImportSaveButton());
  return ssb;
};

TerminusSchemaViewer.prototype.getShowSchemaButton = function () {
  var self = this;

  var func = function func() {
    self.mode = "view";
    self.refreshPage();
  };

  return this.getSchemaButton("View Schema", "get_schema", func);
};

TerminusSchemaViewer.prototype.getImportPreviewButton = function () {
  var self = this;

  var func = function func() {
    self.mode = "preview";
    self.refreshPage();
  };

  return this.getSchemaButton("Preview", "preview", func);
};

TerminusSchemaViewer.prototype.getCancelButton = function () {
  var self = this;

  var func = function func() {
    self.mode = "view";
    self.refreshPage();
  };

  return this.getSchemaButton("Cancel", "cancel_update", func);
};

TerminusSchemaViewer.prototype.getImportSaveButton = function () {
  var self = this;

  var func = function func() {
    if (typeof self.doImport == "function") {
      self.doImport();
    }
  };

  return this.getSchemaButton("Import", "import_schema", func);
};

TerminusSchemaViewer.prototype.getSaveButton = function () {
  var self = this;

  var func = function func() {
    var text = self.schema_edit_dom.value;

    if (_typeof(self.schema) == "object") {
      text = JSON.parse(text);
    }

    return self.updateSchema(text, {
      "terminus:encoding": "terminus:" + self.format
    });
  };

  return this.getSchemaButton("Save", "update_schema", func);
};

TerminusSchemaViewer.prototype.getSchemaEditButton = function () {
  var self = this;

  var func = function func() {
    self.mode = "edit";
    self.refreshPage();
  };

  return this.getSchemaButton("Edit", "update_schema", func);
};

TerminusSchemaViewer.prototype.getImportButton = function () {
  var self = this;

  var func = function func() {
    self.mode = "import";
    self.refreshPage();
  };

  return this.getSchemaButton("Import Schema", "import_schema", func);
};

TerminusSchemaViewer.prototype.getSchemaButton = function (label, action, func) {
  var opt = document.createElement("button");
  opt.appendChild(document.createTextNode(label));
  opt.setAttribute("class", "terminus-btn terminus-control-button terminus-schema-" + action);
  opt.addEventListener("click", func);
  return opt;
};
/*
 * Updates schema, then fetches updated version and updates the page with it
 */


TerminusSchemaViewer.prototype.updateSchema = function (text, opts) {
  this.ui.showBusy("Updating Database Schema");
  var self = this;
  return this.ui.client.updateSchema(false, text, opts).then(function (response) {
    self.ui.showBusy("Retrieving updated schema");
    self.loadSchema().then(function (response) {
      self.ui.clearBusy();
      self.schema = response;
      self.mode = "view";
      self.refreshPage("Successfully updated schema");
    });
  })["catch"](function (error) {
    self.ui.clearBusy();
    self.ui.showError(error);
  });
};
/*
 * Imports a schema from the passed url
 * mode: replace | append
 */


TerminusSchemaViewer.prototype.load = function (url, key, mode) {
  var self = this;
  mode = mode ? mode : "replace";
  this.ui.showBusy("Loading schema from " + url);
  return this.ui.client.getSchema(url, {
    key: key,
    format: this.format
  }).then(function (response) {
    var newschema = mode == "append" ? self.appendSchema(response) : response;

    if (self.confirm_before_update) {
      self.showConfirmPage(newschema);
    } else {
      self.ui.showBusy("Updating schema");
      self.updateSchema(false, newschema).then(function (response) {
        self.ui.clearBusy();
        self.ui.showResult("Successfully deployed new schema from " + url);
        return response;
      });
    }
  })["catch"](function (error) {
    self.ui.clearBusy();
    self.ui.showError(error);
  });
};

TerminusSchemaViewer.prototype.appendSchema = function (s2) {
  var nschema = this.schema;

  if (this.format == 'turtle') {
    nschema = this.schema + s2;
  } else if (this.format == 'jsonld') {
    for (var i in s2) {
      nschema[i] = s2[i];
    }
  }

  return nschema;
};

TerminusSchemaViewer.prototype.getClassFrameChooser = function () {
  var np = document.createElement("span");
  np.setAttribute("class", "terminus-classframe-chooser");
  var termcc = new TerminusClassChooser(this.ui);
  termcc.empty_choice = "View Individual Class Frames";
  var self = this;

  termcc.change = function (new_class) {
    if (new_class) {
      self.cls = new_class;

      if (self.mode != "class_frame") {
        self.mode = "class_frame";
        self.refreshPage();
      } else {
        self.refreshMainPage();
      }
    }
  };

  var tcdom = termcc.getAsDOM();
  np.appendChild(tcdom);
  return np;
};

TerminusSchemaViewer.prototype.getClassFrameDOM = function () {
  var np = document.createElement("div");
  np.setAttribute("class", "terminus-schema-page terminus-schema-classframe-page");
  var docviewer = new TerminusDocumentViewer(this.ui, "model");
  docviewer.loadCreateDocument(this.cls);
  docviewer.page_config = "model";
  np.appendChild(docviewer.getAsDOM());
  return np;
};

TerminusSchemaViewer.prototype.showConfirmPage = function (newschema) {
  this.schema = newschema;
  this.confirm_before_update = false;
  this.mode = "edit";
  this.refreshPage("Confirm new schema");
};

TerminusSchemaViewer.prototype.getSchemaEditDOM = function () {
  var np = document.createElement("div");
  np.setAttribute("class", "terminus-schema-page terminus-schema-edit-page");
  var ipval = document.createElement("textarea");
  ipval.setAttribute("class", "terminus-schema-edit terminus-schema-textarea");
  ipval.setAttribute("width", "100%");
  ipval.setAttribute("style", "min-width: 400px; min-height: 400px;");

  if (typeof this.schema == "string") {
    ipval.innerHTML = this.schema;
  } else if (_typeof(this.schema) == "object") {
    ipval.innerHTML = JSON.stringify(this.schema, 0, 4);
  }

  this.schema_edit_dom = ipval;
  np.appendChild(ipval);
  UTILS.stylizeEditor(this.ui, ipval, 'schema', 'turtle');
  return np;
};

TerminusSchemaViewer.prototype.getSchemaViewDOM = function () {
  var self = this;
  var np = document.createElement("div");
  np.setAttribute("class", "terminus-schema-page terminus-schema-view-page");
  var ipval = document.createElement("pre");
  ipval.setAttribute("class", "terminus-schema-view terminus-scheme-pre");

  if (typeof this.schema == "string") {
    var txt = this.schema.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    ipval.innerHTML = txt;
  } else if (_typeof(this.schema) == "object") {
    ipval.innerHTML = JSON.stringify(this.schema, 0, 4);
  }

  var cm = UTILS.stylizeCodeDisplay(this.ui, ipval, np, 'turtle');
  if (!cm) np.appendChild(ipval);
  return np;
};

TerminusSchemaViewer.prototype.getSchemaImportDOM = function () {
  var scd = document.createElement("div");
  scd.setAttribute("class", "terminus-schema-page terminus-schema-import-page");
  var sci = document.createElement("div");
  sci.setAttribute("class", "terminus-form-field");
  var lab = document.createElement("span");
  lab.setAttribute("class", "terminus-form-label terminus-url-loader-input");
  lab.appendChild(document.createTextNode("URL"));
  var ip = document.createElement("input");
  ip.setAttribute("type", "text");
  ip.setAttribute("class", "terminus-form-value terminus-form-url terminus-url-connect");

  if (this.val) {
    ip.value = this.val;
  }

  sci.appendChild(lab);
  sci.appendChild(ip);
  scd.appendChild(sci);
  var sci = document.createElement("div");
  sci.setAttribute("class", "terminus-form-field");
  var klab = document.createElement("span");
  klab.setAttribute("class", "terminus-form-label terminus-import_mode-input");
  klab.appendChild(document.createTextNode("Import Mode"));
  var modes = document.createElement("select");
  modes.setAttribute("class", "terminus-form-select");
  var overwrite = document.createElement("option");
  overwrite.value = "replace";
  overwrite.appendChild(document.createTextNode("Replace Mode"));
  modes.appendChild(overwrite);
  var append = document.createElement("option");
  append.value = "append";
  append.appendChild(document.createTextNode("Append Mode"));
  modes.appendChild(append);
  modes.setAttribute("class", "terminus-form-select terminus-import-mode");
  sci.appendChild(klab);
  sci.appendChild(modes);
  scd.appendChild(sci);
  var sci = document.createElement("div");
  sci.setAttribute("class", "terminus-form-field");
  var klab = document.createElement("span");
  klab.setAttribute("class", "terminus-form-label terminus-url-key-input");
  klab.appendChild(document.createTextNode("Key"));
  var key = document.createElement("input");
  key.setAttribute("type", "text");
  key.setAttribute("class", "terminus-form-value terminus-url-key");
  sci.appendChild(klab);
  sci.appendChild(key);
  scd.appendChild(sci);
  var self = this;

  this.doImport = function () {
    if (ip.value) {
      self.load(ip.value, key.value, modes.value);
    }
  };

  return scd;
};

module.exports = TerminusSchemaViewer;

/***/ }),

/***/ "./src/client/TerminusServer.js":
/*!**************************************!*\
  !*** ./src/client/TerminusServer.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * User interface elements that relate to server context
 *
 * TerminusServerController is a control widget that invokes server actions
 * TerminusServerViewer is a window that displays server actions and server screens
 *
 */
var Datatables = __webpack_require__(/*! ../plugins/datatables.terminus */ "./src/plugins/datatables.terminus.js");

var UTILS = __webpack_require__(/*! ../Utils */ "./src/Utils.js");

function TerminusServerController(ui) {
  this.ui = ui;
}

TerminusServerController.prototype.getAsDOM = function () {
  var rsc = document.createElement("div");
  rsc.setAttribute("class", "terminus-server-controller");
  var self = this;

  if (this.ui && this.ui.server()) {
    var scd = document.createElement("div");
    scd.setAttribute("class", "terminus-server-connection");
    var nav = document.createElement('div');
    nav.setAttribute('class', 'span3');
    var ul = document.createElement('ul');
    ul.setAttribute('class', 'terminus-ul');
    nav.appendChild(ul);
    rsc.appendChild(nav); // change server

    if (this.ui.showControl("change-server")) {
      var a = document.createElement('a');
      a.setAttribute('class', 'terminus-a terminus-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
      var self = this;
      a.addEventListener("click", function () {
        UTILS.removeSelectedNavClass("terminus-selected");
        this.classList.add("terminus-selected");
        self.ui.showLoadURLPage();
      });
      var icon = document.createElement('i');
      icon.setAttribute('class', 'terminus-menu-icon fa fa-link');
      a.appendChild(icon);
      var txt = document.createTextNode('Change Server');
      a.appendChild(txt);
      ul.appendChild(a);
    } // view databases


    if (this.ui.showControl("db")) {
      var a = document.createElement('a');
      a.setAttribute('class', 'terminus-a terminus-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
      var self = this;
      a.addEventListener("click", function () {
        UTILS.removeSelectedNavClass("terminus-selected");
        this.classList.add("terminus-selected");

        if (self.ui.db()) {//self.ui.clearDB();
        }

        self.ui.showServerMainPage();
      });
      var icon = document.createElement('i');
      icon.setAttribute('class', 'terminus-menu-icon fa fa-eye');
      a.appendChild(icon);
      var txt = document.createTextNode('View Databases');
      a.appendChild(txt);
      ul.appendChild(a);
    }

    if (this.ui.showControl("create_database")) {
      var a = document.createElement('a');
      a.setAttribute('class', 'terminus-a terminus-list-group-a terminus-list-group-a-action terminus-nav-width terminus-pointer');
      var self = this;
      a.addEventListener("click", function () {
        UTILS.removeSelectedNavClass("terminus-selected");
        this.classList.add("terminus-selected");

        if (self.ui.db()) {//self.ui.clearDB();
        }

        self.ui.showCreateDBPage();
      });
      var icon = document.createElement('i');
      icon.setAttribute('class', 'terminus-menu-icon fa fa-plus');
      a.appendChild(icon);
      var txt = document.createTextNode('Create New Database');
      a.appendChild(txt);
      ul.appendChild(a);
    }
  }

  return rsc;
};

TerminusServerController.prototype.getServerLabelDOM = function () {
  var srec = this.ui.client.connection.getServerRecord();
  var lab = srec && srec['rdfs:label'] && srec['rdfs:label']["@value"] ? srec['rdfs:label']["@value"] : this.ui.server();
  var desc = srec && srec['rdfs:comment'] && srec['rdfs:comment']["@value"] ? srec['rdfs:comment']["@value"] : "";
  desc += " Server URL: " + this.ui.server();
  var val = document.createElement("span");
  val.setAttribute("class", "terminus-server-value");
  val.setAttribute("title", desc);
  val.appendChild(document.createTextNode(lab));
  val = document.createElement('div');
  return val;
};

function TerminusServerViewer(ui) {
  this.ui = ui;
  this.server = this.ui.server();
}

TerminusServerViewer.prototype.getAsDOM = function (selected) {
  var self = this;
  var pd = document.createElement("span");
  pd.setAttribute("class", "terminus-server-home-page");

  if (this.ui.server()) {
    var scd = document.createElement("span");
    scd.setAttribute("class", "terminus-server-home");

    if (this.ui.showView("server")) {// 11092019 scd.appendChild(this.getServerDetailsDOM());
    }

    if (this.ui.showView("change-server")) {
      var csbut = document.createElement("button");
      csbut.setAttribute("class", "terminus-control-button terminus-change-server-button terminus-btn");
      csbut.appendChild(document.createTextNode("Disconnect"));
      csbut.addEventListener("click", function () {
        //self.ui.clearDB();
        //self.ui.clearServer();
        self.ui.showLoadURLPage();
      }); // 11092019 scd.appendChild(csbut);
    }

    if (this.ui.showView("create_database")) {
      var crbut = document.createElement("button");
      crbut.setAttribute("class", "terminus-control-button terminus-create-db-button terminus-btn");
      crbut.appendChild(document.createTextNode("Create New Database"));
      crbut.addEventListener("click", function () {
        if (self.ui.db()) {//self.ui.clearDB();
        }

        self.ui.clearMessages();
        self.ui.showCreateDBPage();
      }); // 11092019 scd.appendChild(crbut);
    }

    if (this.ui.showView("db")) {
      scd.appendChild(this.getDBListDOM());
    }

    pd.appendChild(scd);
  } else {
    self.ui.showLoadURLPage(); //pd.appendChild(this.getLoadURLPage());
  }

  return pd;
};

TerminusServerViewer.prototype.getServerDetailsDOM = function () {
  var scd = document.createElement("span");
  scd.setAttribute("class", "terminus-server-details terminus-server-banner");
  var scl = document.createElement("span");
  scl.setAttribute("class", "terminus-label terminus-server-info");
  scl.appendChild(document.createTextNode("Connected to Server - "));
  var scs = document.createElement("span");
  scs.setAttribute("class", "terminus-value terminus-server-info");
  scs.appendChild(document.createTextNode(this.ui.server()));
  scd.appendChild(scl);
  scd.appendChild(scs);
  return scd;
};

TerminusServerViewer.prototype.wrapTableLinkCell = function (dbid, text) {
  var self = this;
  var wrap = document.createElement("a");
  wrap.setAttribute("href", "#");
  wrap.setAttribute("class", "terminus-table-content");
  wrap.appendChild(document.createTextNode(text));
  wrap.addEventListener("click", function () {
    self.ui.connectToDB(dbid);
    self.ui.showDBMainPage();
  });
  return wrap;
};

TerminusServerViewer.prototype.getDBListDOM = function () {
  var self = this;
  var sec = document.createElement("div");
  sec.setAttribute("class", "terminus-db-list-section");
  var lihed = document.createElement("h3");
  lihed.setAttribute("class", "terminus-db-list-title terminus-module-head");
  lihed.appendChild(document.createTextNode("Available Databases"));
  sec.appendChild(lihed);
  var scd = document.createElement("table");
  scd.setAttribute("class", "terminus-db-list terminus-db-size terminus-db-border");
  var thead = document.createElement("thead");
  var thr = document.createElement("tr");
  var th1 = document.createElement("th");
  th1.appendChild(document.createTextNode("ID"));
  th1.setAttribute("class", "terminus-db-id terminus-table-th");
  var th2 = document.createElement("th");
  th2.appendChild(document.createTextNode("Title"));
  th2.setAttribute("class", "terminus-db-title terminus-table-th");
  var th3 = document.createElement("th");
  th3.appendChild(document.createTextNode("Description"));
  th3.setAttribute("class", "terminus-db-description terminus-table-th");
  var th4 = document.createElement("th");
  th4.setAttribute("class", "terminus-db-size terminus-table-th");
  th4.appendChild(document.createTextNode("Size"));
  var th5 = document.createElement("th");
  th5.setAttribute("class", "terminus-db-created terminus-table-th");
  th5.appendChild(document.createTextNode("Created"));
  var th6 = document.createElement("th");
  th6.appendChild(document.createTextNode("Delete"));
  th6.setAttribute("class", "terminus-db-delete terminus-table-th");
  thr.appendChild(th1);
  thr.appendChild(th2);
  thr.appendChild(th3);
  thr.appendChild(th4);
  thr.appendChild(th5);
  thr.appendChild(th6);
  thead.appendChild(thr);
  scd.appendChild(thead);
  var tbody = document.createElement("tbody");
  var dbrecs = this.ui.client.connection.getServerDBRecords();

  for (var fullid in dbrecs) {
    var dbrec = dbrecs[fullid];
    var dbid = fullid.split(":")[1];
    var tr = document.createElement("tr");
    var td1 = document.createElement("td");
    td1.appendChild(this.wrapTableLinkCell(dbid, dbid));
    td1.setAttribute("class", "terminus-db-id");
    var td2 = document.createElement("td");
    td2.setAttribute("class", "terminus-db-title");
    var txt = dbrec && dbrec['rdfs:label'] && dbrec['rdfs:label']['@value'] ? dbrec['rdfs:label']['@value'] : "";
    td2.appendChild(this.wrapTableLinkCell(dbid, txt));
    var td3 = document.createElement("td");
    td3.setAttribute("class", "terminus-db-description");
    var txt = dbrec && dbrec['rdfs:comment'] && dbrec['rdfs:comment']['@value'] ? dbrec['rdfs:comment']['@value'] : "";
    td3.appendChild(this.wrapTableLinkCell(dbid, txt));
    var td4 = document.createElement("td");
    td4.setAttribute("class", "terminus-db-size");
    var txt = dbrec && dbrec['terminus:size'] && dbrec['terminus:size']['@value'] ? dbrec['terminus:size']['@value'] : "";
    td4.appendChild(this.wrapTableLinkCell(dbid, txt));
    var td5 = document.createElement("td");
    td5.setAttribute("class", "terminus-db-created");
    var txt = dbrec && dbrec['terminus:last_updated'] && dbrec['terminus:last_updated']['@value'] ? dbrec['terminus:last_updated']['@value'] : "";
    td5.appendChild(this.wrapTableLinkCell(dbid, txt));
    var td6 = document.createElement("td");
    td6.setAttribute("class", "db-delete");

    if (this.deleteDBPermitted(dbid)) {
      if (this.ui.pluginAvailable("font-awesome")) {
        var delbut = document.createElement('i');
        delbut.setAttribute("class", "terminus-db-list-del-icon fa fa-times-circle");
      } else {
        var delbut = document.createElement("button");
        delbut.appendChild(document.createTextNode("Delete"));
        delbut.setAttribute("class", "terminus-control-button terminus-delete-db-button");
      } // function to fix db in a closure


      var delDB = function delDB(db) {
        return function () {
          self.ui.deleteDatabase(db);
        };
      };

      delbut.addEventListener("click", delDB(dbid));
      td6.appendChild(delbut);
    }

    tr.appendChild(td1);
    tr.appendChild(td2);
    tr.appendChild(td3);
    tr.appendChild(td4);
    tr.appendChild(td5);
    tr.appendChild(td6);
    tbody.appendChild(tr);
  }

  scd.appendChild(tbody);
  sec.appendChild(scd);

  if (this.ui.pluginAvailable("datatables")) {
    var dt = new Datatables();
    var tab = dt.draw(false, scd);
  }

  return sec;
};

TerminusServerViewer.prototype.deleteDBPermitted = function (dbid) {
  if (this.ui.client.connection.capabilitiesPermit("delete_database", dbid)) return true;
  return false;
};

module.exports = {
  TerminusServerViewer: TerminusServerViewer,
  TerminusServerController: TerminusServerController
};

/***/ }),

/***/ "./src/client/TerminusURL.js":
/*!***********************************!*\
  !*** ./src/client/TerminusURL.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function TerminusURLLoader(ui, val) {
  this.ui = ui;
  this.val = val;
  this.url_input = false;
  this.key_input = false;
}

TerminusURLLoader.prototype.getLabelDOM = function () {
  return document.createTextNode("Connect");
};

TerminusURLLoader.prototype.getFormFieldDOM = function (ip, fname, ltxt, pholder) {
  var sci = document.createElement("div");
  sci.setAttribute("class", "terminus-form-horizontal terminus-control-group terminus-form-field-spacing terminus-form-field terminus-field-" + fname);
  var lab = document.createElement("span");
  lab.setAttribute("class", "terminus-control-label terminus-form-label terminus-form-field-label terminus-label-" + fname);
  lab.appendChild(document.createTextNode(ltxt));
  ip.setAttribute("type", "text");
  ip.setAttribute("placeholder", pholder);
  sci.appendChild(lab);
  sci.appendChild(ip);
  return sci;
};

TerminusURLLoader.prototype.getAsDOM = function () {
  var scd = document.createElement("div");
  scd.setAttribute("class", "terminus-form terminus-url-loader");
  var stit = document.createElement("h3");
  stit.setAttribute("class", "terminus-form-header terminus-connect-header terminus-module-head");
  stit.appendChild(document.createTextNode("Connect To Terminus Server"));
  scd.appendChild(stit);
  var mfd = document.createElement('div');
  mfd.setAttribute('class', 'terminus-form-border');
  scd.appendChild(mfd);
  this.url_input = document.createElement("input");
  this.url_input.setAttribute("class", "terminus-form-value terminus-form-url terminus-form-field-input terminus-input-text");

  if (this.val) {
    this.url_input.value = this.val;
  }

  mfd.appendChild(this.getFormFieldDOM(this.url_input, "connect", "URL", "Terminus DB URL"));
  this.key_input = document.createElement("input");
  this.key_input.setAttribute("class", "terminus-form-value terminus-value terminus-input-text");
  mfd.appendChild(this.getFormFieldDOM(this.key_input, "connect", "Key", "Server API Key"));
  var loadbuts = document.createElement("div");
  loadbuts.setAttribute("class", "terminus-control-buttons");
  var loadbut = document.createElement("button");
  loadbut.setAttribute("class", "terminus-control-button terminus-url-load terminus-btn");
  loadbut.appendChild(document.createTextNode("Connect"));
  var self = this;
  loadbut.addEventListener("click", function () {
    if (self.url_input.value) {
      self.ui.load(self.url_input.value, self.key_input.value);
    }
  });
  loadbuts.appendChild(loadbut);
  mfd.appendChild(loadbuts);
  return scd;
};

module.exports = TerminusURLLoader;

/***/ }),

/***/ "./src/client/ValueRenderer.js":
/*!*************************************!*\
  !*** ./src/client/ValueRenderer.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var HTMLPropertyViewer = __webpack_require__(/*! ./PropertyViewer */ "./src/client/PropertyViewer.js");

var RenderingMap = __webpack_require__(/*! ./RenderingMap */ "./src/client/RenderingMap.js");

function ValueRenderer(dataframe, index, parent, options) {
  this.frame = dataframe;
  this.index = index;
  this.parent = parent;
  this.options = this.setOptions(options);
  this.originalValue = this.value();
}

ValueRenderer.prototype.depth = function () {
  return this.parent ? this.parent.depth() : false;
};

ValueRenderer.prototype.property = function () {
  return this.parent ? this.parent.property() : false;
};

ValueRenderer.prototype.subject = function () {
  return this.parent ? this.parent.subject() : false;
};

ValueRenderer.prototype.subjectClass = function () {
  return this.parent ? this.parent.subjectClass() : false;
};

ValueRenderer.prototype.type = function () {
  return this.frame ? this.frame.range : false;
};

ValueRenderer.prototype.range = function () {
  return this.frame ? this.frame.range : false;
};

ValueRenderer.prototype.value = function () {
  return this.frame ? this.frame.get() : false;
};

ValueRenderer.prototype.isEntity = function () {
  return this.frame ? this.frame.isEntity() : false;
};

ValueRenderer.prototype.currentViewer = function () {
  return this.viewerType;
};

ValueRenderer.prototype.copy = function (nf) {
  var nvr = new ValueRenderer(nf, false, this.parent, this.options);
  nvr.mode = this.mode;
  nvr.view = this.view;
  return nvr;
};

ValueRenderer.prototype.setFacet = function (facet) {
  this.facet = facet;
  this.parent.redraw();
};

ValueRenderer.prototype.parentFacetChange = function (pfacet) {
  if (pfacet == "page") this.setFacet("page");
  if (pfacet == "multiline") this.setFacet("line");
  if (pfacet == "line") this.setFacet("inline");
  if (pfacet == "summary") this.setFacet("icon");
};

ValueRenderer.prototype.getDefaultFacet = function () {
  if (this.parent.currentFacet() == "page" || this.parent.currentFacet() == "multiline") {
    return "line";
  }

  return "inline";
};

ValueRenderer.prototype.getAvailableFacets = function () {
  return Object.values(this.facets);
};

ValueRenderer.prototype.getDefaultFacets = function () {
  var defs = {
    page: {
      label: "Full Page",
      value: "page",
      features: ["facet", "type", "cardinality", "body", "status", "facet", "viewer", "control"],
      controls: ["delete", "clone", "add", "reset", "cancel", "update", "mode", "show", "hide"]
    },
    line: {
      label: "Single Line",
      value: "line",
      features: ["facet", "type", "cardinality", "body", "status", "facet", "viewer", "control"],
      controls: ["delete", "clone", "add", "reset", "cancel", "update", "mode", "show", "hide"]
    },
    inline: {
      label: "Inline",
      value: "inline",
      features: ["facet", "type", "cardinality", "body", "status", "facet", "viewer", "control"],
      controls: ["delete", "clone", "add", "reset", "cancel", "update", "mode", "show", "hide"]
    },
    label: {
      label: "Label",
      value: "label",
      features: ["facet", "status", "body"],
      controls: []
    },
    icon: {
      label: "Snippet",
      value: "icon",
      features: ["facet", "summary"],
      controls: []
    }
  };
  return defs;
};

ValueRenderer.prototype.currentFacet = function () {
  return this.facet;
};

ValueRenderer.prototype.setOptions = function (options) {
  return RenderingMap.decorateRenderer(options, this);
};

ValueRenderer.prototype.hideDisabledControls = function () {
  return this.hide_disabled_controls;
};

ValueRenderer.prototype.setMode = function (mode) {
  this.mode = mode;
  this.options.mode = mode;
  this.viewerType = false;
  this.redraw();
};

ValueRenderer.prototype.setView = function (view) {
  this.view = view;
  this.options.view = view;
  this.redraw();
};

ValueRenderer.prototype.getAPIURL = function (a, b) {
  if (this.parent && this.parent.parent) {
    if (client = this.parent.parent.getClient()) {
      var apiurl = client.dbURL() + a + "/" + b;
      return apiurl;
    }
  }

  return false;
};

ValueRenderer.prototype.getClient = function () {
  if (this.parent && this.parent.parent) {
    return this.parent.parent.getClient();
  }

  return false;
};

ValueRenderer.prototype.getController = function () {
  if (this.parent && this.parent.parent) {
    return this.parent.parent.getController();
  }

  return false;
};

ValueRenderer.prototype.DBURL = function () {
  if (this.parent && this.parent.parent) {
    if (client = this.parent.parent.getClient()) {
      return client.dbURL();
    }
  }

  return false;
};

ValueRenderer.prototype.getEntityReference = function (url, cls, entities, opts) {
  if (this.parent && this.parent.parent) {
    if (client = this.parent.parent.getClient()) {
      return client.getEntityReference(url, cls, entities, opts);
    }
  }
};

ValueRenderer.prototype.badData = function (bd) {
  alert("bad data " + bd);
};

ValueRenderer.prototype.setNew = function () {
  this.new_value = true;
};

ValueRenderer.prototype.isNew = function () {
  if (this.new_value) {
    return true;
  }

  return this.parent.isNew();
};

ValueRenderer.prototype.isUpdated = function () {
  if (this.frame.get() != this.originalValue) {
    return true;
  }

  return false;
};

ValueRenderer.prototype.getSummary = function () {
  var ret = {
    status: "ok"
  };
  if (this.isNew()) ret.status = "new";else if (this.isUpdated()) ret.status = "updated";
  var val = this.frame.get();

  if (val) {
    if (val.length && val.length > this.text_summary_length) {
      ret["long"] = val.substring(0, this.text_summary_length) + "..." + " (" + val.length + " characters)";
    } else {
      ret["long"] = val;
    }
  } else {
    ret["long"] = "empty";
  }

  return ret;
};

ValueRenderer.prototype.cardControlAllows = function (action) {
  if (this.parent.cframe.hasRestriction()) {
    var rest = this.parent.cframe.restriction;
    var currentnum = this.parent.values.length;

    if (action == "add" || action == "clone") {
      if (rest.max && currentnum >= rest.max) {
        return false;
      }
    }

    if (action == "delete" && rest.min && currentnum <= rest.min) {
      return false;
    }
  }

  return true;
};

ValueRenderer.prototype.set = function (v) {
  this.frame.set(v);
  this.viewer.redrawHeader();
  this.parent.childUpdated();
};

ValueRenderer.prototype["delete"] = function () {
  this.parent.deletePropertyValue(this.value(), this.index);
  this.parent.parent.redraw();
};

ValueRenderer.prototype.load = function (link) {
  this.parent.load(link);
};

ValueRenderer.prototype.hide = function () {
  this.setView("hidden");
};

ValueRenderer.prototype.show = function () {
  this.setView("full");
};

ValueRenderer.prototype.cancel = function () {
  this.reset();
  this.setMode("view");
};

ValueRenderer.prototype.save = function () {
  if (this.parent) {
    this.parent.save();
  }
};

ValueRenderer.prototype.reset = function () {
  this.set(this.originalValue);
  this.redraw();
};

ValueRenderer.prototype.clone = function () {
  var newb = this.parent.addPropertyValue(this.value());
  var nrend = this.copy(newb);
  nrend.setNew();
  nrend.mode = "edit";
  nrend.index = this.parent.values.length;
  this.parent.values.push(nrend);
  this.parent.childUpdated();
  this.parent.redraw();
  this.parent.goToValue(this.parent.values.length - 1);
};

ValueRenderer.prototype.getViewerForValue = function () {
  return new HTMLDataViewer(this);
};

ValueRenderer.prototype.getFeaturesForFacet = function (facet) {
  return this.facets[facet].features.concat(this.facets[facet].controls);
};

ValueRenderer.prototype.showFeature = function (which) {
  if (this.features.indexOf(which) == -1 && this.controls.indexOf(which) == -1) {
    return false;
  }

  var cardcontrols = ["delete", "clone", "add"];

  if (cardcontrols.indexOf(which) != -1) {
    if (!this.cardControlAllows(which)) return false;
  }

  var updcontrols = ["update", "reset"];

  if (this.hideDisabledControls() && updcontrols.indexOf(which) != -1) {
    if (!this.isUpdated()) {
      return false;
    }
  }

  if (which == 'hide' && this.view == "hidden") return false;
  if (which == 'show' && this.view != "hidden") return false;
  var fets = this.getFeaturesForFacet(this.facet);
  return fets.indexOf(which) != -1;
};

ValueRenderer.prototype.render = function (viewer) {
  this.viewer = viewer ? viewer : this.getViewerForValue();
  return this.viewer.render();
};

ValueRenderer.prototype.extract = function () {
  var val = this.value();

  if (val !== "" && val !== false && this.frame.isDatatypeProperty()) {
    var objlit = {
      "@value": this.value()
    }; //var objlit = { data: this.value()}

    if (this.frame.isString()) objlit["@language"] = this.frame.lang();else objlit["@type"] = this.type();
    return objlit;
  } else return val;
};

ValueRenderer.prototype.getValueHeaderViewer = function () {
  return new HTMLDataHeaderViewer();
};

ValueRenderer.prototype.getDataValueViewer = function () {
  if (!this.viewerType) {
    this.viewerType = this.getViewerForDataValue();
  }

  return RenderingMap.getViewer(this.viewerType, this.viewerOptions);
};

ValueRenderer.prototype.getAvailableViewers = function () {
  var dt = this.frame.getTypeShorthand();

  if (!dt) {
    alert("here");
  }

  var ft = this.frame.ftype();

  if (this.mode == "view") {
    return RenderingMap.getAvailableDataViewers(dt, ft);
  }

  return RenderingMap.getAvailableDataEditors(dt, ft);
};

ValueRenderer.prototype.setViewer = function (viewer) {
  this.viewerType = viewer;
  this.redraw();
};

ValueRenderer.prototype.getViewerForDataValue = function () {
  var dt = this.frame.getTypeShorthand();
  var ft = this.frame.ftype();

  if (this.mode == "edit") {
    return RenderingMap.getEditorForDataFrame(dt, ft);
  }

  return RenderingMap.getViewerForDataFrame(dt, ft);
};

ValueRenderer.prototype.redraw = function () {
  this.viewer.clear();
  this.render(this.viewer);
};

module.exports = ValueRenderer;

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TerminusUI = __webpack_require__(/*! ./TerminusUI */ "./src/TerminusUI.js");

var FrameHelper = __webpack_require__(/*! ./FrameHelper */ "./src/FrameHelper.js");

var RenderingMap = __webpack_require__(/*! ./client/RenderingMap */ "./src/client/RenderingMap.js");

var terminator = new TerminusUI(TerminusConfig);
var pconfig = {};
pconfig.buttons = {
  'client': document.getElementById("terminus-client-btn"),
  'explorer': document.getElementById("terminus-explorer-btn")
};
pconfig.controller = document.getElementById("terminus-control-panel");
pconfig.messages = document.getElementById("terminus-user-messages");
pconfig.plugins = document.getElementById("terminus-plugin-loader");
pconfig.explorer = document.getElementById("terminus-explorer");
pconfig.viewer = document.getElementById("terminus-content-viewer");
var nlocation = TerminusConfig && TerminusConfig.location ? TerminusConfig.location : false;
terminator.draw(pconfig, nlocation);
/* 11092019 var cssloader = document.getElementById("terminus-css-loader");
cssloader.addEventListener("change", function(){
	terminator.piman.loadPageCSS(this.value);
}); */

function showPanel(mode) {
  toggleHeaders(mode, document.getElementById("terminus-content-viewer"));
}

module.exports = {
  TerminusUI: TerminusUI,
  FrameHelper: FrameHelper,
  RenderingMap: RenderingMap
};

/***/ }),

/***/ "./src/plugins/TerminusPlugin.js":
/*!***************************************!*\
  !*** ./src/plugins/TerminusPlugin.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

function TerminusPluginManager() {
  this.preloaded = [];
  this.loaded = [];
  this.loading = [];
  this.precluded = [];
  this.plugins = {};
  this.plugins["font-awesome"] = {
    label: "Font Awesome",
    css: ["https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0-11/css/all.css"]
  };
  this.plugins["quill"] = {
    label: "Quill",
    js: ["https://cdn.quilljs.com/1.3.6/quill.min.js"],
    css: ["https://cdn.quilljs.com/1.3.6/quill.snow.css"],
    plugin: "quill.terminus.js"
  };
  this.plugins["codemirror"] = {
    label: "Code Mirror",
    js: ["https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.2/codemirror.js", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.2/mode/xml/xml.js", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.2/mode/css/css.js", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.2/mode/turtle/turtle.js", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.2/mode/javascript/javascript.js", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.2/addon/hint/anyword-hint.js", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.2/addon/hint/show-hint.js", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/addon/runmode/runmode.js", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/mode/http/http.js", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/addon/edit/closebrackets.js", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/addon/edit/matchbrackets.js", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/addon/display/placeholder.js"],
    css: ["https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.2/codemirror.css", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.2/addon/hint/show-hint.css", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/theme/neo.css", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/theme/erlang-dark.css", "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/theme/eclipse.css"]
  };
  this.plugins["jquery"] = {
    label: "jQuery",
    js: ["https://code.jquery.com/jquery-2.2.4.min.js"]
  };
  this.plugins["jqueryui"] = {
    label: "jQuery UI",
    css: ["https://code.jquery.com/ui/1.12.0/themes/smoothness/jquery-ui.css"],
    js: ["https://code.jquery.com/ui/1.12.0/jquery-ui.js"],
    requires: ['jquery']
  };
  this.plugins["datatables"] = {
    label: "Data Tables",
    js: ["https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"],
    css: ["https://cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css"],
    requires: ['jquery']
  };
  /*this.plugins["prettify"] = {
  	label: "Prettify",
  	js: ["https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/prettify.js"],
  	css: ["https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/prettify.css"],
  	requires: ['jquery']
  };*/

  this.plugins["gmaps"] = {
    label: "Google Maps",
    js: ["https://maps.googleapis.com/maps/api/js"],
    plugin: "gmaps.terminus.js"
  };
  this.plugins["d3"] = {
    label: "d3",
    js: ["https://code.jquery.com/jquery-2.2.4.min.js"],
    requires: ['jquery']
  };
  this.plugins["select2"] = {
    label: "Select 2",
    js: ["https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.7/js/select2.min.js"],
    css: ["https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.7/css/select2.min.css"],
    plugin: "select2.terminus.js",
    requires: ['jquery']
  };
  this.plugins["jsoneditor"] = {
    label: "JSON Editor",
    js: ["plugins/libs/jsoneditor.min.js"],
    css: ["plugins/libs/jsoneditor.min.css"],
    plugin: "jsoneditor.terminus.js"
  };
  /*this.plugins["bootstrap"] = {
  	label: "Bootstrap",
  	js: ["https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"],
  	css: ["https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.2.2/css/bootstrap.min.css",
  		"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.2.2/css/bootstrap-responsive.min.css"]
  };
  this.plugins["flot"] = {
  	label: "Flot",
  	js: ["https://cdnjs.cloudflare.com/ajax/libs/flot/0.8.3/jquery.flot.min.js",
  		"https://cdnjs.cloudflare.com/ajax/libs/flot/0.8.3/jquery.flot.resize.min.js"],
  	requires: ["jquery"]
  };*/
}

TerminusPluginManager.prototype.setPluginOptions = function (opts) {
  for (var p in opts) {
    if (!this.plugins[p]) continue;

    for (var k in opts[p]) {
      this.plugins[p][k] = opts[p][k];
    }
  }
};

TerminusPluginManager.prototype.init = function (opts, then) {
  if (opts) this.setPluginOptions(opts);
  this.calculatePreloaded();
  var toload = this.calculateRequiredInitPlugins(opts);

  if (toload && toload[0].length) {
    if (toload[1].length) {
      var self = this;

      var nthen = function nthen() {
        self.loadPlugins(toload[1], then);
      };

      this.loadPlugins(toload[0], nthen);
    } else {
      this.loadPlugins(toload[0], then);
    }
  } else if (then) {
    then();
  }
};

TerminusPluginManager.prototype.calculateRequiredInitPlugins = function (opts) {
  if (opts) {
    var pins = [];

    for (var pid in opts) {
      if (opts[pid] && pins.indexOf(pid) == -1) {
        if (_typeof(opts[pid]) != "object" && opts[pid]) {
          pins.push(pid);
        } else if (_typeof(opts[pid]) == "object") {
          if (!(typeof opts[pid].loaded != "undefined" && !opts[pid].loaded)) {
            pins.push(pid);
          }
        }
      }
    }
  } else {
    var pins = this.getDefaultPlugins();
  }

  var needed_pins = [];

  for (var i = 0; i < pins.length; i++) {
    if (this.loaded.indexOf(pins[i]) == -1 && this.preloaded.indexOf(pins[i]) == -1) {
      needed_pins.push(pins[i]);
    }
  }

  var loading_order = [[], []];

  for (var i = 0; i < needed_pins.length; i++) {
    if (this.plugins[needed_pins[i]].requires && this.plugins[needed_pins[i]].requires.length) {
      loading_order[1].push(needed_pins[i]);
    } else {
      loading_order[0].push(needed_pins[i]);
    }
  }

  return loading_order;
};

TerminusPluginManager.prototype.getAvailablePlugins = function () {
  return this.plugins;
};

TerminusPluginManager.prototype.calculatePreloaded = function () {
  for (var pl in this.plugins) {
    if (this.pluginAvailable(pl)) {
      this.preloaded.push(pl);
    }
  }
};

TerminusPluginManager.prototype.pluginAvailable = function (plugin, version_check) {
  if (_typeof(this.plugins[plugin]) == "object") {
    var pluginmeta = this.plugins[plugin];

    if (pluginmeta.requires && pluginmeta.requires.length) {
      for (var i = 0; i < pluginmeta.requires.length; i++) {
        if (!this.pluginAvailable(pluginmeta.requires[i], version_check)) {
          return false;
        }
      }
    }

    var required_version = pluginmeta.version ? pluginmeta.version : false;

    switch (plugin) {
      case "jquery":
        {
          if (typeof jQuery == "undefined") return false;

          if (version_check && required_version) {}

          return true;
          break;
        }

      case "jqueryui":
        {
          if (typeof jQuery != "undefined" && jQuery.isFunction(jQuery.fn.slider)) return true;
          return false;
          break;
        }

      case "quill":
        {
          if (typeof Quill == "undefined") return false;
          return true;
          break;
        }

      case "jsoneditor":
        {
          if (typeof JSONEditor == "undefined") return false;
          return true;
          break;
        }

      case "codemirror":
        {
          if (typeof CodeMirror == "undefined") return false;
          return this.plugins[plugin]; // sent plugin config with darkmode true/ false
        }

      case "font-awesome":
        {
          //if(typeof CodeMirror != "undefined") return true;
          return this.fontAwesomeCheck();
        }

      case "datatables":
        {
          if (typeof jQuery != "undefined" && jQuery.isFunction(jQuery.fn.dataTable)) return true;
          return false;
        }

      case "select2":
        {
          if (typeof jQuery != "undefined" && jQuery.isFunction(jQuery.fn.select2)) return true;
          return false;
        }

      case "gmaps":
        {
          if (typeof google == "undefined" || typeof google.maps == "undefined") return false;
          return true;
        }

      case "openlayers":
        {
          if (typeof ol == "undefined" || typeof ol.Map == "undefined") return false;
          return true;
        }

      case "d3":
        {
          if (typeof d3 == "undefined") return false;
          return true;
        }
    }
  } else {
    console.log(new Error(plugin + " is not a supported plugin ID"));
  }

  return false;
};

TerminusPluginManager.prototype.fontAwesomeCheck = function () {
  var span = document.createElement('span');
  span.className = 'fa';
  span.style.display = 'none';
  document.body.insertBefore(span, document.body.firstChild);

  function css(element, property) {
    return window.getComputedStyle(element, null).getPropertyValue(property);
  }

  var loaded = false;
  var fontAwsm = css(span, 'font-family');

  if (fontAwsm.replace(/"/g, "") == 'Font Awesome 5 Free') {
    // remove double quotes
    loaded = true;
  }

  document.body.removeChild(span);
  return loaded;
};

TerminusPluginManager.prototype.getDefaultPlugins = function () {
  var defplugs = ["font-awesome"];
  return defplugs;
};

TerminusPluginManager.prototype.loadPlugins = function (plugins, then) {
  var ticker = plugins.length;

  var cback = function cback() {
    if (--ticker <= 1 && then) {
      then();
    }
  };

  for (var i = 0; i < plugins.length; i++) {
    this.loadPlugin(plugins[i], cback);
  }
};

TerminusPluginManager.prototype.loadPlugin = function (plugin, then) {
  var pug = this.plugins[plugin];

  if (pug.css) {
    for (var i = 0; i < pug.css.length; i++) {
      var cssid = plugin + "_css_" + i;
      FrameHelper.loadDynamicCSS(cssid, pug.css[i]);
    }
  }

  var scripts = pug.js ? pug.js : [];

  if (plugin == "gmaps" && pug.key) {
    scripts[0] += "?key=" + pug.key;
  }

  if (pug.plugin) {
    scripts.push("plugins/" + pug.plugin);
  }

  if (plugin == "codemirror") {
    var cm = scripts[0];
    var sid = plugin + "_js_" + (scripts.length - 1);
    scripts.splice(0, 1);
    var self = this;

    var cback = function cback() {
      self.loadPluginScripts(plugin, scripts, then);
    };

    FrameHelper.loadDynamicScript(sid, cm, cback);
  } else {
    this.loadPluginScripts(plugin, scripts, then);
  }
};

TerminusPluginManager.prototype.loadPluginScripts = function (plugin, scripts, then) {
  var ticker = scripts.length - 1;
  var self = this;

  var cback = function cback() {
    if (ticker == 0) {
      if (self.loaded.indexOf(plugin) == -1) {
        self.loaded.push(plugin);
      }

      if (self.loading.indexOf(plugin) != -1) {
        self.loading.splice(self.loading.indexOf(plugin), 1);
      }

      then();
    }

    ticker--;
  };

  if (scripts.length == 0) {
    this.loaded.push(plugin);
  } else {
    this.loading.push(plugin);
  }

  for (var i = 0; i < scripts.length; i++) {
    var sid = plugin + "_js_" + i;
    FrameHelper.loadDynamicScript(sid, scripts[i], cback);
  }
};

TerminusPluginManager.prototype.loadPageCSS = function (css) {
  cssfid = "terminus_client_css";
  var cssdom = document.getElementById(cssfid);

  if (cssdom) {
    cssdom.parentNode.removeChild(cssdom);
  }

  if (css) {
    cssurl = "css/" + css + ".css";
    FrameHelper.loadDynamicCSS(cssfid, cssurl);
  }
};

TerminusPluginManager.prototype.pluginLoadable = function (pid) {
  return this.precluded.indexOf(pid) !== -1 || this.pluginLoadedOrLoading(pid);
};

TerminusPluginManager.prototype.pluginLoadedOrLoading = function (pid) {
  if (this.loaded.indexOf(pid) != -1) return true;
  if (this.preloaded.indexOf(pid) != -1) return true;
  if (this.loading.indexOf(pid) != -1) return true;
  return false;
};

TerminusPluginManager.prototype.disabled = function (pid, obj) {
  if (this.precluded.indexOf(pid) != -1) return true;

  if (obj.requires) {
    for (var i = 0; i < obj.requires.length; i++) {
      if (!this.pluginLoadedOrLoading(obj.requires[i])) return true;
    }
  }

  return false;
};

TerminusPluginManager.prototype.getPluginDOM = function (plugid, obj, ui) {
  var a = document.createElement("a");
  var cl = document.createElement("span");
  a.appendChild(cl);
  cl.setAttribute("class", "terminus-plugin-control");
  var cbox = document.createElement("input");
  cbox.id = "terminus-plugin-control-" + plugid;
  cbox.type = "checkbox";

  if (this.preloaded.indexOf(plugid) != -1) {
    cbox.checked = true;
    cbox.disabled = true;
  } else if (this.loaded.indexOf(plugid) != -1) {
    cbox.checked = true;
  } else if (this.loading.indexOf(plugid) != -1) {
    cbox.checked = true;
  } else if (this.disabled(plugid, obj)) {
    cbox.disabled = true;
  }

  var clab = document.createElement("label");
  clab.setAttribute("class", "terminus-plugin-label terminus-pointer");
  clab.setAttribute("for", cbox.id);
  clab.appendChild(document.createTextNode(obj.label));
  cl.appendChild(clab);
  cl.appendChild(cbox);
  var self = this;
  cbox.addEventListener("change", function () {
    self.togglePlugin(plugid, ui);
  });
  return a;
};

TerminusPluginManager.prototype.togglePlugin = function (plugid, ui) {
  if (this.loaded.indexOf(plugid) == -1) {
    var then = function then() {
      ui.redraw();
    };

    this.loadPlugin(plugid, then);
  } else {
    this.unloadPlugin(plugid);
  }

  FrameHelper.removeChildren(ui.plugins);
  ui.drawPlugins();
};

TerminusPluginManager.prototype.unloadPlugin = function (plugid) {
  if (!this.plugins[plugid] || this.loaded.indexOf(plugid) == -1) {
    console.log(new Error(plugid + " plugin unload request when it is not loaded"));
    return false;
  }

  var pug = this.plugins[plugid];
  var num = pug.js ? pug.js.length : 0;
  if (pug.plugin) num++;

  for (var i = 0; i < num; i++) {
    var cssfid = plugid + "_js_" + i;
    var cssdom = document.getElementById(cssfid);

    if (cssdom) {
      cssdom.parentNode.removeChild(cssdom);
    }
  }

  num = pug.css ? pug.css.length : 0;

  for (var i = 0; i < num; i++) {
    var cssfid = plugid + "_css_" + i;
    var cssdom = document.getElementById(cssfid);

    if (cssdom) {
      cssdom.parentNode.removeChild(cssdom);
    }
  }

  this.loaded.splice(this.loaded.indexOf(plugid), 1);
};

TerminusPluginManager.prototype.getAsDOM = function (ui) {
  var dm = document.createElement("span");
  dm.setAttribute("class", "terminus-plugin-manager");
  var clh = document.createElement("span");
  clh.setAttribute("class", "terminus-plugin-control-header terminus-plugin-nav terminus-pointer");
  clh.appendChild(document.createTextNode("Plugins"));
  dm.appendChild(clh);
  var a = document.createElement('a');
  this.showPlugins(a, ui);
  clh.appendChild(a);
  a.style.display = 'none';
  clh.addEventListener('click', function () {
    if (a.style.display == 'none') a.style.display = 'block';else a.style.display = 'none';
  });
  return dm;
};

TerminusPluginManager.prototype.showPlugins = function (a, ui) {
  a.setAttribute('style', 'background-color: #111;');

  for (var pid in this.plugins) {
    a.appendChild(this.getPluginDOM(pid, this.plugins[pid], ui));
  }
};

module.exports = TerminusPluginManager;

/***/ }),

/***/ "./src/plugins/codemirror.terminus.js":
/*!********************************************!*\
  !*** ./src/plugins/codemirror.terminus.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function Codemirror(text, format, config) {
  this.textdom = text;
  this.mode = format;
  this.darkMode = config.darkMode;
  if (this.jsonldCheck(format)) this.mode = 'javascript';
}
/*
txtar    : editor is attached to textar
mode     : format for highlighting, ex: json, html etc.
editable : readOnly false/ nocursor is special value in code editor to set readonly true */


Codemirror.prototype.colorizeTextArea = function (mode) {
  //initize auto complete

  /*CodeMirror.commands.autocomplete = function(cm) {
    cm.showHint({hint: CodeMirror.hint.anyword});
  }*/
  // initialise code editor on text area
  var editor = CodeMirror.fromTextArea(this.textdom, {
    mode: this.mode,
    firstLineNumber: 1,
    lineNumbers: true,
    styleActiveLine: true,
    lineWrapping: true,
    smartIndent: true,
    indentWithTabs: true,
    newlineAndIndent: true,
    autoCloseBrackets: true,
    matchBrackets: {
      afterCursor: true
    },
    extraKeys: {
      "Ctrl-F": "find",
      "Tab": "autocomplete"
    },
    refresh: true
  });
  this.setCodemirrorSize(editor, mode);
  editor.defaultCharWidth('20px');
  if (this.darkMode) editor.setOption("theme", 'erlang-dark');else editor.setOption("theme", 'neo');
  return editor;
}; // colorizeTextArea()

/*
  set editor size according to screens
  editor : code mirror editor Object
  mode   : editor being viewed from schema/ doc/ query page*/


Codemirror.prototype.setCodemirrorSize = function (editor, mode) {
  switch (mode) {
    case 'query':
      editor.setSize('', '300');
      break;

    case 'schema':
      editor.setSize('1200', '1550');
      break;

    case 'document':
      editor.setSize('1000', '250');
      break;
  } // switch(mode)

}; // setCodemirrorSize()
// updateTextArea(): highlights new changes on editor


Codemirror.prototype.updateTextArea = function (editor) {
  editor.save();
  setTimeout(function () {
    editor.refresh();
  }, 1); // save changes of code mirror editor

  editor.on('change', function () {
    editor.save();
  });
}; //updateTextArea()

/*
colorizePre() to colorise pre tags (read only mode)
text (string)    : The document to run through the highlighter.
mode (mode spec) : format to highlight color
output (DOM node): The tokens will be converted to spans as in an editor,
                   and inserted into the node (through innerHTML).*/


Codemirror.prototype.colorizePre = function () {
  CodeMirror.runMode(this.textdom.innerText, this.mode, this.textdom);
  if (this.darkMode) var theme = 'cm-s-erlang-dark';else var theme = 'cm-s-neo';
  this.textdom.setAttribute('class', 'CodeMirror CodeMirror-wrap ' + theme + ' terminus-wrap-text terminus-wrapper-height ');
  return this.textdom;
}; // colorizePre()


Codemirror.prototype.jsonldCheck = function (format) {
  if (format == 'jsonld') return true;
};

module.exports = Codemirror;

/***/ }),

/***/ "./src/plugins/datatables.terminus.js":
/*!********************************************!*\
  !*** ./src/plugins/datatables.terminus.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

var WOQLQuery = __webpack_require__(/*! ../query/WOQLQuery */ "./src/query/WOQLQuery.js");

var WOQLResult = __webpack_require__(/*! ../query/WOQLResult */ "./src/query/WOQLResult.js");

var WOQLResultsViewer = __webpack_require__(/*! ../query/WOQLResultsViewer */ "./src/query/WOQLResultsViewer.js");

var UTILS = __webpack_require__(/*! ../Utils */ "./src/Utils.js");

function Datatables() {}

Datatables.prototype.convertToDatatable = function (tab) {
  var table = jQuery(tab).DataTable({
    searching: false,
    pageLength: 25,
    lengthMenu: [10, 25, 50, 75, 100],
    paging: true,
    select: true,
    columnDefs: [{
      targets: '_all',
      className: "truncate"
    }],
    createdRow: function createdRow(row) {
      var td = $(row).find(".truncate");
      td.attr("title", td.html());
    },
    dom: 'lrtip'
  }); //jQuery(tab)
  //styling

  tab.setAttribute('class', 'stripe dataTable terminus-db-size terminus-db-border');
  tab.setAttribute('cellpadding', '1');
  tab.setAttribute('cellspacing', '1');
  tab.setAttribute('border', '0');
  return tab;
};
/*
    dcb: datatable drawCallBack reference
    ui: terminus ui reference
    dt: datatable reference
    query: new woqlquery with current pagination changes
    pageInfo: current drawCallBack page change info
    resultDOM: result dom on veiwer page
*/


Datatables.prototype.executeQuery = function (dcb, ui, dt, query, pageInfo, resultDOM) {
  var self = this;
  dcb.wquery.execute(query).then(function (result) {
    if (true) {
      self.result = new WOQLResultsViewer(ui, result, null, pageInfo);
    }

    var rtab = self.result.getTable(result.bindings);

    if (rtab) {
      self.getDataFromServer(rtab, pageInfo, ui, resultDOM);
    }
  })["catch"](function (err) {
    console.error(err);
    self.ui.showError(err);
  });
};
/* get query string based on datatable pagination and current query */


Datatables.prototype.getQueryOnPagination = function (wq, settings) {
  switch (settings.query) {
    case 'Show_All_Documents':
      return wq.getAllDocumentQuery(null, settings.pageLength, settings.start);
      break;

    case 'Show_All_Data':
      return wq.getEverythingQuery(null, settings.pageLength, settings.start);
      break;

    case 'Show_All_Schema_Elements':
      return wq.getElementMetaDataQuery(null, settings.pageLength, settings.start);
      break;

    case 'Show_Document_Classes':
      return wq.getClassMetaDataQuery(wq.getSubclassQueryPattern("Class", "dcog/'Document'") + ", not(" + wq.getAbstractQueryPattern("Class") + ")", settings.pageLength, settings.start);
      break;

    case 'Show_All_Properties':
      return wq.getPropertyListQuery(null, settings.pageLength, settings.start);
      break;

    case 'Show_All_Classes':
      return wq.getClassMetaDataQuery(null, settings.pageLength, settings.start);
      break;

    case 'Show_Data_Class':
      return wq.getDataOfChosenClassQuery(settings.chosenValue, settings.pageLength, settings.start);
      break;

    case 'Show_Property_Class':
      return wq.getDataOfChosenPropertyQuery(settings.chosenValue, settings.pageLength, settings.start);
      break;

    case 'Show_Document_Info_by_Id':
      return wq.getDocumentQuery(settings.chosenValue, settings.pageLength, settings.start);
      break;

    default:
      console.log('invalid woql option passed');
      break;
  }
};
/*
    dcb: datatable drawCallBack reference
    ui: terminus ui reference
    dt: datatable reference
    pageInfo: current drawCallBack page change info
*/


Datatables.prototype.generateNewQueryOnPageChange = function (dcb, ui, dt, pageInfo) {
  dcb.wquery = new WOQLQuery(ui.client, null);
  UTILS.deleteStylizedEditor(ui, pageInfo.qTextDom);
  var query = dt.getQueryOnPagination(dcb.wquery, pageInfo);
  pageInfo.qTextDom.value = query;
  UTILS.stylizeEditor(ui, pageInfo.qTextDom);
  return query;
};
/*
    dt: Datatable reference
    len : current number of records to display
*/


Datatables.prototype.getCallbackSettings = function (dt, len) {
  var pageInfo = {};
  pageInfo.pageLength = len;
  pageInfo.start = 0;
  pageInfo.qTextDom = dt.qTextDom;
  pageInfo.query = dt.query;
  pageInfo.chosenValue = dt.chosenValue;
  return pageInfo;
};
/*
    tab: datatable table dom
    settings : settings from woql txt generator
    resultDOM: result dom of viewer
*/


Datatables.prototype.setUp = function (tab, settings, resultDOM) {
  // delete previous datatable
  FrameHelper.removeChildren(this.dtdom);
  this.dtdom = document.createElement('div');
  this.dtdom.appendChild(tab);
  resultDOM.appendChild(this.dtdom); // saving query text box dom to change limit value on change of datatable page length

  this.qTextDom = settings.qTextDom;
  this.query = settings.query;
  this.chosenValue = settings.chosenValue;
};

Datatables.prototype.getDataFromServer = function (tab, settings, ui, resultDOM) {
  var dt = this;
  this.setUp(tab, settings, resultDOM); // initialize datatables

  var table = jQuery(tab).DataTable({
    searching: false,
    pageLength: settings.pageLength,
    lengthMenu: [5, 10, 25, 50, 75, 100],
    paging: true,
    select: true,
    columnDefs: [{
      targets: '_all',
      className: "truncate"
    }],
    createdRow: function createdRow(row) {
      var td = $(row).find(".truncate");
      td.attr("title", td.html());
    },
    dom: 'lrtip',
    drawCallback: function drawCallback(settings) {
      // on change of page length
      $(this).on('length.dt', function (e, settings, len) {
        var pageInfo = dt.getCallbackSettings(dt, len);
        var query = dt.generateNewQueryOnPageChange(this, ui, dt, pageInfo);
        return dt.executeQuery(this, ui, dt, query, pageInfo, resultDOM);
      });
    }
  }); //jQuery(tab)
  //styling

  tab.setAttribute('class', 'stripe dataTable');
  tab.setAttribute('cellpadding', '1');
  tab.setAttribute('cellspacing', '1');
  tab.setAttribute('border', '0');
  return tab;
};
/*
serverside: true or false
*/


Datatables.prototype.draw = function (serverside, tab, settings, ui, resultDOM) {
  if (serverside) return this.getDataFromServer(tab, settings, ui, resultDOM);else return this.convertToDatatable(tab);
};

module.exports = Datatables;

/***/ }),

/***/ "./src/query/WOQLGraphBrowserGenerator.js":
/*!************************************************!*\
  !*** ./src/query/WOQLGraphBrowserGenerator.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var WOQLQuery = __webpack_require__(/*! ./WOQLQuery */ "./src/query/WOQLQuery.js");

var WOQLTimePicker = __webpack_require__(/*! ./WOQLTimePicker */ "./src/query/WOQLTimePicker.js");

function WOQLGraphBrowserGenerator(tq, qman, ui) {
  this.query = tq;
  this.wquery = qman.wquery; //this.filter = new WOQLQueryFilter(this);

  this.slider = new WOQLTimePicker();
}

WOQLGraphBrowserGenerator.prototype.getAsDOM = function (q) {
  var qbox = document.createElement("div");
  qbox.setAttribute("class", "terminus-query-textbox-input");
  qbox.appendChild(document.createTextNode("afsdfa"));
  qbox.appendChild(this.slider.getSliderDOM());
  return qbox;
};

function DCOGBrowser(controller, model, config) {
  this.myowner = controller;
  this.model = model;
  this.config = config;
  this.default_viewport = config && config.view ? config.view : "graph";
  this.current_viewport = false; //internal state

  this.viewports = {};
  this.viewportDOMs = {};
  this.browserid = randomString(8);
  this.query_timeslice = false;
  this.current_result = false;
  this.focus_node = false; //(config && config.focus_node ? config.focus_node : "https://datachemist.net/ipg/candidate/osoba_ipg11704456");

  this.show_filter = false; //this.relationships = model.mgraphs['main'].elements.relationships;
  //this.entities = model.mgraphs['main'].elements.entities;
  //this.setUpIPGSpecials();

  this.entity_count = false;
  this.config.default_display = {
    icon: "fas fa-question",
    icon_unicode: "\uF128",
    color: [255, 125, 125],
    forward: "Unknown",
    backward: "Unknown",
    text: "Unknown"
  };
}

DCOGBrowser.prototype.init = function () {
  this.filter = new DCOGQueryFilter(this, this.config, this.model);
  this.slider = new DCOGTimePicker(this, this.config); //this.viewports['graph'] = new DCOGGVis(this, this.config);
  //this.viewports['table'] = new DCOGTable(this, this.config);
  //this.viewports['map'] = new DCOGMap(this, this.config);
  //this.viewports['api'] = new DCOGAPIView(this, this.config);
  //this.viewports['timeline'] = new DCOGTimeline(this, this.config);
};

DCOGBrowser.prototype.getViewportAsDOM = function () {
  var vpdom = document.createElement("div");
  vpdom.setAttribute("class", "dcog-viewport");

  for (var k in this.viewports) {
    if (typeof this.viewportDOMs[k] == "undefined") {
      this.viewportDOMs[k] = this.viewports[k].getAsDOM();
    }

    vpdom.appendChild(this.viewportDOMs[k]);
  }

  return vpdom;
};

DCOGBrowser.prototype.newQuery = function (query, success, error) {
  query = query ? query : this.getQuery();
  var self = this;
  var busy = this.setBusy("Fetching Results from Data Chemist Server");

  var handle = function handle(data) {
    self.clearBusy(busy);
    self.current_result = new DCOGQueryResult(data, query);

    if (self.current_result.containsData()) {
      self.setViewportData(self.current_result);

      if (self.focus_node) {
        var node = self.current_result.getNodeOrFringe(query.focus_node);
      } else if (query.from_node) {
        var node = self.current_result.getNodeOrFringe(query.from_node);
      } else {
        self.entity_count = data.nodeCount;
        self.myowner.fillInfoBoxes();
      }

      if (node) {
        self.nodeSelected(node);
      }

      self.rebuildController();
    } else {
      self.tellUser("No results returned", "warning");
    }

    if (typeof success == "function") {
      success(self.current_result);
    }
  };

  var ehandle = function ehandle(a) {
    var msg = {
      title: "Results Overload",
      body: "Your query was terminated because it would have returned too many records - please reduce the depth of your search or add extra constraints and try again"
    };
    self.tellUser(msg, "error");
    self.clearBusy(busy);
  };

  this.untell();
  this.model.client.query(query, handle, ehandle);
};

DCOGBrowser.prototype.moreResults = function (nfocus, success) {
  var busy = this.setBusy("Fetching Results from Data Chemist Server");

  var ehandle = function ehandle(a) {
    var msg = {
      title: "Results Overload",
      body: "Your query was terminated because it would have returned too many records - please reduce the depth of your search or add extra constraints and try again"
    };
    self.tellUser(msg, "error");
    self.clearBusy(busy);
  };

  this.focus_node = nfocus;
  var self = this;

  var handle = function handle(data) {
    self.clearBusy(busy);
    self.current_result.addMoreResults(data, self.getQuery());
    self.updateViewportData(self.current_result);
    self.rebuildController();

    if (typeof success == "function") {
      success(self.current_result);
    }
  };

  this.untell();
  this.model.client.query(this.getQuery(), handle, ehandle);
};

DCOGBrowser.prototype.setBusy = function (msg) {
  var busy = showBusyOverlay(this.myowner.insert_patterns.browser, msg);
  this.busy = busy;
  return busy;
};

DCOGBrowser.prototype.getQuery = function (dqr) {
  var qstruct = {};

  if (this.focus_node) {
    qstruct.focus_node = this.focus_node;
  } else if (this.from_node && this.to_node) {
    qstruct.source_node = this.from_node;
    qstruct.target_node = this.to_node;
  }

  if (this.filter && this.filter.current_relationships) {
    qstruct.relationships = this.filter.current_relationships;
  }

  if (this.filter && this.filter.current_depth) {
    qstruct.max_path_length = this.filter.current_depth;
  }

  if (this.filter && this.filter.current_threshold && this.filter.current_threshold > 0 && qstruct.relationships.indexOf("share") != -1) {
    qstruct.filters = {
      shareholding_threshold: this.filter.current_threshold
    };
  }

  if (this.slider && this.slider.server_side && this.slider.timeslice) {
    this.query_timeslice = this.slider.timeslice;
  } else {
    this.query_timeslice = false;
  }

  if (this.query_timeslice) {
    qstruct.date = this.query_timeslice;
  }

  return qstruct;
};

DCOGBrowser.prototype.setView = function (which) {
  if (which != this.current_viewport) {
    this.current_viewport = which;

    for (var k in this.viewports) {
      if (k != this.current_viewport) {
        if (typeof this.viewports[k]["hibernate"] == "function") {//this.viewports[k].hiberate();
        }

        jQuery(this.viewportDOMs[k]).hide();
      } else {
        if (typeof this.viewports[k]["wake"] == "function") {
          this.viewports[k].wake();
        }

        jQuery(this.viewportDOMs[k]).show();
      }

      this.rebuildController();
    }
  }
};
/**
 * @summary Initialises the viewports by firing off a starter query and loading it into the contained viewports
 */


DCOGBrowser.prototype.initData = function (which) {
  this.current_viewport = which ? which : this.default_viewport;
  var self = this;

  var setInitNodes = function setInitNodes(dqr) {
    if (self.focus_node) {
      var node = dqr.getNodeOrFringe(self.focus_node);

      if (node && node.groupID) {
        self.nodeSelected(node);
      }
    } else {}

    for (var k in self.viewports) {
      if (typeof self.viewports[k].initDOM == "function") {
        self.viewports[k].initDOM(self.viewportDOMs[k]);
      }

      if (k != self.current_viewport) jQuery(self.viewportDOMs[k]).hide();else if (typeof self.viewportDOMs[k].wake == "function") self.viewportDOMs[k].wake();
    }
  };

  var qstr = this.getQuery();

  if (qstr) {
    this.newQuery(qstr, setInitNodes);
  } else {
    alert("No query string - must set filter and focus node before initialisation");
  }
};

DCOGBrowser.prototype.setViewportData = function (dqr) {
  for (var k in this.viewports) {
    this.viewports[k].setData(dqr, k == this.current_viewport);
  }
};

DCOGBrowser.prototype.updateViewportData = function (dqr) {
  for (var k in this.viewports) {
    this.viewports[k].updateData(dqr, k == this.current_viewport);
  }
};

DCOGBrowser.prototype.setViewportFilter = function (dqr) {
  for (var k in this.viewports) {
    if (typeof this.viewports[k].setFilter == "function") {
      this.viewports[k].setFilter(dqr, k == this.current_viewport);
    } else {
      alert(k + " does not implement set filter browser function");
    }
  }
};

DCOGBrowser.prototype.nodeSelected = function (node) {
  if (this.focus_node != node.id) {
    this.focus_node = node.id;
  }

  var sections = this.getNodeInfoSections(node);
  this.myowner.nodeSelected(node, sections);
};

DCOGBrowser.prototype.getNodeInfoSections = function (node) {
  return [];
};

DCOGBrowser.prototype.followNode = function (node, success) {
  this.moreResults(node.id, success);
};

DCOGBrowser.prototype.setFocusNode = function (id) {
  var self = this;
  this.focus_node = id;
  this.newQuery(this.getQuery());
};

DCOGBrowser.prototype.setPathSearch = function (node_from, node_to) {
  this.focus_node = false;
  this.from_node = node_from;
  this.to_node = node_to;
  this.newQuery(this.getQuery());
};

DCOGBrowser.prototype.changeTimeSlice = function (val, valto, force) {
  if (this.current_result) {
    if (!this.current_result.isTemporalSuperset(this.query_timeslice, val, valto)) {
      this.current_result.setQueryTimeslice(val, valto);
      this.query_timeslice = this.current_result.getTimeslice();
      this.newQuery(this.getQuery());
    } else {
      this.current_result.setFilterTimeslice(val, valto);
      this.setViewportFilter(this.current_result);
    }
  }
};

DCOGBrowser.prototype.getControllerAsDOM = function () {
  var cdom = document.createElement("div");
  cdom.setAttribute("class", "dcog-browser-controller-wrapper");
  cdom.appendChild(this.getControllerViewButtonsAsDOM());
  cdom.appendChild(this.slider.getSliderDOM());
  this.toolboxDOM = this.getUserToolboxDOM();
  cdom.appendChild(this.toolboxDOM);
  this.rebuildController();
  cdom.appendChild(this.filterDOM);
  cdom.appendChild(this.legendDOM);
  return cdom;
};

DCOGBrowser.prototype.getControllerFilterAsDOM = function () {
  if (this.filterDOM) {
    jQuery(this.filterDOM).empty();
  } else {
    var cdom = document.createElement("div");
    cdom.setAttribute("class", "dcog-browser-controller-filter");
    this.filterDOM = cdom;
  }

  var fdom = this.filter.getRelationshipFilterAsDOM();
  var ndom = this.filter.getQueryParameterDOM();
  var ipfield = this.slider.getSliderTypeDOM();
  ndom.appendChild(ipfield);
  var self = this;
  var gobut = document.createElement("button");
  gobut.setAttribute("class", "dcog-filter-submit dcog-dashboard-button");
  gobut.appendChild(document.createTextNode("Go"));
  gobut.addEventListener("click", function () {
    self.newQuery();
  });
  this.filterDOM.appendChild(fdom);
  this.filterDOM.appendChild(ndom);
  ndom.appendChild(gobut);

  if (!this.show_filter) {
    jQuery(this.filterDOM).hide();
  }

  return this.filterDOM;
};

DCOGBrowser.prototype.toggleFilterVisibility = function () {
  if (this.show_filter) {
    jQuery(this.filterDOM).hide();
  } else {
    jQuery(this.filterDOM).show();
  }

  this.show_filter = !this.show_filter;
};

DCOGBrowser.prototype.rebuildController = function () {
  this.getControllerFilterAsDOM();
  this.legendDOM = this.getLegendAsDOM();
};

DCOGBrowser.prototype.untell = function () {
  jQuery(this.userMessageDOM).empty();
};

DCOGBrowser.prototype.tellUser = function (msg, type) {
  if (typeof msg == "undefined") {
    jQuery(this.userMessageDOM).empty();
  } else {
    type = type ? type : "info";
    var msgdom = document.createElement("span");
    msgdom.setAttribute("class", "dcog-browser-message dcog-message-" + type);

    if (_typeof(msg) == "object") {
      msg = "<b>" + msg.title + "</b> " + msg.body;
    }

    msgdom.innerHTML = msg;
    jQuery(this.userMessageDOM).html(msgdom);
  }
};

DCOGBrowser.prototype.clearBusy = function (busy) {
  busy = busy ? busy : this.busy;

  if (busy) {
    jQuery(busy).remove();
  }
};

DCOGBrowser.prototype.getUserToolboxDOM = function () {
  var cdom = document.createElement("div");
  cdom.setAttribute("class", "dcog-browser-toolbox");
  var msgdom = document.createElement("span");
  msgdom.setAttribute("class", "dcog-browser-message-container");
  this.userMessageDOM = msgdom;
  cdom.appendChild(msgdom);
  var tdom = document.createElement("span");
  tdom.setAttribute("class", "dcog-browser-tools"); //var dld = document.createElement("i");
  //dld.setAttribute("class", "fas fa-download dcog-browser-tool-icon");

  var self = this;
  /*dld.addEventListener("click", function(){
  	if(typeof told == "undefined" || !told){
  		self.tellUser("this is the user dialogue box - it will tell the user how to download the data");
  		told = true;
  	}
  	else {
  		told = false;
  		self.tellUser();
  	}
  });*/
  //tdom.appendChild(dld);

  var dlc = document.createElement("i");
  dlc.setAttribute("class", "fas fa-cog dcog-browser-tool-icon");
  dlc.addEventListener("click", function () {
    self.toggleFilterVisibility();
  });
  tdom.appendChild(dlc);
  cdom.appendChild(tdom);
  return cdom;
};

DCOGBrowser.prototype.getControllerViewButtonsAsDOM = function () {
  var self = this;
  var bdoms = [];
  var cdom = document.createElement("div");
  cdom.setAttribute("class", "dcog-browser-view-buttons");

  for (var k in this.viewports) {
    var bdom = document.createElement("button");
    bdom.appendChild(document.createTextNode(k));
    var i = document.createElement("i");

    if (k == "graph") {
      i.setAttribute("class", "dcog-viewer-icon fas fa-code-branch");
    } else if (k == "map") {
      i.setAttribute("class", "dcog-viewer-icon fas fa-globe");
    } else if (k == "table") {
      i.setAttribute("class", "dcog-viewer-icon fas fa-list");
    } else if (k == "api") {
      i.setAttribute("class", "dcog-viewer-icon fas fa-robot");
    }

    bdom.appendChild(i);
    bdom.setAttribute("id", this.browserid + k);

    if (k == this.current_viewport) {
      bdom.setAttribute("class", "selected");
    } else {
      bdom.setAttribute("class", "not-selected");
    }

    bdom.addEventListener("click", function () {
      for (var i = 0; i < bdoms.length; i++) {
        bdoms[i].setAttribute("class", "not-selected");
      }

      this.setAttribute("class", "selected");
      self.setView(this.id.substring(self.browserid.length));
    });
    bdoms.push(bdom);
    cdom.appendChild(bdom);
  }

  return cdom;
};

DCOGBrowser.prototype.getLegendAsDOM = function () {
  if (this.legendDOM) {
    jQuery(this.legendDOM).empty();
  } else {
    this.legendDOM = document.createElement("div");
    this.legendDOM.setAttribute("class", "dcog-viewport-legend");
  }

  if (typeof this.viewports[this.current_viewport].legend == "function") {
    var dom = this.viewports[this.current_viewport].legend();

    if (dom) {
      this.legendDOM.appendChild(dom);
      jQuery(this.legendDOM).show();
    } else {
      jQuery(this.legendDOM).hide();
    }
  }

  return this.legendDOM;
};
/*
 * Display settings for shared look and field between different views - eventually to be kicked back to model 
 */


DCOGBrowser.prototype.getNodeRelativeSize = function (node) {
  var nconf = this.getNodeDisplaySettings(node);
  if (nconf.size) return nconf.size;
  return 1;
};

DCOGBrowser.prototype.getLineWidth = function (node) {
  var nconf = this.getNodeDisplaySettings(node);
  if (nconf.size) return nconf.size;
  return 4;
};

DCOGBrowser.prototype.getModelElementDisplaySettings = function (elt) {
  if (typeof this.config.modeldisplay[elt] != "undefined") {
    return jQuery.extend(true, {}, this.config.modeldisplay[elt]);
  }

  alert(elt);
  return jQuery.extend(true, {}, this.config.default_display);
};

DCOGBrowser.prototype.isBidirectional = function (edge) {
  if (edge.typeID) {
    var conf = this.config.modeldisplay[edge.typeID];

    if (!conf) {//jpr(edge);
    } else if (conf.forward && conf.backward) {
      var s = this.current_result.getNodeOrFringe(edge.source);
      var t = this.current_result.getNodeOrFringe(edge.target);
      if (t && s && t.groupID && s.groupID && s.groupID.indexOf("Person") == -1 && t.groupID.indexOf("Person") == -1) return true;
    }
  }

  return false;
};

DCOGBrowser.prototype.getRelationshipClass = function (nick) {
  return nick; //if(this.config.cmap[nick]) return this.config.cmap[nick];
  //return false;
};

DCOGBrowser.prototype.getGraphElementDisplaySettings = function (node) {
  if (node) {
    var nds = this.getNodeDisplaySettings(node);

    if (!nds) {
      nds = this.getLinkDisplaySettings(node);
    }

    return nds;
  }

  return false;
};

DCOGBrowser.prototype.getNodeDisplaySettings = function (node) {
  if (typeof node.groupID != "undefined") {
    return this.getModelElementDisplaySettings(node.groupID);
  }

  return false;
};

DCOGBrowser.prototype.getLinkDisplaySettings = function (link) {
  if (typeof link.typeID != "undefined") {
    return this.getModelElementDisplaySettings(link.typeID);
  }

  return false;
};

DCOGBrowser.prototype.getElementIcon = function (elt) {
  var settings = this.getGraphElementDisplaySettings(elt);
  if (!settings) settings = this.config.default_display;
  return settings.icon;
};

DCOGBrowser.prototype.getClassIcon = function (cls) {
  var settings = this.getModelElementDisplaySettings(cls);
  if (!settings) settings = this.config.default_display;
  return settings.icon;
};

DCOGBrowser.prototype.getElementIconUnicode = function (elt) {
  var settings = this.getGraphElementDisplaySettings(elt);
  if (!settings) settings = this.config.default_display;
  return settings.icon_unicode;
};

DCOGBrowser.prototype.getElementColour = function (elt) {
  var settings = this.getGraphElementDisplaySettings(elt);
  if (!settings) settings = this.config.default_display;
  return jQuery.extend(true, [], settings.color);
};

DCOGBrowser.prototype.setUpIPGSpecials = function () {
  this.config.modeldisplay = {};
  var reldisptypes = [{
    icon: "fas fa-caret-right",
    icon_unicode: "\uF0D6",
    size: 6,
    color: [125, 125, 255]
  }, {
    icon: "fab fa-creative-commons-by",
    icon_unicode: "\uF4E7",
    size: 5,
    color: [255, 125, 125]
  }, {
    icon: "fas fa-handshake",
    color: [125, 255, 125],
    size: 7,
    icon_unicode: "\uF2B5"
  }, {
    icon: "fas fa-creative-commons-nc-eu",
    icon_unicode: "\uF4E9",
    size: 4,
    color: [50, 50, 50]
  }, {
    icon: "fas fa-sitemap",
    icon_unicode: "\uF0E8",
    size: 8,
    color: [125, 255, 255]
  }];
  var entdisptypes = [{
    icon: "fas fa-users",
    size: 1,
    icon_unicode: "\uF0C0",
    color: [255, 125, 125]
  }, {
    icon: "fas fa-industry",
    size: 1.5,
    icon_unicode: "\uF275",
    color: [100, 125, 255]
  }, {
    icon: "fas fa-user",
    size: 0.9,
    icon_unicode: "\uF007",
    color: [125, 255, 125]
  }, {
    icon: "fas fa-building",
    icon_unicode: "\uF1AD",
    size: 1.4,
    color: [125, 125, 225]
  }, {
    icon: "fas fa-briefcase",
    icon_unicode: "\uF0B1",
    color: [125, 125, 200],
    size: 1.2
  }, {
    icon: "fas fa-user-astronaut",
    icon_unicode: "\uF4FB",
    size: 0.9,
    color: [125, 220, 125]
  }];
  var i = 0;

  for (var rid in this.relationships) {
    if (i >= reldisptypes.length) i = 0;
    var disptype = reldisptypes[i];
    disptype['forward'] = this.relationships[rid].label;
    this.config.modeldisplay[rid] = disptype;
    i++;
  }

  i = 0;

  for (var eid in this.entities) {
    if (i >= reldisptypes.length) i = 0;
    var disptype = entdisptypes[i];
    disptype['text'] = this.entities[eid].label;
    this.config.modeldisplay[eid] = disptype;
    i++;
  }
};

module.exports = WOQLGraphBrowserGenerator;

/***/ }),

/***/ "./src/query/WOQLQuery.js":
/*!********************************!*\
  !*** ./src/query/WOQLQuery.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

var WOQLResult = __webpack_require__(/*! ./WOQLResult */ "./src/query/WOQLResult.js");

function WOQLQuery(client, options) {
  this.client = client;
  this.options = options;
  this.default_limit = 1000;
  this.prefixes = {};

  if (client.connectionConfig.platformEndpoint()) {
    var sid = client.connectionConfig.server.substring(0, client.connectionConfig.server.lastIndexOf("platform"));
    this.sid = sid;
    var colid = client.connectionConfig.server.substring(0, client.connectionConfig.server.lastIndexOf("platform")) + client.connectionConfig.dbid;
    this.prefixes['s'] = colid + "/ontology/main#";
    this.prefixes['g'] = sid;
    this.prefixes['db'] = colid + "/";
    this.prefixes['doc'] = colid + "/candidate/";
    this.prefixes['dg'] = colid + "/graph/main/";
  } else {
    this.sid = client.connectionConfig.serverURL();
    this.prefixes['s'] = client.connectionConfig.schemaURL() + "#";
    this.prefixes['dg'] = client.connectionConfig.dbURL() + "/schema";
    this.prefixes['doc'] = client.connectionConfig.docURL();
    this.prefixes['db'] = client.connectionConfig.dbURL() + "/";
    this.prefixes['g'] = client.connectionConfig.serverURL();
  }

  for (var pref in FrameHelper.standard_urls) {
    this.prefixes[pref] = FrameHelper.standard_urls[pref];
  }
}

WOQLQuery.prototype.shorten = function (url) {
  for (var pref in this.prefixes) {
    if (this.prefixes[pref] == url.substring(0, this.prefixes[pref].length)) {
      return pref + "/" + url.substring(this.prefixes[pref].length);
    }
  }

  return url;
};

WOQLQuery.prototype.execute = function (woql) {
  var wrapped = this.wrap(woql);
  var self = this;
  return this.client.select(false, wrapped).then(function (response) {
    var res = new WOQLResult(response, self, self.options);
    return res;
  });
};

WOQLQuery.prototype.wrap = function (woql) {
  var wstr = "prefixes([ ";
  var i = 0;

  for (var pref in this.prefixes) {
    if (i++ > 0) wstr += ",";
    wstr += pref + "='" + this.prefixes[pref] + "'";
  }

  wstr += "], from(g/'" + this.client.connectionConfig.dbid + "'," + woql + "))";
  return wstr;
};

WOQLQuery.prototype.getAbstractQueryPattern = function (varname) {
  var aqp = "t(v('" + varname + "'), dcog/tag, dcog/abstract, schema)";
  return aqp;
};

WOQLQuery.prototype.getSubclassQueryPattern = function (varname, clsname) {
  var sqp = "(v('" + varname + "') << (" + clsname + "))";
  return sqp;
};

WOQLQuery.prototype.getAllDocumentQuery = function (constraint, limit, start) {
  limit = limit ? limit : this.default_limit;
  start = start ? start : 0;
  var woql = "limit( " + limit + ", start(" + start + ",";
  var vdoc = "t(v('Document'), rdf/type, v('Type'))";
  woql += "select([v('Document'), v('Type')],(" + vdoc;
  woql += ", (v('Type') << (dcog/'Document'))";
  if (constraint) woql += ", " + constraint;
  woql += "))))";
  return woql;
};

WOQLQuery.prototype.getEverythingQuery = function (constraint, limit, start) {
  limit = limit ? limit : this.default_limit;
  start = start ? start : 0;
  var woql = "limit( " + limit + ", start(" + start + ",";
  var vdoc = "t(v('Subject'), v('Predicate'), v('Object'))";
  woql += "select([v('Subject'), v('Predicate'), v('Object')],(" + vdoc;
  if (constraint) woql += ", " + constraint;
  woql += "))))";
  return woql;
};

WOQLQuery.prototype.getPropertyListQuery = function (constraint) {
  var vEl = "t(v('Property'), rdfs/range, v('Range'), schema)";
  var opts = [];
  opts.push("t(v('Property'), rdf/type, v('Type'), schema)");
  opts.push("t(v('Property'), rdfs/label, v('Label'), schema)");
  opts.push("t(v('Property'), rdfs/comment, v('Comment'), schema)");
  opts.push("t(v('Property'), rdfs/domain, v('Domain'), schema)");
  var woql = "select([v('Property'), v('Label'), v('Comment'), v('Domain'), v('Type'), v('Range')],(" + vEl;
  if (constraint) woql += ", " + constraint;

  for (var i = 0; i < opts.length; i++) {
    woql += ", opt(" + opts[i] + ")";
  }

  woql += "))";
  return woql;
};

WOQLQuery.prototype.getElementMetaDataQuery = function (constraint, limit, start) {
  limit = limit ? limit : this.default_limit;
  start = start ? start : 0;
  var vEl = "t(v('Element'), rdf/type, v('Type'), schema)";
  var opts = [];
  opts.push("t(v('Element'), rdfs/label, v('Label'), schema)");
  opts.push("t(v('Element'), rdfs/comment, v('Comment'), schema)");
  opts.push("t(v('Element'), dcog/tag, v('Abstract'), schema)");
  opts.push("t(v('Element'), rdfs/domain, v('Domain'), schema)");
  opts.push("t(v('Element'), rdfs/range, v('Range'), schema)");
  var woql = "limit( " + limit + ", start(" + start + ",";
  woql += "select([v('Element'), v('Type'), v('Label'), v('Comment'), v('Domain'), v('Range'), v('Abstract')],(" + vEl;
  if (constraint) woql += ", " + constraint;

  for (var i = 0; i < opts.length; i++) {
    woql += ", opt(" + opts[i] + ")";
  }

  woql += "))))";
  return woql;
};

WOQLQuery.prototype.getClassListMetaDataQuery = function (constraint) {
  var vClass = "t(v('Class'), rdf/type, owl/'Class', schema)";
  var opts = [];
  opts.push("t(v('Class'), rdfs/label, v('Label'), schema)");
  opts.push("t(v('Class'), rdfs/comment, v('Comment'), schema)");
  opts.push("t(v('Class'), dcog/tag, v('Abstract'), schema)");
  var woql = "select([v('Class'), v('Label'), v('Comment'), v('Abstract')],(" + vClass;
  if (constraint) woql += ", " + constraint;

  for (var i = 0; i < opts.length; i++) {
    woql += ", opt(" + opts[i] + ")";
  }

  woql += "))";
  return woql;
};

WOQLQuery.prototype.getClassMetaDataQuery = function (constraint, limit, start) {
  limit = limit ? limit : this.default_limit;
  start = start ? start : 0;
  var vClass = "t(v('Class'), rdf/type, owl/'Class', schema)";
  var opts = [];
  opts.push("t(v('Class'), rdfs/label, v('Label'), schema)");
  opts.push("t(v('Class'), rdfs/comment, v('Comment'), schema)");
  opts.push("t(v('Class'), dcog/tag, v('Abstract'), schema)");
  var woql = "limit( " + limit + ", start(" + start + ",";
  woql += "select([v('Class'), v('Label'), v('Comment'), v('Abstract')],(" + vClass;
  if (constraint) woql += ", " + constraint;

  for (var i = 0; i < opts.length; i++) {
    woql += ", opt(" + opts[i] + ")";
  }

  woql += "))))";
  return woql;
};

WOQLQuery.prototype.getDataOfChosenClassQuery = function (chosen, limit, start) {
  limit = limit ? limit : this.default_limit;
  start = start ? start : 0;
  var gLink = "'" + chosen + "'"; //"g/'" + chosen.substring(this.sid.length, chosen.length) + "'";

  var vEl = "t(v('Document'), rdf/type, " + gLink + ")";
  var opts = "t(v('Document'),  v('Property'), v('Value'))";
  var woql = "limit( " + limit + ", start(" + start + ",";
  woql += "select([v('Document'), v('Property'), v('Value')],(" + vEl + ",";
  woql += opts;
  woql += "))))";
  return woql;
};

WOQLQuery.prototype.getDataOfChosenPropertyQuery = function (chosen, limit, start) {
  limit = limit ? limit : this.default_limit;
  start = start ? start : 0;
  var gLink = "'" + chosen + "'"; //"g/'" + chosen.substring(this.sid.length, chosen.length) + "'";

  var vdoc = "t(v('Document'), " + gLink + ", v('Value')),";
  var ldoc = "opt(t(v('Document'), rdfs/label, v('Label')))";
  var woql = "limit( " + limit + ", start(" + start + ",";
  woql += "select([v('Document'), v('Label'), v('Value')],(" + vdoc + ldoc;
  woql += "))))";
  return woql;
};

WOQLQuery.prototype.getInstanceMeta = function (url) {
  var docid = "'" + url + "'";
  var vEl = "t(" + docid + ", rdfs/label, v('InstanceLabel'))";
  vEl += ", t(" + docid + ", rdf/type, v('InstanceType'))";
  var opts = [];
  opts.push("t(doc/" + docid + ", rdfs/comment, v('InstanceComment'))");
  opts.push("t(v('InstanceType'), rdfs/label, v('ClassLabel'), schema)");
  var woql = "select([v('InstanceLabel'), v('InstanceType'), v('InstanceComment'), v('ClassLabel')],(" + vEl;

  for (var i = 0; i < opts.length; i++) {
    woql += ", opt(" + opts[i] + ")";
  }

  woql += "))";
  return woql;
};

WOQLQuery.prototype.getDocumentQuery = function (id, limit, start) {
  limit = limit ? limit : this.default_limit;
  start = start ? start : 0;
  var docid = "'" + id + "'";
  var vEl = "t(doc/" + docid + ", v('Property'), v('Property Value'))";
  var opts = [];
  opts.push("t(v('Property'), rdfs/label, v('Property Label'), schema)");
  opts.push("t(v('Property'), rdf/type, v('Property Type'), schema)");
  var woql = "limit( " + limit + ", start(" + start + ",";
  woql += "select([v('Property Label'), v('Property'), v('Property Value'), v('Property Type')],(" + vEl;

  for (var i = 0; i < opts.length; i++) {
    woql += ", opt(" + opts[i] + ")";
  }

  woql += "))))";
  return woql;
};

WOQLQuery.prototype.getClassesQuery = function () {
  var vEl = "t(v('ID'), rdf/type, v('Class'))";
  var opts = [];
  opts.push("t(v('ID'), rdfs/label, v('Label'))");
  opts.push("t(v('ID'), rdfs/comment, v('Comment'))");
  opts.push("t(v('Class'), rdfs/label, v('Type'),schema)");
  var woql = "select([v('Label'),v('Comment'),v('ID'),v('Type'),v('Class')],(" + vEl;
  woql += ", (v('Class') << (dcog/'Document'))";

  for (var i = 0; i < opts.length; i++) {
    woql += ", opt(" + opts[i] + ")";
  }

  woql += "))";
  return woql;
};

module.exports = WOQLQuery;

/***/ }),

/***/ "./src/query/WOQLResult.js":
/*!*********************************!*\
  !*** ./src/query/WOQLResult.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function WOQLResult(res, query, options) {
  this.query = query;
  this.bindings = res && res.result ? res.result.bindings : [];
}

WOQLResult.prototype.count = function () {
  return this.bindings.length;
};

WOQLResult.prototype.shorten = function (url) {
  return this.query.shorten(url);
};

WOQLResult.prototype.hasBindings = function (result) {
  if (result) return result.bindings && result.bindings.length;else return this.bindings && this.bindings.length;
};

module.exports = WOQLResult;

/***/ }),

/***/ "./src/query/WOQLResultsViewer.js":
/*!****************************************!*\
  !*** ./src/query/WOQLResultsViewer.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var WOQLResult = __webpack_require__(/*! ./WOQLResult */ "./src/query/WOQLResult.js");

var TerminusPluginManager = __webpack_require__(/*! ../plugins/TerminusPlugin */ "./src/plugins/TerminusPlugin.js");

var Datatables = __webpack_require__(/*! ../plugins/datatables.terminus */ "./src/plugins/datatables.terminus.js");

function WOQLResultsViewer(ui, wresult, options, settings) {
  this.ui = ui;
  this.result = wresult;
  this.options = options; //this.wqlRes = new WOQLResult();

  this.pman = new TerminusPluginManager();
  this.settings = settings;
}

WOQLResultsViewer.prototype.showTable = function () {
  if (this.options && typeof this.options.show_table != "undefined") return this.options.show_table;
  return true;
};

WOQLResultsViewer.prototype.orderColumns = function (sample) {
  var ordered = [];

  for (var h in sample) {
    if (ordered.indexOf(h) == -1) {
      ordered.unshift(h);
    }
  }

  return ordered;
};

WOQLResultsViewer.prototype.getAsDOM = function (resultDOM) {
  var rs = document.createElement('div');
  var rh = document.createElement('div');
  rh.setAttribute("class", "terminus-margin-top-bottom terminus-module-head");
  rh.appendChild(document.createTextNode("Results"));
  rs.appendChild(rh);

  if (this.result && this.result.hasBindings() && this.showTable()) {
    this.getTableDOM(this.result.bindings, rs);
    return rs;
  } else {
    console.log("no bindings for query");
  }
};

WOQLResultsViewer.prototype.getTableDOM = function (bindings, resultDOM) {
  var tab = this.getTable(bindings);

  if (this.pman.pluginAvailable("datatables")) {
    var dt = new Datatables();
    var tab = dt.draw(true, tab, this.settings, this.ui, resultDOM);
    resultDOM.setAttribute('class', 'terminus-expandable');
    return tab;
  } else resultDOM.appendChild(tab);
};

WOQLResultsViewer.prototype.getTable = function (bindings) {
  var tab = document.createElement("table");
  tab.setAttribute("class", "terminus-query-results-table");
  var thead = document.createElement("thead");
  var thr = document.createElement("tr");
  var ordered_headings = this.orderColumns(bindings[0]);

  for (var i = 0; i < ordered_headings.length; i++) {
    var th = document.createElement("th");
    th.setAttribute('class', 'terminus-table-header-full-css');
    th.appendChild(document.createTextNode(ordered_headings[i]));
    thr.appendChild(th);
  }

  thead.appendChild(thr);
  tab.appendChild(thead);
  var tbody = document.createElement("tbody");

  for (var i = 0; i < bindings.length; i++) {
    var tr = document.createElement("tr");

    for (var j = 0; j < ordered_headings.length; j++) {
      var td = document.createElement("td");

      if (_typeof(bindings[i][ordered_headings[j]]) == "object") {
        var lab = bindings[i][ordered_headings[j]].data ? bindings[i][ordered_headings[j]].data : "Object?";
        td.appendChild(document.createTextNode(lab));
      } else if (typeof bindings[i][ordered_headings[j]] == "string") {
        var lab = this.result.shorten(bindings[i][ordered_headings[j]]);
        if (lab == "unknown") lab = "";
        td.appendChild(document.createTextNode(lab));
      }

      tr.appendChild(td);
    }

    tbody.appendChild(tr);
  }

  tab.appendChild(tbody);
  return tab;
};

module.exports = WOQLResultsViewer;

/***/ }),

/***/ "./src/query/WOQLTextboxGenerator.js":
/*!*******************************************!*\
  !*** ./src/query/WOQLTextboxGenerator.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var FrameHelper = __webpack_require__(/*! ../FrameHelper */ "./src/FrameHelper.js");

var TerminusClassChooser = __webpack_require__(/*! ../client/TerminusClassChooser */ "./src/client/TerminusClassChooser.js");

var TerminusPropertyChooser = __webpack_require__(/*! ../client/TerminusPropertyChooser */ "./src/client/TerminusPropertyChooser.js");

var TerminusDocumentChooser = __webpack_require__(/*! ../client/TerminusDocumentChooser */ "./src/client/TerminusDocumentChooser.js");

var UTILS = __webpack_require__(/*! ../Utils */ "./src/Utils.js");

function WOQLTextboxGenerator(tq, qman, ui) {
  this.query = tq;
  this.wquery = qman.wquery;
  this.ui = ui; // default datatable settings if datatable plug in available

  this.datatable = {};
  this.datatable.pageLength = 5;
  this.datatable.start = 0;
}

WOQLTextboxGenerator.prototype.gatherDatatableSettings = function (txtArea, queryName) {
  this.datatable.qTextDom = txtArea;
  this.datatable.query = queryName;
  this.datatable.chosenValue = null;
};

WOQLTextboxGenerator.prototype.getQueryButtonGroups = function (qbox) {
  var row = document.createElement('div');
  row.setAttribute('class', 'terminus-query-group-row');
  qbox.appendChild(row);
  return row;
};

WOQLTextboxGenerator.prototype.qGroupQueries = function (qrow, header, descr) {
  var g = document.createElement('div');
  g.setAttribute('class', 'terminus-group-box');
  var cd = document.createElement('div');
  cd.setAttribute('class', 'terminus-group');
  g.appendChild(cd);
  var ch = document.createElement('div');
  ch.setAttribute('class', 'terminus-group-header');
  cd.appendChild(ch);
  var h = document.createElement('h3');
  h.appendChild(document.createTextNode(header));
  ch.appendChild(h);
  var t = document.createElement('h5');
  t.setAttribute('class', 'terminus-group-sub-title');
  t.appendChild(document.createTextNode(descr));
  ch.appendChild(t);
  qrow.appendChild(g);
  return g;
};

WOQLTextboxGenerator.prototype.setDatatableSettings = function (query) {
  var newQuery = query.replace(/\s/g, ''); // remove spaces

  var searchStr = 'limit(';

  if (newQuery.indexOf(searchStr) !== -1) {
    var remString = newQuery.substring(searchStr.length, newQuery.length);
    var limit = remString.substr(0, remString.indexOf(','));
    this.datatable.pageLength = limit;
    this.datatable.start = 0;
  }
};

WOQLTextboxGenerator.prototype.getQueryTextAreaDOM = function (q, box) {
  var qbox = document.createElement("div");
  qbox.setAttribute("class", "terminus-query-textbox-input");
  var eqh = document.createElement("H3");
  eqh.appendChild(document.createTextNode("Enter Query"));
  eqh.setAttribute('class', 'terminus-full-css-margin-top terminus-module-head');
  qbox.appendChild(eqh);
  var qip = document.createElement("textarea");
  qip.setAttribute("class", "terminus-query-box");
  qip.setAttribute("placeholder", "Enter new query or load queries from example buttons provided below ...");
  qip.setAttribute("style", "min-width: 400px; min-height: 60px;");
  if (q) qip.value = q;
  qbox.appendChild(qip);
  UTILS.stylizeEditor(this.ui, qip, 'query', 'javascript');
  var self = this;
  var qbut = document.createElement("button");
  qbut.setAttribute("class", "terminus-control-button terminus-query-btn");
  qbut.appendChild(document.createTextNode("Send Query"));
  qbut.addEventListener("click", function () {
    if (self.ui.pluginAvailable("datatables")) {
      self.gatherDatatableSettings(qip, 'Any_Query');
      self.setDatatableSettings(qip.value);
      self.query(qip.value, self.datatable);
    } else self.query(qip.value);
  });
  qbox.appendChild(qbut);
  box.appendChild(qbox);
  return qip;
};

WOQLTextboxGenerator.prototype.getAsDOM = function (q, qip) {
  var qbox = document.createElement("div");
  qbox.setAttribute("class", "terminus-query-textbox-input");
  var qbuts = document.createElement("div");
  qbuts.setAttribute("class", "terminus-control-buttons"); //qbuts.appendChild(qbut);

  qbox.appendChild(qbuts);
  var qexs = document.createElement("div");
  qexs.setAttribute("class", "terminus-query-examples terminus-db-list-title ");
  var qh = document.createElement("H3");
  qh.appendChild(document.createTextNode("Load query from examples"));
  qh.setAttribute('class', 'terminus-full-css-margin-top terminus-module-head');
  qexs.appendChild(qh);
  var qrow = this.getQueryButtonGroups(qexs);
  qexs.appendChild(qrow);
  /* grouping class queries */

  var qcGroup = this.qGroupQueries(qrow, 'Schema Queries', 'descr blah blah');
  var nqbut = document.createElement("button");
  nqbut.appendChild(document.createTextNode("Show All Classes"));
  nqbut.setAttribute("class", "terminus-control-button terminus-query-btn terminus-query-btn-size");
  nqbut.addEventListener("click", function () {
    UTILS.deleteStylizedEditor(self.ui, qip);
    qip.value = self.wquery.getClassMetaDataQuery(null, self.datatable.pageLength, self.datatable.start);
    UTILS.stylizeEditor(self.ui, qip, 'query', 'javascript');

    if (self.ui.pluginAvailable("datatables")) {
      self.gatherDatatableSettings(qip, 'Show_All_Classes');
      self.query(qip.value, self.datatable);
    } else self.query(qip.value);
  });
  var aqbut = document.createElement("button");
  aqbut.appendChild(document.createTextNode("Show Document Classes"));
  aqbut.setAttribute("class", "terminus-control-button terminus-query-btn terminus-query-btn-size");
  aqbut.addEventListener("click", function () {
    UTILS.deleteStylizedEditor(self.ui, qip);
    qip.value = self.wquery.getClassMetaDataQuery(self.wquery.getSubclassQueryPattern("Class", "dcog/'Document'") + ", not(" + self.wquery.getAbstractQueryPattern("Class") + ")", self.datatable.pageLength, self.datatable.start);
    UTILS.stylizeEditor(self.ui, qip, 'query', 'javascript');

    if (self.ui.pluginAvailable("datatables")) {
      self.gatherDatatableSettings(qip, 'Show_Document_Classes');
      self.query(qip.value, self.datatable);
    } else self.query(qip.value);
  });
  var ebut = document.createElement("button");
  ebut.appendChild(document.createTextNode("Show All Schema Elements"));
  ebut.setAttribute("class", "terminus-control-button terminus-query-btn terminus-query-btn-size");
  var self = this;
  ebut.addEventListener("click", function () {
    UTILS.deleteStylizedEditor(self.ui, qip);
    qip.value = self.wquery.getElementMetaDataQuery(null, self.datatable.pageLength, self.datatable.start);
    UTILS.stylizeEditor(self.ui, qip, 'query', 'javascript');

    if (self.ui.pluginAvailable("datatables")) {
      self.gatherDatatableSettings(qip, 'Show_All_Schema_Elements');
      self.query(qip.value, self.datatable);
    } else self.query(qip.value);
  });
  var dbut = document.createElement("button");
  dbut.appendChild(document.createTextNode("Show All Documents"));
  dbut.setAttribute("class", "terminus-control-button terminus-query-btn terminus-query-btn-size");
  dbut.addEventListener("click", function () {
    UTILS.deleteStylizedEditor(self.ui, qip);
    qip.value = self.wquery.getAllDocumentQuery(null, self.datatable.pageLength, self.datatable.start);
    UTILS.stylizeEditor(self.ui, qip, 'query', 'javascript');

    if (self.ui.pluginAvailable("datatables")) {
      self.gatherDatatableSettings(qip, 'Show_All_Documents');
      self.query(qip.value, self.datatable);
    } else self.query(qip.value);
  });
  var pbut = document.createElement("button");
  pbut.appendChild(document.createTextNode("Show All Data"));
  pbut.setAttribute("class", "terminus-control-button terminus-query-btn terminus-query-btn-size");
  pbut.addEventListener("click", function () {
    UTILS.deleteStylizedEditor(self.ui, qip);
    qip.value = self.wquery.getEverythingQuery(null, self.datatable.pageLength, self.datatable.start);
    UTILS.stylizeEditor(self.ui, qip, 'query', 'javascript');

    if (self.ui.pluginAvailable("datatables")) {
      self.gatherDatatableSettings(qip, 'Show_All_Data');
      self.query(qip.value, self.datatable);
    } else self.query(qip.value);
  });
  var prbut = document.createElement("button");
  prbut.appendChild(document.createTextNode("Show All Properties"));
  prbut.setAttribute("class", "terminus-control-button terminus-query-btn terminus-query-btn-size");
  prbut.addEventListener("click", function () {
    UTILS.deleteStylizedEditor(self.ui, qip);
    qip.value = self.wquery.getPropertyListQuery(null, self.datatable.pageLength, self.datatable.start);
    UTILS.stylizeEditor(self.ui, qip, 'query', 'javascript');

    if (self.ui.pluginAvailable("datatables")) {
      self.gatherDatatableSettings(qip, 'Show_All_Properties');
      self.query(qip.value, self.datatable);
    } else self.query(qip.value);
  });
  /* grouping data queries */

  var qdGroup = this.qGroupQueries(qrow, 'Data Queries', 'descr blah blah');
  var termcc = new TerminusClassChooser(this.ui);
  termcc.empty_choice = "View data of type...";
  var self = this;

  termcc.change = function (new_class) {
    if (new_class) {
      UTILS.deleteStylizedEditor(self.ui, qip);
      qip.value = self.wquery.getDataOfChosenClassQuery(new_class, self.datatable.pageLength, self.datatable.start);
      UTILS.stylizeEditor(self.ui, qip, 'query', 'javascript');

      if (self.ui.pluginAvailable("datatables")) {
        self.gatherDatatableSettings(qip, 'Show_Data_Class');
        self.datatable.chosenValue = new_class; // set chosen val from drop down

        self.query(qip.value, self.datatable);
      } else self.query(qip.value);
    }
  };

  var tcdom = termcc.getAsDOM('terminus-query-select');
  var termpc = new TerminusPropertyChooser(this.ui);
  termpc.empty_choice = "Show data for property...";
  var self = this;

  termpc.change = function (new_property) {
    if (new_property) {
      UTILS.deleteStylizedEditor(self.ui, qip);
      qip.value = self.wquery.getDataOfChosenPropertyQuery(new_property, self.datatable.pageLength, self.datatable.start);
      UTILS.stylizeEditor(self.ui, qip, 'query', 'javascript');

      if (self.ui.pluginAvailable("datatables")) {
        self.gatherDatatableSettings(qip, 'Show_Property_Class');
        self.datatable.chosenValue = new_property; // set chosen val from drop down

        self.query(qip.value, self.datatable);
      } else self.query(qip.value);
    }
  };
  /* grouping document queries */


  var qdocGroup = this.qGroupQueries(qrow, 'Document Queries', 'descr blah blah');
  var pdom = termpc.getAsDOM();
  var docch = new TerminusDocumentChooser(this.ui);

  docch.change = function (val) {
    UTILS.deleteStylizedEditor(self.ui, qip);
    qip.value = self.wquery.getDocumentQuery(val, self.datatable.pageLength, self.datatable.start);
    UTILS.stylizeEditor(self.ui, qip, 'query', 'javascript');

    if (self.ui.pluginAvailable("datatables")) {
      self.gatherDatatableSettings(qip, 'Show_Document_Info_by_Id');
      self.datatable.chosenValue = val;
      self.query(qip.value, self.datatable);
    } else self.query(qip.value);
  };

  var docdom = docch.getAsDOM('terminus-query-select');
  var d2ch = new TerminusDocumentChooser(this.ui, FrameHelper.unshorten("dcog:Document"));
  d2ch.view = "label";
  var d2dom = d2ch.getAsDOM('terminus-query-select');
  var p = document.createElement("p");
  p.appendChild(d2dom);
  /* class queries */

  qcGroup.appendChild(ebut);
  var br = document.createElement('BR');
  qcGroup.appendChild(br);
  qcGroup.appendChild(nqbut);
  var br = document.createElement('BR');
  qcGroup.appendChild(br);
  qcGroup.appendChild(aqbut);
  var br = document.createElement('BR');
  qcGroup.appendChild(br);
  qcGroup.appendChild(prbut);
  var br = document.createElement('BR');
  qcGroup.appendChild(br);
  qbox.appendChild(qexs);
  /* data queries */

  qdGroup.appendChild(tcdom);
  qdGroup.appendChild(pdom);
  var br = document.createElement('BR');
  qdGroup.appendChild(br);
  qdGroup.appendChild(pbut);
  /* document queries */

  qdocGroup.appendChild(docdom);
  qdocGroup.appendChild(dbut);
  qdocGroup.appendChild(p);
  return qbox;
};

module.exports = WOQLTextboxGenerator;

/***/ }),

/***/ "./src/query/WOQLTimePicker.js":
/*!*************************************!*\
  !*** ./src/query/WOQLTimePicker.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

WOQLTimePicker = function WOQLTimePicker(config) {
  this.type = config && config.slidertype ? config.slidertype : "range";
  this.timeslice = false;

  var defch = function defch(from, to, ss) {
    alert("changed to: (from) " + from + " ... (to) " + to + " (" + ss + ")");
  };

  this.change = config && config.change ? config.change : defch;
  this.years = config && config.years ? config.years : 20;
  this.server_side = false;
};

WOQLTimePicker.prototype.toggleServerSideFiltering = function (val) {
  this.server_side = !this.server_side;
};

WOQLTimePicker.prototype.getSliderParameters = function (val) {
  start = 0;
  end = this.years;
  var self = this;
  var pointInit = {
    min: start,
    max: end,
    value: val,
    slide: function slide(event, ui) {
      var tt = self.tickToTime(ui.value);
      self.changeTimeSlice(tt);
    }
  };
  var rangeInit = {
    range: true,
    min: start,
    max: end,
    values: val,
    slide: function slide(event, ui) {
      self.changeTimeSlice(self.tickToTime(ui.values[0]), self.tickToTime(ui.values[1]));
    }
  };
  var sconfig = this.type == "range" ? rangeInit : pointInit;
  return sconfig;
};

WOQLTimePicker.prototype.changeTimeSlice = function (val, val2, noshow) {
  if (this.type == "range") {
    this.timeslice = {};
    this.timeslice.from = val;
    this.timeslice.to = val2;
    this.change(val, val2, this.server_side);
  } else {
    this.timeslice = val;
    this.change(val, false, this.server_side);
  }

  if (!noshow) {
    this.showCurrentPick();
  }
};

WOQLTimePicker.prototype.tickToTime = function (ticknum) {
  if (ticknum == 0) {
    var nval = 0;
  } else {
    var year = 31622400;
    var seconds_ago = year * (this.years - ticknum);
    var now = new Date().getTime() / 1000;
    var nval = now - seconds_ago;
  }

  return nval;
};

WOQLTimePicker.prototype.timeToTick = function (timeval) {
  if (timeval) {
    var y = new Date(timeval * 1000).getFullYear();
    var thisy = new Date().getFullYear();
    return this.years - (thisy - y);
  }

  return 0;
};

WOQLTimePicker.prototype.changeSliderType = function (ntype) {
  var val, val2;

  if (this.type == "point" && ntype == "range") {
    if (this.timeslice) {
      val = this.timeslice;
      val2 = this.timeslice;
    }
  } else if (this.type == "range" && ntype == "point") {
    if (this.timeslice) {
      if (this.timeslice.from == 0 && this.timeslice.to == 0) val = false;else if (this.timeslice.from == 0) val = this.timeslice.to;else if (this.timeslice.to == 0) val = this.timeslice.from;else val = (this.timeslice.from + this.timeslice.to) / 2;
      val2 = false;
    } else {
      val = 0;
    }
  }

  this.type = ntype;
  this.changeTimeSlice(val, val2, true);
  this.updateSliderDOM();
};

WOQLTimePicker.prototype.getSliderTypeDOM = function () {
  var dcd = document.createElement("span");
  dcd.setAttribute("class", "terminus-parameter");
  var lab = document.createElement("label");
  lab.appendChild(document.createTextNode("Dates"));
  dcd.appendChild(lab);
  var self = this;
  var sel = document.createElement("select");
  var opt = document.createElement("option");
  opt.value = "";
  opt.appendChild(document.createTextNode("None"));

  if (this.type == "") {
    opt.setAttribute("selected", "selected");
  }

  sel.appendChild(opt);
  opt = document.createElement("option");
  opt.value = "point";
  opt.appendChild(document.createTextNode("Point"));

  if (this.type == "point") {
    opt.setAttribute("selected", "selected");
  }

  sel.appendChild(opt);
  opt = document.createElement("option");
  opt.value = "range";
  opt.appendChild(document.createTextNode("Range"));

  if (this.type == "range") {
    opt.setAttribute("selected", "selected");
  }

  sel.appendChild(opt);
  var self = this;
  sel.addEventListener("change", function () {
    if (this.value != self.type) {
      self.changeSliderType(this.value);
    }
  });
  dcd.appendChild(sel);
  var cb = document.createElement("input");
  cb.setAttribute("type", "checkbox");
  var elid = this.browserid + "-ssp";

  if (this.server_side) {
    cb.setAttribute("checked", true);
  }

  var self = this;
  cb.addEventListener("change", function () {
    self.toggleServerSideFiltering();
  });
  var lb = document.createElement("label");
  lb.setAttribute("for", elid);
  lb.appendChild(document.createTextNode("Server Side"));
  dcd.appendChild(lb);
  dcd.appendChild(cb);
  return dcd;
};

WOQLTimePicker.prototype.updateSliderDOM = function () {
  this.slideDOM = this.getSliderDOM();
};

WOQLTimePicker.prototype.getSliderDOM = function (start, end) {
  if (this.slideDOM) {
    jQuery(this.slideDOM).empty();
  } else {
    this.slideDOM = document.createElement("div");
    this.slideDOM.setAttribute("class", "terminus-controller-slider");
  }

  if (this.type == "") {
    this.changeTimeSlice(false);
    return this.slideDOM;
  }

  var TopAxisDOM = document.createElement("div");
  TopAxisDOM.setAttribute("class", "terminus-controller-slider-panel terminus-controller-slider-topaxis");

  if (this.type == "point") {
    this.curdate = document.createElement("span");
    this.curdate.setAttribute("class", "terminus-slider-current terminus-slider-current-date");
    TopAxisDOM.appendChild(this.curdate);
  } else if (this.type == "range") {
    this.cursdate = document.createElement("span");
    this.cursdate.setAttribute("class", "terminus-slider-current terminus-slider-current-date-start");
    TopAxisDOM.appendChild(this.cursdate);
    this.curedate = document.createElement("span");
    this.curedate.setAttribute("class", "terminus-slider-current terminus-slider-current-date-end");
    TopAxisDOM.appendChild(this.curedate);
  }

  this.slideDOM.appendChild(TopAxisDOM);
  this.showCurrentPick();
  var LabelDOM = document.createElement("span");
  LabelDOM.setAttribute("class", "terminus-controller-slider-label terminus-controller-slider-startlabel");
  this.slideDOM.appendChild(LabelDOM);
  var PayloadDOM = document.createElement("div");
  PayloadDOM.setAttribute("class", "terminus-controller-slider-payload");
  this.slideDOM.appendChild(PayloadDOM);
  var L2DOM = document.createElement("span");
  L2DOM.setAttribute("class", "terminus-controller-slider-label terminus-controller-slider-endlabel");
  this.slideDOM.appendChild(L2DOM);
  L2DOM.appendChild(this.getSliderAxisDOM());
  var sconfig = this.getSliderParameters(this.getTimesliceAsTicks());
  jQuery(PayloadDOM).slider(sconfig);
  return this.slideDOM;
};

WOQLTimePicker.prototype.getTimesliceAsTicks = function () {
  if (this.timeslice) {
    if (this.type == "range") {
      vtf = this.timeslice.from ? this.timeToTick(this.timeslice.from) : 0;
      vtt = this.timeslice.to ? this.timeToTick(this.timeslice.to) : 0;
      var val = [vtf, vtt];
    } else {
      var val = this.timeToTick(this.timeslice);
    }
  } else {
    var val = this.type == "range" ? [0, this.years] : 0;
  }

  return val;
};

WOQLTimePicker.prototype.showCurrentPick = function () {
  if (this.type == "range") {
    if (!this.timeslice.from) {
      var nd = new Date();
      var fy = nd.getFullYear() - this.years;
    } else {
      var nd = new Date(this.timeslice.from * 1000);
      var fy = nd.getFullYear();
    }

    this.cursdate.innerHTML = fy;
    this.adjustOffset(this.cursdate, this.timeslice.from);

    if (!this.timeslice.to) {
      var ty = new Date().getFullYear();
    } else {
      var ty = new Date(this.timeslice.to * 1000).getFullYear();
    }

    if (ty != fy) {
      this.curedate.innerHTML = ty;
      this.adjustOffset(this.curedate, this.timeslice.to, true); //jQuery(this.curedate).show();
    } else {
      this.curedate.innerHTML = "";
    }
  } else {
    if (this.timeslice) {
      var nd = new Date(this.timeslice * 1000);
      fy = nd.getFullYear();
    } else {
      fy = "off";
    }

    this.curdate.innerHTML = fy;
    this.adjustOffset(this.curdate, this.timeslice);
  }
};

WOQLTimePicker.prototype.adjustOffset = function (dom, tval, r) {
  var tick = this.timeToTick(tval);
  var totwidth = 50 + (this.slideDOM.offsetWidth ? this.slideDOM.offsetWidth : 0);
  var unit = totwidth / (this.years + 1);
  var box = -25;
  var which = r ? "margin-right" : "margin-left";

  if (r) {
    if (tick) {
      var off = (this.years - tick) * unit + box;
    } else {
      var off = box;
    }

    dom.setAttribute("style", "margin-right: " + off + "px");
  } else {
    var off = unit * tick + box;
    dom.setAttribute("style", "margin-left: " + off + "px");
  }
};

WOQLTimePicker.prototype.getSliderAxisDOM = function () {
  var cdom = document.createElement("div");
  cdom.setAttribute("class", "terminus-slider-axis-wrapper");
  var fy = new Date().getFullYear();
  var sd = fy % 5;
  var vals = [];

  for (var i = this.years; i > 0; i -= 5) {
    var val = fy - i - sd + 5;
    vals.push(val);
  }

  for (var i = 0; i < vals.length; i++) {
    var ldom = document.createElement("label");
    ldom.setAttribute("class", "terminus-axis-label");
    ldom.innerHTML = "<div class='terminus-tick'>|</div>" + vals[i];
    cdom.appendChild(ldom);
  }

  ndom = document.createElement("label");
  ndom.setAttribute("class", "terminus-axis-label terminus-axis-now-label");
  cdom.appendChild(ndom);
  return cdom;
};

WOQLTimePicker.prototype.Y2Time = function (y) {
  return new Date(y + "-12-31T12:00:00.000Z").getTime() / 1000;
};

module.exports = WOQLTimePicker;

/***/ })

/******/ });
//# sourceMappingURL=terminus-javascript-sdk.min.js.map